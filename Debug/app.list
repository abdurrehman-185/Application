
app.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08080000  08080000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003e00  080801ac  080801ac  000011ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000970  08083fac  08083fac  00004fac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0808491c  0808491c  0000602c  2**0
                  CONTENTS
  4 .ARM          00000008  0808491c  0808491c  0000591c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08084924  08084924  0000602c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08084924  08084924  00005924  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08084928  08084928  00005928  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000002c  20000000  0808492c  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000cc  2000002c  08084958  0000602c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000f8  08084958  000060f8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000602c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c3bb  00000000  00000000  0000605c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000204d  00000000  00000000  00012417  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ad0  00000000  00000000  00014468  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000846  00000000  00000000  00014f38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002673  00000000  00000000  0001577e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000da52  00000000  00000000  00017df1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f8ef0  00000000  00000000  00025843  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0011e733  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002bd4  00000000  00000000  0011e778  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004d  00000000  00000000  0012134c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080801ac <__do_global_dtors_aux>:
 80801ac:	b510      	push	{r4, lr}
 80801ae:	4c05      	ldr	r4, [pc, #20]	@ (80801c4 <__do_global_dtors_aux+0x18>)
 80801b0:	7823      	ldrb	r3, [r4, #0]
 80801b2:	b933      	cbnz	r3, 80801c2 <__do_global_dtors_aux+0x16>
 80801b4:	4b04      	ldr	r3, [pc, #16]	@ (80801c8 <__do_global_dtors_aux+0x1c>)
 80801b6:	b113      	cbz	r3, 80801be <__do_global_dtors_aux+0x12>
 80801b8:	4804      	ldr	r0, [pc, #16]	@ (80801cc <__do_global_dtors_aux+0x20>)
 80801ba:	f3af 8000 	nop.w
 80801be:	2301      	movs	r3, #1
 80801c0:	7023      	strb	r3, [r4, #0]
 80801c2:	bd10      	pop	{r4, pc}
 80801c4:	2000002c 	.word	0x2000002c
 80801c8:	00000000 	.word	0x00000000
 80801cc:	08083f94 	.word	0x08083f94

080801d0 <frame_dummy>:
 80801d0:	b508      	push	{r3, lr}
 80801d2:	4b03      	ldr	r3, [pc, #12]	@ (80801e0 <frame_dummy+0x10>)
 80801d4:	b11b      	cbz	r3, 80801de <frame_dummy+0xe>
 80801d6:	4903      	ldr	r1, [pc, #12]	@ (80801e4 <frame_dummy+0x14>)
 80801d8:	4803      	ldr	r0, [pc, #12]	@ (80801e8 <frame_dummy+0x18>)
 80801da:	f3af 8000 	nop.w
 80801de:	bd08      	pop	{r3, pc}
 80801e0:	00000000 	.word	0x00000000
 80801e4:	20000030 	.word	0x20000030
 80801e8:	08083f94 	.word	0x08083f94

080801ec <strcmp>:
 80801ec:	f810 2b01 	ldrb.w	r2, [r0], #1
 80801f0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80801f4:	2a01      	cmp	r2, #1
 80801f6:	bf28      	it	cs
 80801f8:	429a      	cmpcs	r2, r3
 80801fa:	d0f7      	beq.n	80801ec <strcmp>
 80801fc:	1ad0      	subs	r0, r2, r3
 80801fe:	4770      	bx	lr

08080200 <strlen>:
 8080200:	4603      	mov	r3, r0
 8080202:	f813 2b01 	ldrb.w	r2, [r3], #1
 8080206:	2a00      	cmp	r2, #0
 8080208:	d1fb      	bne.n	8080202 <strlen+0x2>
 808020a:	1a18      	subs	r0, r3, r0
 808020c:	3801      	subs	r0, #1
 808020e:	4770      	bx	lr

08080210 <__aeabi_uldivmod>:
 8080210:	b953      	cbnz	r3, 8080228 <__aeabi_uldivmod+0x18>
 8080212:	b94a      	cbnz	r2, 8080228 <__aeabi_uldivmod+0x18>
 8080214:	2900      	cmp	r1, #0
 8080216:	bf08      	it	eq
 8080218:	2800      	cmpeq	r0, #0
 808021a:	bf1c      	itt	ne
 808021c:	f04f 31ff 	movne.w	r1, #4294967295
 8080220:	f04f 30ff 	movne.w	r0, #4294967295
 8080224:	f000 b96a 	b.w	80804fc <__aeabi_idiv0>
 8080228:	f1ad 0c08 	sub.w	ip, sp, #8
 808022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8080230:	f000 f806 	bl	8080240 <__udivmoddi4>
 8080234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8080238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 808023c:	b004      	add	sp, #16
 808023e:	4770      	bx	lr

08080240 <__udivmoddi4>:
 8080240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8080244:	9d08      	ldr	r5, [sp, #32]
 8080246:	460c      	mov	r4, r1
 8080248:	2b00      	cmp	r3, #0
 808024a:	d14e      	bne.n	80802ea <__udivmoddi4+0xaa>
 808024c:	4694      	mov	ip, r2
 808024e:	458c      	cmp	ip, r1
 8080250:	4686      	mov	lr, r0
 8080252:	fab2 f282 	clz	r2, r2
 8080256:	d962      	bls.n	808031e <__udivmoddi4+0xde>
 8080258:	b14a      	cbz	r2, 808026e <__udivmoddi4+0x2e>
 808025a:	f1c2 0320 	rsb	r3, r2, #32
 808025e:	4091      	lsls	r1, r2
 8080260:	fa20 f303 	lsr.w	r3, r0, r3
 8080264:	fa0c fc02 	lsl.w	ip, ip, r2
 8080268:	4319      	orrs	r1, r3
 808026a:	fa00 fe02 	lsl.w	lr, r0, r2
 808026e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8080272:	fa1f f68c 	uxth.w	r6, ip
 8080276:	fbb1 f4f7 	udiv	r4, r1, r7
 808027a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 808027e:	fb07 1114 	mls	r1, r7, r4, r1
 8080282:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8080286:	fb04 f106 	mul.w	r1, r4, r6
 808028a:	4299      	cmp	r1, r3
 808028c:	d90a      	bls.n	80802a4 <__udivmoddi4+0x64>
 808028e:	eb1c 0303 	adds.w	r3, ip, r3
 8080292:	f104 30ff 	add.w	r0, r4, #4294967295
 8080296:	f080 8112 	bcs.w	80804be <__udivmoddi4+0x27e>
 808029a:	4299      	cmp	r1, r3
 808029c:	f240 810f 	bls.w	80804be <__udivmoddi4+0x27e>
 80802a0:	3c02      	subs	r4, #2
 80802a2:	4463      	add	r3, ip
 80802a4:	1a59      	subs	r1, r3, r1
 80802a6:	fa1f f38e 	uxth.w	r3, lr
 80802aa:	fbb1 f0f7 	udiv	r0, r1, r7
 80802ae:	fb07 1110 	mls	r1, r7, r0, r1
 80802b2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80802b6:	fb00 f606 	mul.w	r6, r0, r6
 80802ba:	429e      	cmp	r6, r3
 80802bc:	d90a      	bls.n	80802d4 <__udivmoddi4+0x94>
 80802be:	eb1c 0303 	adds.w	r3, ip, r3
 80802c2:	f100 31ff 	add.w	r1, r0, #4294967295
 80802c6:	f080 80fc 	bcs.w	80804c2 <__udivmoddi4+0x282>
 80802ca:	429e      	cmp	r6, r3
 80802cc:	f240 80f9 	bls.w	80804c2 <__udivmoddi4+0x282>
 80802d0:	4463      	add	r3, ip
 80802d2:	3802      	subs	r0, #2
 80802d4:	1b9b      	subs	r3, r3, r6
 80802d6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80802da:	2100      	movs	r1, #0
 80802dc:	b11d      	cbz	r5, 80802e6 <__udivmoddi4+0xa6>
 80802de:	40d3      	lsrs	r3, r2
 80802e0:	2200      	movs	r2, #0
 80802e2:	e9c5 3200 	strd	r3, r2, [r5]
 80802e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80802ea:	428b      	cmp	r3, r1
 80802ec:	d905      	bls.n	80802fa <__udivmoddi4+0xba>
 80802ee:	b10d      	cbz	r5, 80802f4 <__udivmoddi4+0xb4>
 80802f0:	e9c5 0100 	strd	r0, r1, [r5]
 80802f4:	2100      	movs	r1, #0
 80802f6:	4608      	mov	r0, r1
 80802f8:	e7f5      	b.n	80802e6 <__udivmoddi4+0xa6>
 80802fa:	fab3 f183 	clz	r1, r3
 80802fe:	2900      	cmp	r1, #0
 8080300:	d146      	bne.n	8080390 <__udivmoddi4+0x150>
 8080302:	42a3      	cmp	r3, r4
 8080304:	d302      	bcc.n	808030c <__udivmoddi4+0xcc>
 8080306:	4290      	cmp	r0, r2
 8080308:	f0c0 80f0 	bcc.w	80804ec <__udivmoddi4+0x2ac>
 808030c:	1a86      	subs	r6, r0, r2
 808030e:	eb64 0303 	sbc.w	r3, r4, r3
 8080312:	2001      	movs	r0, #1
 8080314:	2d00      	cmp	r5, #0
 8080316:	d0e6      	beq.n	80802e6 <__udivmoddi4+0xa6>
 8080318:	e9c5 6300 	strd	r6, r3, [r5]
 808031c:	e7e3      	b.n	80802e6 <__udivmoddi4+0xa6>
 808031e:	2a00      	cmp	r2, #0
 8080320:	f040 8090 	bne.w	8080444 <__udivmoddi4+0x204>
 8080324:	eba1 040c 	sub.w	r4, r1, ip
 8080328:	ea4f 481c 	mov.w	r8, ip, lsr #16
 808032c:	fa1f f78c 	uxth.w	r7, ip
 8080330:	2101      	movs	r1, #1
 8080332:	fbb4 f6f8 	udiv	r6, r4, r8
 8080336:	ea4f 431e 	mov.w	r3, lr, lsr #16
 808033a:	fb08 4416 	mls	r4, r8, r6, r4
 808033e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8080342:	fb07 f006 	mul.w	r0, r7, r6
 8080346:	4298      	cmp	r0, r3
 8080348:	d908      	bls.n	808035c <__udivmoddi4+0x11c>
 808034a:	eb1c 0303 	adds.w	r3, ip, r3
 808034e:	f106 34ff 	add.w	r4, r6, #4294967295
 8080352:	d202      	bcs.n	808035a <__udivmoddi4+0x11a>
 8080354:	4298      	cmp	r0, r3
 8080356:	f200 80cd 	bhi.w	80804f4 <__udivmoddi4+0x2b4>
 808035a:	4626      	mov	r6, r4
 808035c:	1a1c      	subs	r4, r3, r0
 808035e:	fa1f f38e 	uxth.w	r3, lr
 8080362:	fbb4 f0f8 	udiv	r0, r4, r8
 8080366:	fb08 4410 	mls	r4, r8, r0, r4
 808036a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 808036e:	fb00 f707 	mul.w	r7, r0, r7
 8080372:	429f      	cmp	r7, r3
 8080374:	d908      	bls.n	8080388 <__udivmoddi4+0x148>
 8080376:	eb1c 0303 	adds.w	r3, ip, r3
 808037a:	f100 34ff 	add.w	r4, r0, #4294967295
 808037e:	d202      	bcs.n	8080386 <__udivmoddi4+0x146>
 8080380:	429f      	cmp	r7, r3
 8080382:	f200 80b0 	bhi.w	80804e6 <__udivmoddi4+0x2a6>
 8080386:	4620      	mov	r0, r4
 8080388:	1bdb      	subs	r3, r3, r7
 808038a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 808038e:	e7a5      	b.n	80802dc <__udivmoddi4+0x9c>
 8080390:	f1c1 0620 	rsb	r6, r1, #32
 8080394:	408b      	lsls	r3, r1
 8080396:	fa22 f706 	lsr.w	r7, r2, r6
 808039a:	431f      	orrs	r7, r3
 808039c:	fa20 fc06 	lsr.w	ip, r0, r6
 80803a0:	fa04 f301 	lsl.w	r3, r4, r1
 80803a4:	ea43 030c 	orr.w	r3, r3, ip
 80803a8:	40f4      	lsrs	r4, r6
 80803aa:	fa00 f801 	lsl.w	r8, r0, r1
 80803ae:	0c38      	lsrs	r0, r7, #16
 80803b0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80803b4:	fbb4 fef0 	udiv	lr, r4, r0
 80803b8:	fa1f fc87 	uxth.w	ip, r7
 80803bc:	fb00 441e 	mls	r4, r0, lr, r4
 80803c0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80803c4:	fb0e f90c 	mul.w	r9, lr, ip
 80803c8:	45a1      	cmp	r9, r4
 80803ca:	fa02 f201 	lsl.w	r2, r2, r1
 80803ce:	d90a      	bls.n	80803e6 <__udivmoddi4+0x1a6>
 80803d0:	193c      	adds	r4, r7, r4
 80803d2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80803d6:	f080 8084 	bcs.w	80804e2 <__udivmoddi4+0x2a2>
 80803da:	45a1      	cmp	r9, r4
 80803dc:	f240 8081 	bls.w	80804e2 <__udivmoddi4+0x2a2>
 80803e0:	f1ae 0e02 	sub.w	lr, lr, #2
 80803e4:	443c      	add	r4, r7
 80803e6:	eba4 0409 	sub.w	r4, r4, r9
 80803ea:	fa1f f983 	uxth.w	r9, r3
 80803ee:	fbb4 f3f0 	udiv	r3, r4, r0
 80803f2:	fb00 4413 	mls	r4, r0, r3, r4
 80803f6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80803fa:	fb03 fc0c 	mul.w	ip, r3, ip
 80803fe:	45a4      	cmp	ip, r4
 8080400:	d907      	bls.n	8080412 <__udivmoddi4+0x1d2>
 8080402:	193c      	adds	r4, r7, r4
 8080404:	f103 30ff 	add.w	r0, r3, #4294967295
 8080408:	d267      	bcs.n	80804da <__udivmoddi4+0x29a>
 808040a:	45a4      	cmp	ip, r4
 808040c:	d965      	bls.n	80804da <__udivmoddi4+0x29a>
 808040e:	3b02      	subs	r3, #2
 8080410:	443c      	add	r4, r7
 8080412:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8080416:	fba0 9302 	umull	r9, r3, r0, r2
 808041a:	eba4 040c 	sub.w	r4, r4, ip
 808041e:	429c      	cmp	r4, r3
 8080420:	46ce      	mov	lr, r9
 8080422:	469c      	mov	ip, r3
 8080424:	d351      	bcc.n	80804ca <__udivmoddi4+0x28a>
 8080426:	d04e      	beq.n	80804c6 <__udivmoddi4+0x286>
 8080428:	b155      	cbz	r5, 8080440 <__udivmoddi4+0x200>
 808042a:	ebb8 030e 	subs.w	r3, r8, lr
 808042e:	eb64 040c 	sbc.w	r4, r4, ip
 8080432:	fa04 f606 	lsl.w	r6, r4, r6
 8080436:	40cb      	lsrs	r3, r1
 8080438:	431e      	orrs	r6, r3
 808043a:	40cc      	lsrs	r4, r1
 808043c:	e9c5 6400 	strd	r6, r4, [r5]
 8080440:	2100      	movs	r1, #0
 8080442:	e750      	b.n	80802e6 <__udivmoddi4+0xa6>
 8080444:	f1c2 0320 	rsb	r3, r2, #32
 8080448:	fa20 f103 	lsr.w	r1, r0, r3
 808044c:	fa0c fc02 	lsl.w	ip, ip, r2
 8080450:	fa24 f303 	lsr.w	r3, r4, r3
 8080454:	4094      	lsls	r4, r2
 8080456:	430c      	orrs	r4, r1
 8080458:	ea4f 481c 	mov.w	r8, ip, lsr #16
 808045c:	fa00 fe02 	lsl.w	lr, r0, r2
 8080460:	fa1f f78c 	uxth.w	r7, ip
 8080464:	fbb3 f0f8 	udiv	r0, r3, r8
 8080468:	fb08 3110 	mls	r1, r8, r0, r3
 808046c:	0c23      	lsrs	r3, r4, #16
 808046e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8080472:	fb00 f107 	mul.w	r1, r0, r7
 8080476:	4299      	cmp	r1, r3
 8080478:	d908      	bls.n	808048c <__udivmoddi4+0x24c>
 808047a:	eb1c 0303 	adds.w	r3, ip, r3
 808047e:	f100 36ff 	add.w	r6, r0, #4294967295
 8080482:	d22c      	bcs.n	80804de <__udivmoddi4+0x29e>
 8080484:	4299      	cmp	r1, r3
 8080486:	d92a      	bls.n	80804de <__udivmoddi4+0x29e>
 8080488:	3802      	subs	r0, #2
 808048a:	4463      	add	r3, ip
 808048c:	1a5b      	subs	r3, r3, r1
 808048e:	b2a4      	uxth	r4, r4
 8080490:	fbb3 f1f8 	udiv	r1, r3, r8
 8080494:	fb08 3311 	mls	r3, r8, r1, r3
 8080498:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 808049c:	fb01 f307 	mul.w	r3, r1, r7
 80804a0:	42a3      	cmp	r3, r4
 80804a2:	d908      	bls.n	80804b6 <__udivmoddi4+0x276>
 80804a4:	eb1c 0404 	adds.w	r4, ip, r4
 80804a8:	f101 36ff 	add.w	r6, r1, #4294967295
 80804ac:	d213      	bcs.n	80804d6 <__udivmoddi4+0x296>
 80804ae:	42a3      	cmp	r3, r4
 80804b0:	d911      	bls.n	80804d6 <__udivmoddi4+0x296>
 80804b2:	3902      	subs	r1, #2
 80804b4:	4464      	add	r4, ip
 80804b6:	1ae4      	subs	r4, r4, r3
 80804b8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80804bc:	e739      	b.n	8080332 <__udivmoddi4+0xf2>
 80804be:	4604      	mov	r4, r0
 80804c0:	e6f0      	b.n	80802a4 <__udivmoddi4+0x64>
 80804c2:	4608      	mov	r0, r1
 80804c4:	e706      	b.n	80802d4 <__udivmoddi4+0x94>
 80804c6:	45c8      	cmp	r8, r9
 80804c8:	d2ae      	bcs.n	8080428 <__udivmoddi4+0x1e8>
 80804ca:	ebb9 0e02 	subs.w	lr, r9, r2
 80804ce:	eb63 0c07 	sbc.w	ip, r3, r7
 80804d2:	3801      	subs	r0, #1
 80804d4:	e7a8      	b.n	8080428 <__udivmoddi4+0x1e8>
 80804d6:	4631      	mov	r1, r6
 80804d8:	e7ed      	b.n	80804b6 <__udivmoddi4+0x276>
 80804da:	4603      	mov	r3, r0
 80804dc:	e799      	b.n	8080412 <__udivmoddi4+0x1d2>
 80804de:	4630      	mov	r0, r6
 80804e0:	e7d4      	b.n	808048c <__udivmoddi4+0x24c>
 80804e2:	46d6      	mov	lr, sl
 80804e4:	e77f      	b.n	80803e6 <__udivmoddi4+0x1a6>
 80804e6:	4463      	add	r3, ip
 80804e8:	3802      	subs	r0, #2
 80804ea:	e74d      	b.n	8080388 <__udivmoddi4+0x148>
 80804ec:	4606      	mov	r6, r0
 80804ee:	4623      	mov	r3, r4
 80804f0:	4608      	mov	r0, r1
 80804f2:	e70f      	b.n	8080314 <__udivmoddi4+0xd4>
 80804f4:	3e02      	subs	r6, #2
 80804f6:	4463      	add	r3, ip
 80804f8:	e730      	b.n	808035c <__udivmoddi4+0x11c>
 80804fa:	bf00      	nop

080804fc <__aeabi_idiv0>:
 80804fc:	4770      	bx	lr
 80804fe:	bf00      	nop

08080500 <main>:
HAL_StatusTypeDef WriteFlash(uint32_t* pData, uint32_t startAddress, uint32_t dataLength);
void ReadFlash(uint32_t* pData, uint32_t startAddress, uint32_t dataLength);
void VerifyFlashWrite(uint32_t* pData, uint32_t startAddress, uint32_t dataLength);

int main(void)
{
 8080500:	b580      	push	{r7, lr}
 8080502:	f5ad 6d00 	sub.w	sp, sp, #2048	@ 0x800
 8080506:	af00      	add	r7, sp, #0
    HAL_Init();
 8080508:	f000 fc31 	bl	8080d6e <HAL_Init>
    SystemClock_Config();
 808050c:	f000 fa28 	bl	8080960 <SystemClock_Config>
    LED_Init();
 8080510:	f000 fa78 	bl	8080a04 <LED_Init>
    UART_Init();
 8080514:	f000 faae 	bl	8080a74 <UART_Init>

    uint32_t pData[ARRAY_SIZE] = {
 8080518:	f507 6300 	add.w	r3, r7, #2048	@ 0x800
 808051c:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
 8080520:	4a14      	ldr	r2, [pc, #80]	@ (8080574 <main+0x74>)
 8080522:	4618      	mov	r0, r3
 8080524:	4611      	mov	r1, r2
 8080526:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 808052a:	461a      	mov	r2, r3
 808052c:	f003 fd24 	bl	8083f78 <memcpy>
    APP_START_ADDRESS + 488, APP_START_ADDRESS + 489, APP_START_ADDRESS + 490, APP_START_ADDRESS + 491, APP_START_ADDRESS + 492, APP_START_ADDRESS + 493, APP_START_ADDRESS + 494, APP_START_ADDRESS + 495,
    APP_START_ADDRESS + 496, APP_START_ADDRESS + 497, APP_START_ADDRESS + 498, APP_START_ADDRESS + 499, APP_START_ADDRESS + 500, APP_START_ADDRESS + 501, APP_START_ADDRESS + 502, APP_START_ADDRESS + 503,
    APP_START_ADDRESS + 504, APP_START_ADDRESS + 505, APP_START_ADDRESS + 506, APP_START_ADDRESS + 507, APP_START_ADDRESS + 508, APP_START_ADDRESS + 509, APP_START_ADDRESS + 510, APP_START_ADDRESS + 511
};

    EraseFlash(APP_START_ADDRESS);
 8080530:	4811      	ldr	r0, [pc, #68]	@ (8080578 <main+0x78>)
 8080532:	f000 f825 	bl	8080580 <EraseFlash>
    WriteFlash(pData, APP_START_ADDRESS, 512);
 8080536:	463b      	mov	r3, r7
 8080538:	f44f 7200 	mov.w	r2, #512	@ 0x200
 808053c:	490e      	ldr	r1, [pc, #56]	@ (8080578 <main+0x78>)
 808053e:	4618      	mov	r0, r3
 8080540:	f000 f84c 	bl	80805dc <WriteFlash>
    VerifyFlashWrite(pData, APP_START_ADDRESS, 512);
 8080544:	463b      	mov	r3, r7
 8080546:	f44f 7200 	mov.w	r2, #512	@ 0x200
 808054a:	490b      	ldr	r1, [pc, #44]	@ (8080578 <main+0x78>)
 808054c:	4618      	mov	r0, r3
 808054e:	f000 f89f 	bl	8080690 <VerifyFlashWrite>

    Application_Init();
 8080552:	f000 f8fb 	bl	808074c <Application_Init>

    while (1)
    {
        HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 8080556:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 808055a:	4808      	ldr	r0, [pc, #32]	@ (808057c <main+0x7c>)
 808055c:	f001 fab6 	bl	8081acc <HAL_GPIO_TogglePin>
        HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 8080560:	2180      	movs	r1, #128	@ 0x80
 8080562:	4806      	ldr	r0, [pc, #24]	@ (808057c <main+0x7c>)
 8080564:	f001 fab2 	bl	8081acc <HAL_GPIO_TogglePin>
        HAL_Delay(500);
 8080568:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 808056c:	f000 fc74 	bl	8080e58 <HAL_Delay>
        HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 8080570:	bf00      	nop
 8080572:	e7f0      	b.n	8080556 <main+0x56>
 8080574:	08083fac 	.word	0x08083fac
 8080578:	080ff800 	.word	0x080ff800
 808057c:	48000400 	.word	0x48000400

08080580 <EraseFlash>:
    }
}

void EraseFlash(uint32_t startAddress)
{
 8080580:	b580      	push	{r7, lr}
 8080582:	b088      	sub	sp, #32
 8080584:	af00      	add	r7, sp, #0
 8080586:	6078      	str	r0, [r7, #4]
    HAL_FLASH_Unlock();
 8080588:	f000 fece 	bl	8081328 <HAL_FLASH_Unlock>

    FLASH_EraseInitTypeDef eraseInitStruct;
    uint32_t pageError = 0;
 808058c:	2300      	movs	r3, #0
 808058e:	60fb      	str	r3, [r7, #12]

    eraseInitStruct.TypeErase = FLASH_TYPEERASE_PAGES;
 8080590:	2300      	movs	r3, #0
 8080592:	613b      	str	r3, [r7, #16]
    eraseInitStruct.Banks = FLASH_BANK_1;
 8080594:	2301      	movs	r3, #1
 8080596:	617b      	str	r3, [r7, #20]
    eraseInitStruct.Page = (startAddress - FLASH_START_ADDRESS) / FLASH_PAGE_SIZE;
 8080598:	687b      	ldr	r3, [r7, #4]
 808059a:	f103 4378 	add.w	r3, r3, #4160749568	@ 0xf8000000
 808059e:	0adb      	lsrs	r3, r3, #11
 80805a0:	61bb      	str	r3, [r7, #24]
    eraseInitStruct.NbPages = (END_ADDRESS - startAddress) / FLASH_PAGE_SIZE + 1;
 80805a2:	687a      	ldr	r2, [r7, #4]
 80805a4:	4b0c      	ldr	r3, [pc, #48]	@ (80805d8 <EraseFlash+0x58>)
 80805a6:	1a9b      	subs	r3, r3, r2
 80805a8:	0adb      	lsrs	r3, r3, #11
 80805aa:	3301      	adds	r3, #1
 80805ac:	61fb      	str	r3, [r7, #28]

    if (HAL_FLASHEx_Erase(&eraseInitStruct, &pageError) != HAL_OK)
 80805ae:	f107 020c 	add.w	r2, r7, #12
 80805b2:	f107 0310 	add.w	r3, r7, #16
 80805b6:	4611      	mov	r1, r2
 80805b8:	4618      	mov	r0, r3
 80805ba:	f000 ff99 	bl	80814f0 <HAL_FLASHEx_Erase>
 80805be:	4603      	mov	r3, r0
 80805c0:	2b00      	cmp	r3, #0
 80805c2:	d003      	beq.n	80805cc <EraseFlash+0x4c>
    {
        HAL_FLASH_Lock();
 80805c4:	f000 fed2 	bl	808136c <HAL_FLASH_Lock>
        Error_Handler();
 80805c8:	f000 faba 	bl	8080b40 <Error_Handler>
    }

    HAL_FLASH_Lock();
 80805cc:	f000 fece 	bl	808136c <HAL_FLASH_Lock>
}
 80805d0:	bf00      	nop
 80805d2:	3720      	adds	r7, #32
 80805d4:	46bd      	mov	sp, r7
 80805d6:	bd80      	pop	{r7, pc}
 80805d8:	080fffff 	.word	0x080fffff

080805dc <WriteFlash>:

HAL_StatusTypeDef WriteFlash(uint32_t* pData, uint32_t startAddress, uint32_t dataLength)
{
 80805dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80805e0:	b088      	sub	sp, #32
 80805e2:	af00      	add	r7, sp, #0
 80805e4:	60f8      	str	r0, [r7, #12]
 80805e6:	60b9      	str	r1, [r7, #8]
 80805e8:	607a      	str	r2, [r7, #4]
    HAL_StatusTypeDef status = HAL_OK;
 80805ea:	2300      	movs	r3, #0
 80805ec:	77fb      	strb	r3, [r7, #31]
    HAL_FLASH_Unlock();
 80805ee:	f000 fe9b 	bl	8081328 <HAL_FLASH_Unlock>

    for (uint32_t i = 0; i < dataLength; i += 2)
 80805f2:	2300      	movs	r3, #0
 80805f4:	61bb      	str	r3, [r7, #24]
 80805f6:	e02e      	b.n	8080656 <WriteFlash+0x7a>
    {
        uint64_t data64 = ((uint64_t)pData[i + 1] << 32) | pData[i];
 80805f8:	69bb      	ldr	r3, [r7, #24]
 80805fa:	3301      	adds	r3, #1
 80805fc:	009b      	lsls	r3, r3, #2
 80805fe:	68fa      	ldr	r2, [r7, #12]
 8080600:	4413      	add	r3, r2
 8080602:	681b      	ldr	r3, [r3, #0]
 8080604:	2200      	movs	r2, #0
 8080606:	469a      	mov	sl, r3
 8080608:	4693      	mov	fp, r2
 808060a:	f04f 0200 	mov.w	r2, #0
 808060e:	f04f 0300 	mov.w	r3, #0
 8080612:	4653      	mov	r3, sl
 8080614:	2200      	movs	r2, #0
 8080616:	69b9      	ldr	r1, [r7, #24]
 8080618:	0089      	lsls	r1, r1, #2
 808061a:	68f8      	ldr	r0, [r7, #12]
 808061c:	4401      	add	r1, r0
 808061e:	6809      	ldr	r1, [r1, #0]
 8080620:	2000      	movs	r0, #0
 8080622:	460c      	mov	r4, r1
 8080624:	4605      	mov	r5, r0
 8080626:	ea42 0804 	orr.w	r8, r2, r4
 808062a:	ea43 0905 	orr.w	r9, r3, r5
 808062e:	e9c7 8904 	strd	r8, r9, [r7, #16]

        if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, startAddress + (i * 4), data64) != HAL_OK)
 8080632:	69bb      	ldr	r3, [r7, #24]
 8080634:	009a      	lsls	r2, r3, #2
 8080636:	68bb      	ldr	r3, [r7, #8]
 8080638:	18d1      	adds	r1, r2, r3
 808063a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 808063e:	2000      	movs	r0, #0
 8080640:	f000 fe06 	bl	8081250 <HAL_FLASH_Program>
 8080644:	4603      	mov	r3, r0
 8080646:	2b00      	cmp	r3, #0
 8080648:	d002      	beq.n	8080650 <WriteFlash+0x74>
        {
            status = HAL_ERROR;
 808064a:	2301      	movs	r3, #1
 808064c:	77fb      	strb	r3, [r7, #31]
            break;
 808064e:	e006      	b.n	808065e <WriteFlash+0x82>
    for (uint32_t i = 0; i < dataLength; i += 2)
 8080650:	69bb      	ldr	r3, [r7, #24]
 8080652:	3302      	adds	r3, #2
 8080654:	61bb      	str	r3, [r7, #24]
 8080656:	69ba      	ldr	r2, [r7, #24]
 8080658:	687b      	ldr	r3, [r7, #4]
 808065a:	429a      	cmp	r2, r3
 808065c:	d3cc      	bcc.n	80805f8 <WriteFlash+0x1c>
        }
    }

    HAL_FLASH_Lock();
 808065e:	f000 fe85 	bl	808136c <HAL_FLASH_Lock>
    return status;
 8080662:	7ffb      	ldrb	r3, [r7, #31]
}
 8080664:	4618      	mov	r0, r3
 8080666:	3720      	adds	r7, #32
 8080668:	46bd      	mov	sp, r7
 808066a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0808066e <ReadFlash>:
void ReadFlash(uint32_t* pData, uint32_t startAddress, uint32_t dataLength)
{
 808066e:	b580      	push	{r7, lr}
 8080670:	b084      	sub	sp, #16
 8080672:	af00      	add	r7, sp, #0
 8080674:	60f8      	str	r0, [r7, #12]
 8080676:	60b9      	str	r1, [r7, #8]
 8080678:	607a      	str	r2, [r7, #4]
    memcpy(pData, (uint32_t*)startAddress, dataLength * sizeof(uint32_t));
 808067a:	68b9      	ldr	r1, [r7, #8]
 808067c:	687b      	ldr	r3, [r7, #4]
 808067e:	009b      	lsls	r3, r3, #2
 8080680:	461a      	mov	r2, r3
 8080682:	68f8      	ldr	r0, [r7, #12]
 8080684:	f003 fc78 	bl	8083f78 <memcpy>
}
 8080688:	bf00      	nop
 808068a:	3710      	adds	r7, #16
 808068c:	46bd      	mov	sp, r7
 808068e:	bd80      	pop	{r7, pc}

08080690 <VerifyFlashWrite>:

void VerifyFlashWrite(uint32_t* pData, uint32_t startAddress, uint32_t dataLength)
{
 8080690:	b580      	push	{r7, lr}
 8080692:	f6ad 0d18 	subw	sp, sp, #2072	@ 0x818
 8080696:	af00      	add	r7, sp, #0
 8080698:	f607 0318 	addw	r3, r7, #2072	@ 0x818
 808069c:	f6a3 030c 	subw	r3, r3, #2060	@ 0x80c
 80806a0:	6018      	str	r0, [r3, #0]
 80806a2:	f607 0318 	addw	r3, r7, #2072	@ 0x818
 80806a6:	f5a3 6301 	sub.w	r3, r3, #2064	@ 0x810
 80806aa:	6019      	str	r1, [r3, #0]
 80806ac:	f607 0318 	addw	r3, r7, #2072	@ 0x818
 80806b0:	f6a3 0314 	subw	r3, r3, #2068	@ 0x814
 80806b4:	601a      	str	r2, [r3, #0]
    uint32_t readData[512];

    ReadFlash(readData, startAddress, dataLength);
 80806b6:	f607 0318 	addw	r3, r7, #2072	@ 0x818
 80806ba:	f6a3 0214 	subw	r2, r3, #2068	@ 0x814
 80806be:	f607 0318 	addw	r3, r7, #2072	@ 0x818
 80806c2:	f5a3 6301 	sub.w	r3, r3, #2064	@ 0x810
 80806c6:	f107 0010 	add.w	r0, r7, #16
 80806ca:	6812      	ldr	r2, [r2, #0]
 80806cc:	6819      	ldr	r1, [r3, #0]
 80806ce:	f7ff ffce 	bl	808066e <ReadFlash>

    if (memcmp(pData, readData, dataLength) == 0)
 80806d2:	f607 0318 	addw	r3, r7, #2072	@ 0x818
 80806d6:	f6a3 0214 	subw	r2, r3, #2068	@ 0x814
 80806da:	f107 0110 	add.w	r1, r7, #16
 80806de:	f607 0318 	addw	r3, r7, #2072	@ 0x818
 80806e2:	f6a3 030c 	subw	r3, r3, #2060	@ 0x80c
 80806e6:	6812      	ldr	r2, [r2, #0]
 80806e8:	6818      	ldr	r0, [r3, #0]
 80806ea:	f003 fbf8 	bl	8083ede <memcmp>
 80806ee:	4603      	mov	r3, r0
 80806f0:	2b00      	cmp	r3, #0
 80806f2:	d110      	bne.n	8080716 <VerifyFlashWrite+0x86>
    {
        char *msg = "Flash erased successfully.\r\n";
 80806f4:	4b12      	ldr	r3, [pc, #72]	@ (8080740 <VerifyFlashWrite+0xb0>)
 80806f6:	f8c7 3810 	str.w	r3, [r7, #2064]	@ 0x810
        HAL_UART_Transmit(&hlpuart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 80806fa:	f8d7 0810 	ldr.w	r0, [r7, #2064]	@ 0x810
 80806fe:	f7ff fd7f 	bl	8080200 <strlen>
 8080702:	4603      	mov	r3, r0
 8080704:	b29a      	uxth	r2, r3
 8080706:	f04f 33ff 	mov.w	r3, #4294967295
 808070a:	f8d7 1810 	ldr.w	r1, [r7, #2064]	@ 0x810
 808070e:	480d      	ldr	r0, [pc, #52]	@ (8080744 <VerifyFlashWrite+0xb4>)
 8080710:	f002 fdc0 	bl	8083294 <HAL_UART_Transmit>
    else
    {
        char *msg = "Flash erase failed.\r\n";
        HAL_UART_Transmit(&hlpuart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
    }
}
 8080714:	e00f      	b.n	8080736 <VerifyFlashWrite+0xa6>
        char *msg = "Flash erase failed.\r\n";
 8080716:	4b0c      	ldr	r3, [pc, #48]	@ (8080748 <VerifyFlashWrite+0xb8>)
 8080718:	f8c7 3814 	str.w	r3, [r7, #2068]	@ 0x814
        HAL_UART_Transmit(&hlpuart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 808071c:	f8d7 0814 	ldr.w	r0, [r7, #2068]	@ 0x814
 8080720:	f7ff fd6e 	bl	8080200 <strlen>
 8080724:	4603      	mov	r3, r0
 8080726:	b29a      	uxth	r2, r3
 8080728:	f04f 33ff 	mov.w	r3, #4294967295
 808072c:	f8d7 1814 	ldr.w	r1, [r7, #2068]	@ 0x814
 8080730:	4804      	ldr	r0, [pc, #16]	@ (8080744 <VerifyFlashWrite+0xb4>)
 8080732:	f002 fdaf 	bl	8083294 <HAL_UART_Transmit>
}
 8080736:	bf00      	nop
 8080738:	f607 0718 	addw	r7, r7, #2072	@ 0x818
 808073c:	46bd      	mov	sp, r7
 808073e:	bd80      	pop	{r7, pc}
 8080740:	080847ac 	.word	0x080847ac
 8080744:	20000048 	.word	0x20000048
 8080748:	080847cc 	.word	0x080847cc

0808074c <Application_Init>:

void Application_Init(void)
{
 808074c:	b580      	push	{r7, lr}
 808074e:	b082      	sub	sp, #8
 8080750:	af00      	add	r7, sp, #0
    char *msg = "Application Started\r\n";
 8080752:	4b09      	ldr	r3, [pc, #36]	@ (8080778 <Application_Init+0x2c>)
 8080754:	607b      	str	r3, [r7, #4]
    HAL_UART_Transmit(&hlpuart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8080756:	6878      	ldr	r0, [r7, #4]
 8080758:	f7ff fd52 	bl	8080200 <strlen>
 808075c:	4603      	mov	r3, r0
 808075e:	b29a      	uxth	r2, r3
 8080760:	f04f 33ff 	mov.w	r3, #4294967295
 8080764:	6879      	ldr	r1, [r7, #4]
 8080766:	4805      	ldr	r0, [pc, #20]	@ (808077c <Application_Init+0x30>)
 8080768:	f002 fd94 	bl	8083294 <HAL_UART_Transmit>

    CheckPassword();
 808076c:	f000 f808 	bl	8080780 <CheckPassword>
}
 8080770:	bf00      	nop
 8080772:	3708      	adds	r7, #8
 8080774:	46bd      	mov	sp, r7
 8080776:	bd80      	pop	{r7, pc}
 8080778:	080847e4 	.word	0x080847e4
 808077c:	20000048 	.word	0x20000048

08080780 <CheckPassword>:

void CheckPassword(void)
{
 8080780:	b580      	push	{r7, lr}
 8080782:	b088      	sub	sp, #32
 8080784:	af00      	add	r7, sp, #0
    char password[] = "1234";
 8080786:	4a2a      	ldr	r2, [pc, #168]	@ (8080830 <CheckPassword+0xb0>)
 8080788:	f107 030c 	add.w	r3, r7, #12
 808078c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8080790:	6018      	str	r0, [r3, #0]
 8080792:	3304      	adds	r3, #4
 8080794:	7019      	strb	r1, [r3, #0]
    char input[5];
    char *prompt = "Enter password:\r\n";
 8080796:	4b27      	ldr	r3, [pc, #156]	@ (8080834 <CheckPassword+0xb4>)
 8080798:	61fb      	str	r3, [r7, #28]
    HAL_UART_Transmit(&hlpuart1, (uint8_t*)prompt, strlen(prompt), HAL_MAX_DELAY);
 808079a:	69f8      	ldr	r0, [r7, #28]
 808079c:	f7ff fd30 	bl	8080200 <strlen>
 80807a0:	4603      	mov	r3, r0
 80807a2:	b29a      	uxth	r2, r3
 80807a4:	f04f 33ff 	mov.w	r3, #4294967295
 80807a8:	69f9      	ldr	r1, [r7, #28]
 80807aa:	4823      	ldr	r0, [pc, #140]	@ (8080838 <CheckPassword+0xb8>)
 80807ac:	f002 fd72 	bl	8083294 <HAL_UART_Transmit>

    HAL_UART_Receive(&hlpuart1, (uint8_t*)input, sizeof(input), HAL_MAX_DELAY);
 80807b0:	1d39      	adds	r1, r7, #4
 80807b2:	f04f 33ff 	mov.w	r3, #4294967295
 80807b6:	2205      	movs	r2, #5
 80807b8:	481f      	ldr	r0, [pc, #124]	@ (8080838 <CheckPassword+0xb8>)
 80807ba:	f002 fdf4 	bl	80833a6 <HAL_UART_Receive>
    input[strcspn(input, "\r\n")] = 0;
 80807be:	1d3b      	adds	r3, r7, #4
 80807c0:	491e      	ldr	r1, [pc, #120]	@ (808083c <CheckPassword+0xbc>)
 80807c2:	4618      	mov	r0, r3
 80807c4:	f003 fba3 	bl	8083f0e <strcspn>
 80807c8:	4603      	mov	r3, r0
 80807ca:	3320      	adds	r3, #32
 80807cc:	443b      	add	r3, r7
 80807ce:	2200      	movs	r2, #0
 80807d0:	f803 2c1c 	strb.w	r2, [r3, #-28]

    if (strcmp(input, password) == 0)
 80807d4:	f107 020c 	add.w	r2, r7, #12
 80807d8:	1d3b      	adds	r3, r7, #4
 80807da:	4611      	mov	r1, r2
 80807dc:	4618      	mov	r0, r3
 80807de:	f7ff fd05 	bl	80801ec <strcmp>
 80807e2:	4603      	mov	r3, r0
 80807e4:	2b00      	cmp	r3, #0
 80807e6:	d10f      	bne.n	8080808 <CheckPassword+0x88>
    {
        char *success = "Password correct. Enter command:\r\n";
 80807e8:	4b15      	ldr	r3, [pc, #84]	@ (8080840 <CheckPassword+0xc0>)
 80807ea:	617b      	str	r3, [r7, #20]
        HAL_UART_Transmit(&hlpuart1, (uint8_t*)success, strlen(success), HAL_MAX_DELAY);
 80807ec:	6978      	ldr	r0, [r7, #20]
 80807ee:	f7ff fd07 	bl	8080200 <strlen>
 80807f2:	4603      	mov	r3, r0
 80807f4:	b29a      	uxth	r2, r3
 80807f6:	f04f 33ff 	mov.w	r3, #4294967295
 80807fa:	6979      	ldr	r1, [r7, #20]
 80807fc:	480e      	ldr	r0, [pc, #56]	@ (8080838 <CheckPassword+0xb8>)
 80807fe:	f002 fd49 	bl	8083294 <HAL_UART_Transmit>
        ProcessCommand();
 8080802:	f000 f821 	bl	8080848 <ProcessCommand>
    {
        char *fail = "Password incorrect. Try again:\r\n";
        HAL_UART_Transmit(&hlpuart1, (uint8_t*)fail, strlen(fail), HAL_MAX_DELAY);
        CheckPassword();
    }
}
 8080806:	e00e      	b.n	8080826 <CheckPassword+0xa6>
        char *fail = "Password incorrect. Try again:\r\n";
 8080808:	4b0e      	ldr	r3, [pc, #56]	@ (8080844 <CheckPassword+0xc4>)
 808080a:	61bb      	str	r3, [r7, #24]
        HAL_UART_Transmit(&hlpuart1, (uint8_t*)fail, strlen(fail), HAL_MAX_DELAY);
 808080c:	69b8      	ldr	r0, [r7, #24]
 808080e:	f7ff fcf7 	bl	8080200 <strlen>
 8080812:	4603      	mov	r3, r0
 8080814:	b29a      	uxth	r2, r3
 8080816:	f04f 33ff 	mov.w	r3, #4294967295
 808081a:	69b9      	ldr	r1, [r7, #24]
 808081c:	4806      	ldr	r0, [pc, #24]	@ (8080838 <CheckPassword+0xb8>)
 808081e:	f002 fd39 	bl	8083294 <HAL_UART_Transmit>
        CheckPassword();
 8080822:	f7ff ffad 	bl	8080780 <CheckPassword>
}
 8080826:	bf00      	nop
 8080828:	3720      	adds	r7, #32
 808082a:	46bd      	mov	sp, r7
 808082c:	bd80      	pop	{r7, pc}
 808082e:	bf00      	nop
 8080830:	0808485c 	.word	0x0808485c
 8080834:	080847fc 	.word	0x080847fc
 8080838:	20000048 	.word	0x20000048
 808083c:	08084810 	.word	0x08084810
 8080840:	08084814 	.word	0x08084814
 8080844:	08084838 	.word	0x08084838

08080848 <ProcessCommand>:

void ProcessCommand(void)
{
 8080848:	b580      	push	{r7, lr}
 808084a:	b086      	sub	sp, #24
 808084c:	af00      	add	r7, sp, #0
    char input[5];
    HAL_UART_Receive(&hlpuart1, (uint8_t*)input, sizeof(input), HAL_MAX_DELAY);
 808084e:	4639      	mov	r1, r7
 8080850:	f04f 33ff 	mov.w	r3, #4294967295
 8080854:	2205      	movs	r2, #5
 8080856:	4838      	ldr	r0, [pc, #224]	@ (8080938 <ProcessCommand+0xf0>)
 8080858:	f002 fda5 	bl	80833a6 <HAL_UART_Receive>
    input[strcspn(input, "\r\n")] = 0;
 808085c:	463b      	mov	r3, r7
 808085e:	4937      	ldr	r1, [pc, #220]	@ (808093c <ProcessCommand+0xf4>)
 8080860:	4618      	mov	r0, r3
 8080862:	f003 fb54 	bl	8083f0e <strcspn>
 8080866:	4603      	mov	r3, r0
 8080868:	3318      	adds	r3, #24
 808086a:	443b      	add	r3, r7
 808086c:	2200      	movs	r2, #0
 808086e:	f803 2c18 	strb.w	r2, [r3, #-24]

    if (strcmp(input, "led on") == 0)
 8080872:	463b      	mov	r3, r7
 8080874:	4932      	ldr	r1, [pc, #200]	@ (8080940 <ProcessCommand+0xf8>)
 8080876:	4618      	mov	r0, r3
 8080878:	f7ff fcb8 	bl	80801ec <strcmp>
 808087c:	4603      	mov	r3, r0
 808087e:	2b00      	cmp	r3, #0
 8080880:	d113      	bne.n	80808aa <ProcessCommand+0x62>
    {
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 8080882:	2201      	movs	r2, #1
 8080884:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8080888:	482e      	ldr	r0, [pc, #184]	@ (8080944 <ProcessCommand+0xfc>)
 808088a:	f001 f907 	bl	8081a9c <HAL_GPIO_WritePin>
        char *msg = "LED turned on.\r\n";
 808088e:	4b2e      	ldr	r3, [pc, #184]	@ (8080948 <ProcessCommand+0x100>)
 8080890:	60bb      	str	r3, [r7, #8]
        HAL_UART_Transmit(&hlpuart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8080892:	68b8      	ldr	r0, [r7, #8]
 8080894:	f7ff fcb4 	bl	8080200 <strlen>
 8080898:	4603      	mov	r3, r0
 808089a:	b29a      	uxth	r2, r3
 808089c:	f04f 33ff 	mov.w	r3, #4294967295
 80808a0:	68b9      	ldr	r1, [r7, #8]
 80808a2:	4825      	ldr	r0, [pc, #148]	@ (8080938 <ProcessCommand+0xf0>)
 80808a4:	f002 fcf6 	bl	8083294 <HAL_UART_Transmit>
    else
    {
        char *msg = "Unknown command.\r\n";
        HAL_UART_Transmit(&hlpuart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
    }
}
 80808a8:	e041      	b.n	808092e <ProcessCommand+0xe6>
    else if (strcmp(input, "led off") == 0)
 80808aa:	463b      	mov	r3, r7
 80808ac:	4927      	ldr	r1, [pc, #156]	@ (808094c <ProcessCommand+0x104>)
 80808ae:	4618      	mov	r0, r3
 80808b0:	f7ff fc9c 	bl	80801ec <strcmp>
 80808b4:	4603      	mov	r3, r0
 80808b6:	2b00      	cmp	r3, #0
 80808b8:	d113      	bne.n	80808e2 <ProcessCommand+0x9a>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 80808ba:	2200      	movs	r2, #0
 80808bc:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80808c0:	4820      	ldr	r0, [pc, #128]	@ (8080944 <ProcessCommand+0xfc>)
 80808c2:	f001 f8eb 	bl	8081a9c <HAL_GPIO_WritePin>
        char *msg = "LED turned off.\r\n";
 80808c6:	4b22      	ldr	r3, [pc, #136]	@ (8080950 <ProcessCommand+0x108>)
 80808c8:	60fb      	str	r3, [r7, #12]
        HAL_UART_Transmit(&hlpuart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 80808ca:	68f8      	ldr	r0, [r7, #12]
 80808cc:	f7ff fc98 	bl	8080200 <strlen>
 80808d0:	4603      	mov	r3, r0
 80808d2:	b29a      	uxth	r2, r3
 80808d4:	f04f 33ff 	mov.w	r3, #4294967295
 80808d8:	68f9      	ldr	r1, [r7, #12]
 80808da:	4817      	ldr	r0, [pc, #92]	@ (8080938 <ProcessCommand+0xf0>)
 80808dc:	f002 fcda 	bl	8083294 <HAL_UART_Transmit>
}
 80808e0:	e025      	b.n	808092e <ProcessCommand+0xe6>
    else if (strcmp(input, "boot") == 0)
 80808e2:	463b      	mov	r3, r7
 80808e4:	491b      	ldr	r1, [pc, #108]	@ (8080954 <ProcessCommand+0x10c>)
 80808e6:	4618      	mov	r0, r3
 80808e8:	f7ff fc80 	bl	80801ec <strcmp>
 80808ec:	4603      	mov	r3, r0
 80808ee:	2b00      	cmp	r3, #0
 80808f0:	d110      	bne.n	8080914 <ProcessCommand+0xcc>
        char *msg = "Updating bootloader...\r\n";
 80808f2:	4b19      	ldr	r3, [pc, #100]	@ (8080958 <ProcessCommand+0x110>)
 80808f4:	613b      	str	r3, [r7, #16]
        HAL_UART_Transmit(&hlpuart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 80808f6:	6938      	ldr	r0, [r7, #16]
 80808f8:	f7ff fc82 	bl	8080200 <strlen>
 80808fc:	4603      	mov	r3, r0
 80808fe:	b29a      	uxth	r2, r3
 8080900:	f04f 33ff 	mov.w	r3, #4294967295
 8080904:	6939      	ldr	r1, [r7, #16]
 8080906:	480c      	ldr	r0, [pc, #48]	@ (8080938 <ProcessCommand+0xf0>)
 8080908:	f002 fcc4 	bl	8083294 <HAL_UART_Transmit>
        HAL_Delay(100);
 808090c:	2064      	movs	r0, #100	@ 0x64
 808090e:	f000 faa3 	bl	8080e58 <HAL_Delay>
}
 8080912:	e00c      	b.n	808092e <ProcessCommand+0xe6>
        char *msg = "Unknown command.\r\n";
 8080914:	4b11      	ldr	r3, [pc, #68]	@ (808095c <ProcessCommand+0x114>)
 8080916:	617b      	str	r3, [r7, #20]
        HAL_UART_Transmit(&hlpuart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8080918:	6978      	ldr	r0, [r7, #20]
 808091a:	f7ff fc71 	bl	8080200 <strlen>
 808091e:	4603      	mov	r3, r0
 8080920:	b29a      	uxth	r2, r3
 8080922:	f04f 33ff 	mov.w	r3, #4294967295
 8080926:	6979      	ldr	r1, [r7, #20]
 8080928:	4803      	ldr	r0, [pc, #12]	@ (8080938 <ProcessCommand+0xf0>)
 808092a:	f002 fcb3 	bl	8083294 <HAL_UART_Transmit>
}
 808092e:	bf00      	nop
 8080930:	3718      	adds	r7, #24
 8080932:	46bd      	mov	sp, r7
 8080934:	bd80      	pop	{r7, pc}
 8080936:	bf00      	nop
 8080938:	20000048 	.word	0x20000048
 808093c:	08084810 	.word	0x08084810
 8080940:	08084864 	.word	0x08084864
 8080944:	48000400 	.word	0x48000400
 8080948:	0808486c 	.word	0x0808486c
 808094c:	08084880 	.word	0x08084880
 8080950:	08084888 	.word	0x08084888
 8080954:	0808489c 	.word	0x0808489c
 8080958:	080848a4 	.word	0x080848a4
 808095c:	080848c0 	.word	0x080848c0

08080960 <SystemClock_Config>:

void SystemClock_Config(void)
{
 8080960:	b580      	push	{r7, lr}
 8080962:	b096      	sub	sp, #88	@ 0x58
 8080964:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8080966:	f107 0314 	add.w	r3, r7, #20
 808096a:	2244      	movs	r2, #68	@ 0x44
 808096c:	2100      	movs	r1, #0
 808096e:	4618      	mov	r0, r3
 8080970:	f003 fac5 	bl	8083efe <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8080974:	463b      	mov	r3, r7
 8080976:	2200      	movs	r2, #0
 8080978:	601a      	str	r2, [r3, #0]
 808097a:	605a      	str	r2, [r3, #4]
 808097c:	609a      	str	r2, [r3, #8]
 808097e:	60da      	str	r2, [r3, #12]
 8080980:	611a      	str	r2, [r3, #16]

    if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8080982:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8080986:	f001 f8c9 	bl	8081b1c <HAL_PWREx_ControlVoltageScaling>
 808098a:	4603      	mov	r3, r0
 808098c:	2b00      	cmp	r3, #0
 808098e:	d001      	beq.n	8080994 <SystemClock_Config+0x34>
    {
        Error_Handler();
 8080990:	f000 f8d6 	bl	8080b40 <Error_Handler>
    }

    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8080994:	2302      	movs	r3, #2
 8080996:	617b      	str	r3, [r7, #20]
    RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8080998:	f44f 7380 	mov.w	r3, #256	@ 0x100
 808099c:	623b      	str	r3, [r7, #32]
    RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 808099e:	2340      	movs	r3, #64	@ 0x40
 80809a0:	627b      	str	r3, [r7, #36]	@ 0x24
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80809a2:	2302      	movs	r3, #2
 80809a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80809a6:	2302      	movs	r3, #2
 80809a8:	643b      	str	r3, [r7, #64]	@ 0x40
    RCC_OscInitStruct.PLL.PLLM = 1;
 80809aa:	2301      	movs	r3, #1
 80809ac:	647b      	str	r3, [r7, #68]	@ 0x44
    RCC_OscInitStruct.PLL.PLLN = 10;
 80809ae:	230a      	movs	r3, #10
 80809b0:	64bb      	str	r3, [r7, #72]	@ 0x48
    RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80809b2:	2302      	movs	r3, #2
 80809b4:	64fb      	str	r3, [r7, #76]	@ 0x4c
    RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80809b6:	2302      	movs	r3, #2
 80809b8:	653b      	str	r3, [r7, #80]	@ 0x50
    RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80809ba:	2302      	movs	r3, #2
 80809bc:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80809be:	f107 0314 	add.w	r3, r7, #20
 80809c2:	4618      	mov	r0, r3
 80809c4:	f001 f910 	bl	8081be8 <HAL_RCC_OscConfig>
 80809c8:	4603      	mov	r3, r0
 80809ca:	2b00      	cmp	r3, #0
 80809cc:	d001      	beq.n	80809d2 <SystemClock_Config+0x72>
    {
        Error_Handler();
 80809ce:	f000 f8b7 	bl	8080b40 <Error_Handler>
    }

    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80809d2:	230f      	movs	r3, #15
 80809d4:	603b      	str	r3, [r7, #0]
                                |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80809d6:	2303      	movs	r3, #3
 80809d8:	607b      	str	r3, [r7, #4]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80809da:	2300      	movs	r3, #0
 80809dc:	60bb      	str	r3, [r7, #8]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80809de:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80809e2:	60fb      	str	r3, [r7, #12]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80809e4:	2300      	movs	r3, #0
 80809e6:	613b      	str	r3, [r7, #16]

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80809e8:	463b      	mov	r3, r7
 80809ea:	2104      	movs	r1, #4
 80809ec:	4618      	mov	r0, r3
 80809ee:	f001 fd15 	bl	808241c <HAL_RCC_ClockConfig>
 80809f2:	4603      	mov	r3, r0
 80809f4:	2b00      	cmp	r3, #0
 80809f6:	d001      	beq.n	80809fc <SystemClock_Config+0x9c>
    {
        Error_Handler();
 80809f8:	f000 f8a2 	bl	8080b40 <Error_Handler>
    }
}
 80809fc:	bf00      	nop
 80809fe:	3758      	adds	r7, #88	@ 0x58
 8080a00:	46bd      	mov	sp, r7
 8080a02:	bd80      	pop	{r7, pc}

08080a04 <LED_Init>:

static void LED_Init(void)
{
 8080a04:	b580      	push	{r7, lr}
 8080a06:	b086      	sub	sp, #24
 8080a08:	af00      	add	r7, sp, #0
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8080a0a:	4b18      	ldr	r3, [pc, #96]	@ (8080a6c <LED_Init+0x68>)
 8080a0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8080a0e:	4a17      	ldr	r2, [pc, #92]	@ (8080a6c <LED_Init+0x68>)
 8080a10:	f043 0302 	orr.w	r3, r3, #2
 8080a14:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8080a16:	4b15      	ldr	r3, [pc, #84]	@ (8080a6c <LED_Init+0x68>)
 8080a18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8080a1a:	f003 0302 	and.w	r3, r3, #2
 8080a1e:	603b      	str	r3, [r7, #0]
 8080a20:	683b      	ldr	r3, [r7, #0]

    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8080a22:	1d3b      	adds	r3, r7, #4
 8080a24:	2200      	movs	r2, #0
 8080a26:	601a      	str	r2, [r3, #0]
 8080a28:	605a      	str	r2, [r3, #4]
 8080a2a:	609a      	str	r2, [r3, #8]
 8080a2c:	60da      	str	r2, [r3, #12]
 8080a2e:	611a      	str	r2, [r3, #16]

    GPIO_InitStruct.Pin = GPIO_PIN_14 | GPIO_PIN_7;
 8080a30:	f44f 4381 	mov.w	r3, #16512	@ 0x4080
 8080a34:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8080a36:	2301      	movs	r3, #1
 8080a38:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8080a3a:	2300      	movs	r3, #0
 8080a3c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8080a3e:	2300      	movs	r3, #0
 8080a40:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8080a42:	1d3b      	adds	r3, r7, #4
 8080a44:	4619      	mov	r1, r3
 8080a46:	480a      	ldr	r0, [pc, #40]	@ (8080a70 <LED_Init+0x6c>)
 8080a48:	f000 fe96 	bl	8081778 <HAL_GPIO_Init>

    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 8080a4c:	2200      	movs	r2, #0
 8080a4e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8080a52:	4807      	ldr	r0, [pc, #28]	@ (8080a70 <LED_Init+0x6c>)
 8080a54:	f001 f822 	bl	8081a9c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8080a58:	2200      	movs	r2, #0
 8080a5a:	2180      	movs	r1, #128	@ 0x80
 8080a5c:	4804      	ldr	r0, [pc, #16]	@ (8080a70 <LED_Init+0x6c>)
 8080a5e:	f001 f81d 	bl	8081a9c <HAL_GPIO_WritePin>
}
 8080a62:	bf00      	nop
 8080a64:	3718      	adds	r7, #24
 8080a66:	46bd      	mov	sp, r7
 8080a68:	bd80      	pop	{r7, pc}
 8080a6a:	bf00      	nop
 8080a6c:	40021000 	.word	0x40021000
 8080a70:	48000400 	.word	0x48000400

08080a74 <UART_Init>:
static void UART_Init(void)
{
 8080a74:	b580      	push	{r7, lr}
 8080a76:	b082      	sub	sp, #8
 8080a78:	af00      	add	r7, sp, #0
    hlpuart1.Instance = LPUART1;
 8080a7a:	4b2c      	ldr	r3, [pc, #176]	@ (8080b2c <UART_Init+0xb8>)
 8080a7c:	4a2c      	ldr	r2, [pc, #176]	@ (8080b30 <UART_Init+0xbc>)
 8080a7e:	601a      	str	r2, [r3, #0]
    hlpuart1.Init.BaudRate = 115200;
 8080a80:	4b2a      	ldr	r3, [pc, #168]	@ (8080b2c <UART_Init+0xb8>)
 8080a82:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8080a86:	605a      	str	r2, [r3, #4]
    hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8080a88:	4b28      	ldr	r3, [pc, #160]	@ (8080b2c <UART_Init+0xb8>)
 8080a8a:	2200      	movs	r2, #0
 8080a8c:	609a      	str	r2, [r3, #8]
    hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8080a8e:	4b27      	ldr	r3, [pc, #156]	@ (8080b2c <UART_Init+0xb8>)
 8080a90:	2200      	movs	r2, #0
 8080a92:	60da      	str	r2, [r3, #12]
    hlpuart1.Init.Parity = UART_PARITY_NONE;
 8080a94:	4b25      	ldr	r3, [pc, #148]	@ (8080b2c <UART_Init+0xb8>)
 8080a96:	2200      	movs	r2, #0
 8080a98:	611a      	str	r2, [r3, #16]
    hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8080a9a:	4b24      	ldr	r3, [pc, #144]	@ (8080b2c <UART_Init+0xb8>)
 8080a9c:	2200      	movs	r2, #0
 8080a9e:	619a      	str	r2, [r3, #24]
    hlpuart1.Init.Mode = UART_MODE_RX | UART_MODE_TX;
 8080aa0:	4b22      	ldr	r3, [pc, #136]	@ (8080b2c <UART_Init+0xb8>)
 8080aa2:	220c      	movs	r2, #12
 8080aa4:	615a      	str	r2, [r3, #20]
    hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT;
 8080aa6:	4b21      	ldr	r3, [pc, #132]	@ (8080b2c <UART_Init+0xb8>)
 8080aa8:	2210      	movs	r2, #16
 8080aaa:	625a      	str	r2, [r3, #36]	@ 0x24
    hlpuart1.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 8080aac:	4b1f      	ldr	r3, [pc, #124]	@ (8080b2c <UART_Init+0xb8>)
 8080aae:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8080ab2:	639a      	str	r2, [r3, #56]	@ 0x38

    if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8080ab4:	481d      	ldr	r0, [pc, #116]	@ (8080b2c <UART_Init+0xb8>)
 8080ab6:	f002 fb9f 	bl	80831f8 <HAL_UART_Init>
 8080aba:	4603      	mov	r3, r0
 8080abc:	2b00      	cmp	r3, #0
 8080abe:	d001      	beq.n	8080ac4 <UART_Init+0x50>
    {
        Error_Handler();
 8080ac0:	f000 f83e 	bl	8080b40 <Error_Handler>
    }

    __HAL_RCC_CRC_CLK_ENABLE();
 8080ac4:	4b1b      	ldr	r3, [pc, #108]	@ (8080b34 <UART_Init+0xc0>)
 8080ac6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8080ac8:	4a1a      	ldr	r2, [pc, #104]	@ (8080b34 <UART_Init+0xc0>)
 8080aca:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8080ace:	6493      	str	r3, [r2, #72]	@ 0x48
 8080ad0:	4b18      	ldr	r3, [pc, #96]	@ (8080b34 <UART_Init+0xc0>)
 8080ad2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8080ad4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8080ad8:	607b      	str	r3, [r7, #4]
 8080ada:	687b      	ldr	r3, [r7, #4]

    CrcHandle.Instance = CRC;
 8080adc:	4b16      	ldr	r3, [pc, #88]	@ (8080b38 <UART_Init+0xc4>)
 8080ade:	4a17      	ldr	r2, [pc, #92]	@ (8080b3c <UART_Init+0xc8>)
 8080ae0:	601a      	str	r2, [r3, #0]
    CrcHandle.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_DISABLE;
 8080ae2:	4b15      	ldr	r3, [pc, #84]	@ (8080b38 <UART_Init+0xc4>)
 8080ae4:	2201      	movs	r2, #1
 8080ae6:	711a      	strb	r2, [r3, #4]
    CrcHandle.Init.GeneratingPolynomial = 0x1021;
 8080ae8:	4b13      	ldr	r3, [pc, #76]	@ (8080b38 <UART_Init+0xc4>)
 8080aea:	f241 0221 	movw	r2, #4129	@ 0x1021
 8080aee:	609a      	str	r2, [r3, #8]
    CrcHandle.Init.CRCLength = CRC_POLYLENGTH_16B;
 8080af0:	4b11      	ldr	r3, [pc, #68]	@ (8080b38 <UART_Init+0xc4>)
 8080af2:	2208      	movs	r2, #8
 8080af4:	60da      	str	r2, [r3, #12]
    CrcHandle.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_DISABLE;
 8080af6:	4b10      	ldr	r3, [pc, #64]	@ (8080b38 <UART_Init+0xc4>)
 8080af8:	2201      	movs	r2, #1
 8080afa:	715a      	strb	r2, [r3, #5]
    CrcHandle.Init.InitValue = 0;
 8080afc:	4b0e      	ldr	r3, [pc, #56]	@ (8080b38 <UART_Init+0xc4>)
 8080afe:	2200      	movs	r2, #0
 8080b00:	611a      	str	r2, [r3, #16]
    CrcHandle.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8080b02:	4b0d      	ldr	r3, [pc, #52]	@ (8080b38 <UART_Init+0xc4>)
 8080b04:	2200      	movs	r2, #0
 8080b06:	615a      	str	r2, [r3, #20]
    CrcHandle.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8080b08:	4b0b      	ldr	r3, [pc, #44]	@ (8080b38 <UART_Init+0xc4>)
 8080b0a:	2200      	movs	r2, #0
 8080b0c:	619a      	str	r2, [r3, #24]
    CrcHandle.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8080b0e:	4b0a      	ldr	r3, [pc, #40]	@ (8080b38 <UART_Init+0xc4>)
 8080b10:	2201      	movs	r2, #1
 8080b12:	621a      	str	r2, [r3, #32]

    if (HAL_CRC_Init(&CrcHandle) != HAL_OK)
 8080b14:	4808      	ldr	r0, [pc, #32]	@ (8080b38 <UART_Init+0xc4>)
 8080b16:	f000 faa9 	bl	808106c <HAL_CRC_Init>
 8080b1a:	4603      	mov	r3, r0
 8080b1c:	2b00      	cmp	r3, #0
 8080b1e:	d001      	beq.n	8080b24 <UART_Init+0xb0>
    {
        while (1) {}
 8080b20:	bf00      	nop
 8080b22:	e7fd      	b.n	8080b20 <UART_Init+0xac>
    }
}
 8080b24:	bf00      	nop
 8080b26:	3708      	adds	r7, #8
 8080b28:	46bd      	mov	sp, r7
 8080b2a:	bd80      	pop	{r7, pc}
 8080b2c:	20000048 	.word	0x20000048
 8080b30:	40008000 	.word	0x40008000
 8080b34:	40021000 	.word	0x40021000
 8080b38:	200000d0 	.word	0x200000d0
 8080b3c:	40023000 	.word	0x40023000

08080b40 <Error_Handler>:

void Error_Handler(void)
{
 8080b40:	b480      	push	{r7}
 8080b42:	af00      	add	r7, sp, #0
    while (1)
 8080b44:	bf00      	nop
 8080b46:	e7fd      	b.n	8080b44 <Error_Handler+0x4>

08080b48 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8080b48:	b480      	push	{r7}
 8080b4a:	b083      	sub	sp, #12
 8080b4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8080b4e:	4b0f      	ldr	r3, [pc, #60]	@ (8080b8c <HAL_MspInit+0x44>)
 8080b50:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8080b52:	4a0e      	ldr	r2, [pc, #56]	@ (8080b8c <HAL_MspInit+0x44>)
 8080b54:	f043 0301 	orr.w	r3, r3, #1
 8080b58:	6613      	str	r3, [r2, #96]	@ 0x60
 8080b5a:	4b0c      	ldr	r3, [pc, #48]	@ (8080b8c <HAL_MspInit+0x44>)
 8080b5c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8080b5e:	f003 0301 	and.w	r3, r3, #1
 8080b62:	607b      	str	r3, [r7, #4]
 8080b64:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8080b66:	4b09      	ldr	r3, [pc, #36]	@ (8080b8c <HAL_MspInit+0x44>)
 8080b68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8080b6a:	4a08      	ldr	r2, [pc, #32]	@ (8080b8c <HAL_MspInit+0x44>)
 8080b6c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8080b70:	6593      	str	r3, [r2, #88]	@ 0x58
 8080b72:	4b06      	ldr	r3, [pc, #24]	@ (8080b8c <HAL_MspInit+0x44>)
 8080b74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8080b76:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8080b7a:	603b      	str	r3, [r7, #0]
 8080b7c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8080b7e:	bf00      	nop
 8080b80:	370c      	adds	r7, #12
 8080b82:	46bd      	mov	sp, r7
 8080b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8080b88:	4770      	bx	lr
 8080b8a:	bf00      	nop
 8080b8c:	40021000 	.word	0x40021000

08080b90 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8080b90:	b480      	push	{r7}
 8080b92:	b085      	sub	sp, #20
 8080b94:	af00      	add	r7, sp, #0
 8080b96:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8080b98:	687b      	ldr	r3, [r7, #4]
 8080b9a:	681b      	ldr	r3, [r3, #0]
 8080b9c:	4a0a      	ldr	r2, [pc, #40]	@ (8080bc8 <HAL_CRC_MspInit+0x38>)
 8080b9e:	4293      	cmp	r3, r2
 8080ba0:	d10b      	bne.n	8080bba <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8080ba2:	4b0a      	ldr	r3, [pc, #40]	@ (8080bcc <HAL_CRC_MspInit+0x3c>)
 8080ba4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8080ba6:	4a09      	ldr	r2, [pc, #36]	@ (8080bcc <HAL_CRC_MspInit+0x3c>)
 8080ba8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8080bac:	6493      	str	r3, [r2, #72]	@ 0x48
 8080bae:	4b07      	ldr	r3, [pc, #28]	@ (8080bcc <HAL_CRC_MspInit+0x3c>)
 8080bb0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8080bb2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8080bb6:	60fb      	str	r3, [r7, #12]
 8080bb8:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END CRC_MspInit 1 */

  }

}
 8080bba:	bf00      	nop
 8080bbc:	3714      	adds	r7, #20
 8080bbe:	46bd      	mov	sp, r7
 8080bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8080bc4:	4770      	bx	lr
 8080bc6:	bf00      	nop
 8080bc8:	40023000 	.word	0x40023000
 8080bcc:	40021000 	.word	0x40021000

08080bd0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8080bd0:	b580      	push	{r7, lr}
 8080bd2:	b0ac      	sub	sp, #176	@ 0xb0
 8080bd4:	af00      	add	r7, sp, #0
 8080bd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8080bd8:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8080bdc:	2200      	movs	r2, #0
 8080bde:	601a      	str	r2, [r3, #0]
 8080be0:	605a      	str	r2, [r3, #4]
 8080be2:	609a      	str	r2, [r3, #8]
 8080be4:	60da      	str	r2, [r3, #12]
 8080be6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8080be8:	f107 0310 	add.w	r3, r7, #16
 8080bec:	228c      	movs	r2, #140	@ 0x8c
 8080bee:	2100      	movs	r1, #0
 8080bf0:	4618      	mov	r0, r3
 8080bf2:	f003 f984 	bl	8083efe <memset>
  if(huart->Instance==LPUART1)
 8080bf6:	687b      	ldr	r3, [r7, #4]
 8080bf8:	681b      	ldr	r3, [r3, #0]
 8080bfa:	4a22      	ldr	r2, [pc, #136]	@ (8080c84 <HAL_UART_MspInit+0xb4>)
 8080bfc:	4293      	cmp	r3, r2
 8080bfe:	d13d      	bne.n	8080c7c <HAL_UART_MspInit+0xac>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8080c00:	2320      	movs	r3, #32
 8080c02:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8080c04:	2300      	movs	r3, #0
 8080c06:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8080c08:	f107 0310 	add.w	r3, r7, #16
 8080c0c:	4618      	mov	r0, r3
 8080c0e:	f001 fe29 	bl	8082864 <HAL_RCCEx_PeriphCLKConfig>
 8080c12:	4603      	mov	r3, r0
 8080c14:	2b00      	cmp	r3, #0
 8080c16:	d001      	beq.n	8080c1c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8080c18:	f7ff ff92 	bl	8080b40 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8080c1c:	4b1a      	ldr	r3, [pc, #104]	@ (8080c88 <HAL_UART_MspInit+0xb8>)
 8080c1e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8080c20:	4a19      	ldr	r2, [pc, #100]	@ (8080c88 <HAL_UART_MspInit+0xb8>)
 8080c22:	f043 0301 	orr.w	r3, r3, #1
 8080c26:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8080c28:	4b17      	ldr	r3, [pc, #92]	@ (8080c88 <HAL_UART_MspInit+0xb8>)
 8080c2a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8080c2c:	f003 0301 	and.w	r3, r3, #1
 8080c30:	60fb      	str	r3, [r7, #12]
 8080c32:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8080c34:	4b14      	ldr	r3, [pc, #80]	@ (8080c88 <HAL_UART_MspInit+0xb8>)
 8080c36:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8080c38:	4a13      	ldr	r2, [pc, #76]	@ (8080c88 <HAL_UART_MspInit+0xb8>)
 8080c3a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8080c3e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8080c40:	4b11      	ldr	r3, [pc, #68]	@ (8080c88 <HAL_UART_MspInit+0xb8>)
 8080c42:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8080c44:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8080c48:	60bb      	str	r3, [r7, #8]
 8080c4a:	68bb      	ldr	r3, [r7, #8]
    HAL_PWREx_EnableVddIO2();
 8080c4c:	f000 ffbc 	bl	8081bc8 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8080c50:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8080c54:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8080c58:	2302      	movs	r3, #2
 8080c5a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8080c5e:	2300      	movs	r3, #0
 8080c60:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8080c64:	2303      	movs	r3, #3
 8080c66:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8080c6a:	2308      	movs	r3, #8
 8080c6c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8080c70:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8080c74:	4619      	mov	r1, r3
 8080c76:	4805      	ldr	r0, [pc, #20]	@ (8080c8c <HAL_UART_MspInit+0xbc>)
 8080c78:	f000 fd7e 	bl	8081778 <HAL_GPIO_Init>

  /* USER CODE END LPUART1_MspInit 1 */

  }

}
 8080c7c:	bf00      	nop
 8080c7e:	37b0      	adds	r7, #176	@ 0xb0
 8080c80:	46bd      	mov	sp, r7
 8080c82:	bd80      	pop	{r7, pc}
 8080c84:	40008000 	.word	0x40008000
 8080c88:	40021000 	.word	0x40021000
 8080c8c:	48001800 	.word	0x48001800

08080c90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8080c90:	b480      	push	{r7}
 8080c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8080c94:	bf00      	nop
 8080c96:	e7fd      	b.n	8080c94 <NMI_Handler+0x4>

08080c98 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8080c98:	b480      	push	{r7}
 8080c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8080c9c:	bf00      	nop
 8080c9e:	e7fd      	b.n	8080c9c <HardFault_Handler+0x4>

08080ca0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8080ca0:	b480      	push	{r7}
 8080ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8080ca4:	bf00      	nop
 8080ca6:	e7fd      	b.n	8080ca4 <MemManage_Handler+0x4>

08080ca8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8080ca8:	b480      	push	{r7}
 8080caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8080cac:	bf00      	nop
 8080cae:	e7fd      	b.n	8080cac <BusFault_Handler+0x4>

08080cb0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8080cb0:	b480      	push	{r7}
 8080cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8080cb4:	bf00      	nop
 8080cb6:	e7fd      	b.n	8080cb4 <UsageFault_Handler+0x4>

08080cb8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8080cb8:	b480      	push	{r7}
 8080cba:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8080cbc:	bf00      	nop
 8080cbe:	46bd      	mov	sp, r7
 8080cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8080cc4:	4770      	bx	lr

08080cc6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8080cc6:	b480      	push	{r7}
 8080cc8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8080cca:	bf00      	nop
 8080ccc:	46bd      	mov	sp, r7
 8080cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8080cd2:	4770      	bx	lr

08080cd4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8080cd4:	b480      	push	{r7}
 8080cd6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8080cd8:	bf00      	nop
 8080cda:	46bd      	mov	sp, r7
 8080cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8080ce0:	4770      	bx	lr

08080ce2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8080ce2:	b580      	push	{r7, lr}
 8080ce4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8080ce6:	f000 f897 	bl	8080e18 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8080cea:	bf00      	nop
 8080cec:	bd80      	pop	{r7, pc}
	...

08080cf0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8080cf0:	b480      	push	{r7}
 8080cf2:	af00      	add	r7, sp, #0
#if defined(USER_VECT_TAB_ADDRESS)
  /* Configure the Vector Table location -------------------------------------*/
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
 8080cf4:	4b07      	ldr	r3, [pc, #28]	@ (8080d14 <SystemInit+0x24>)
 8080cf6:	4a08      	ldr	r2, [pc, #32]	@ (8080d18 <SystemInit+0x28>)
 8080cf8:	609a      	str	r2, [r3, #8]
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8080cfa:	4b06      	ldr	r3, [pc, #24]	@ (8080d14 <SystemInit+0x24>)
 8080cfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8080d00:	4a04      	ldr	r2, [pc, #16]	@ (8080d14 <SystemInit+0x24>)
 8080d02:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8080d06:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8080d0a:	bf00      	nop
 8080d0c:	46bd      	mov	sp, r7
 8080d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8080d12:	4770      	bx	lr
 8080d14:	e000ed00 	.word	0xe000ed00
 8080d18:	08080000 	.word	0x08080000

08080d1c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8080d1c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8080d54 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8080d20:	f7ff ffe6 	bl	8080cf0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8080d24:	480c      	ldr	r0, [pc, #48]	@ (8080d58 <LoopForever+0x6>)
  ldr r1, =_edata
 8080d26:	490d      	ldr	r1, [pc, #52]	@ (8080d5c <LoopForever+0xa>)
  ldr r2, =_sidata
 8080d28:	4a0d      	ldr	r2, [pc, #52]	@ (8080d60 <LoopForever+0xe>)
  movs r3, #0
 8080d2a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8080d2c:	e002      	b.n	8080d34 <LoopCopyDataInit>

08080d2e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8080d2e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8080d30:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8080d32:	3304      	adds	r3, #4

08080d34 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8080d34:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8080d36:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8080d38:	d3f9      	bcc.n	8080d2e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8080d3a:	4a0a      	ldr	r2, [pc, #40]	@ (8080d64 <LoopForever+0x12>)
  ldr r4, =_ebss
 8080d3c:	4c0a      	ldr	r4, [pc, #40]	@ (8080d68 <LoopForever+0x16>)
  movs r3, #0
 8080d3e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8080d40:	e001      	b.n	8080d46 <LoopFillZerobss>

08080d42 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8080d42:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8080d44:	3204      	adds	r2, #4

08080d46 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8080d46:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8080d48:	d3fb      	bcc.n	8080d42 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8080d4a:	f003 f8f1 	bl	8083f30 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8080d4e:	f7ff fbd7 	bl	8080500 <main>

08080d52 <LoopForever>:

LoopForever:
    b LoopForever
 8080d52:	e7fe      	b.n	8080d52 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8080d54:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8080d58:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8080d5c:	2000002c 	.word	0x2000002c
  ldr r2, =_sidata
 8080d60:	0808492c 	.word	0x0808492c
  ldr r2, =_sbss
 8080d64:	2000002c 	.word	0x2000002c
  ldr r4, =_ebss
 8080d68:	200000f8 	.word	0x200000f8

08080d6c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8080d6c:	e7fe      	b.n	8080d6c <ADC1_2_IRQHandler>

08080d6e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8080d6e:	b580      	push	{r7, lr}
 8080d70:	b082      	sub	sp, #8
 8080d72:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8080d74:	2300      	movs	r3, #0
 8080d76:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8080d78:	2003      	movs	r0, #3
 8080d7a:	f000 f943 	bl	8081004 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8080d7e:	2000      	movs	r0, #0
 8080d80:	f000 f80e 	bl	8080da0 <HAL_InitTick>
 8080d84:	4603      	mov	r3, r0
 8080d86:	2b00      	cmp	r3, #0
 8080d88:	d002      	beq.n	8080d90 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8080d8a:	2301      	movs	r3, #1
 8080d8c:	71fb      	strb	r3, [r7, #7]
 8080d8e:	e001      	b.n	8080d94 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8080d90:	f7ff feda 	bl	8080b48 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8080d94:	79fb      	ldrb	r3, [r7, #7]
}
 8080d96:	4618      	mov	r0, r3
 8080d98:	3708      	adds	r7, #8
 8080d9a:	46bd      	mov	sp, r7
 8080d9c:	bd80      	pop	{r7, pc}
	...

08080da0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8080da0:	b580      	push	{r7, lr}
 8080da2:	b084      	sub	sp, #16
 8080da4:	af00      	add	r7, sp, #0
 8080da6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8080da8:	2300      	movs	r3, #0
 8080daa:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8080dac:	4b17      	ldr	r3, [pc, #92]	@ (8080e0c <HAL_InitTick+0x6c>)
 8080dae:	781b      	ldrb	r3, [r3, #0]
 8080db0:	2b00      	cmp	r3, #0
 8080db2:	d023      	beq.n	8080dfc <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8080db4:	4b16      	ldr	r3, [pc, #88]	@ (8080e10 <HAL_InitTick+0x70>)
 8080db6:	681a      	ldr	r2, [r3, #0]
 8080db8:	4b14      	ldr	r3, [pc, #80]	@ (8080e0c <HAL_InitTick+0x6c>)
 8080dba:	781b      	ldrb	r3, [r3, #0]
 8080dbc:	4619      	mov	r1, r3
 8080dbe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8080dc2:	fbb3 f3f1 	udiv	r3, r3, r1
 8080dc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8080dca:	4618      	mov	r0, r3
 8080dcc:	f000 f941 	bl	8081052 <HAL_SYSTICK_Config>
 8080dd0:	4603      	mov	r3, r0
 8080dd2:	2b00      	cmp	r3, #0
 8080dd4:	d10f      	bne.n	8080df6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8080dd6:	687b      	ldr	r3, [r7, #4]
 8080dd8:	2b0f      	cmp	r3, #15
 8080dda:	d809      	bhi.n	8080df0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8080ddc:	2200      	movs	r2, #0
 8080dde:	6879      	ldr	r1, [r7, #4]
 8080de0:	f04f 30ff 	mov.w	r0, #4294967295
 8080de4:	f000 f919 	bl	808101a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8080de8:	4a0a      	ldr	r2, [pc, #40]	@ (8080e14 <HAL_InitTick+0x74>)
 8080dea:	687b      	ldr	r3, [r7, #4]
 8080dec:	6013      	str	r3, [r2, #0]
 8080dee:	e007      	b.n	8080e00 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8080df0:	2301      	movs	r3, #1
 8080df2:	73fb      	strb	r3, [r7, #15]
 8080df4:	e004      	b.n	8080e00 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8080df6:	2301      	movs	r3, #1
 8080df8:	73fb      	strb	r3, [r7, #15]
 8080dfa:	e001      	b.n	8080e00 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8080dfc:	2301      	movs	r3, #1
 8080dfe:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8080e00:	7bfb      	ldrb	r3, [r7, #15]
}
 8080e02:	4618      	mov	r0, r3
 8080e04:	3710      	adds	r7, #16
 8080e06:	46bd      	mov	sp, r7
 8080e08:	bd80      	pop	{r7, pc}
 8080e0a:	bf00      	nop
 8080e0c:	20000008 	.word	0x20000008
 8080e10:	20000000 	.word	0x20000000
 8080e14:	20000004 	.word	0x20000004

08080e18 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8080e18:	b480      	push	{r7}
 8080e1a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8080e1c:	4b06      	ldr	r3, [pc, #24]	@ (8080e38 <HAL_IncTick+0x20>)
 8080e1e:	781b      	ldrb	r3, [r3, #0]
 8080e20:	461a      	mov	r2, r3
 8080e22:	4b06      	ldr	r3, [pc, #24]	@ (8080e3c <HAL_IncTick+0x24>)
 8080e24:	681b      	ldr	r3, [r3, #0]
 8080e26:	4413      	add	r3, r2
 8080e28:	4a04      	ldr	r2, [pc, #16]	@ (8080e3c <HAL_IncTick+0x24>)
 8080e2a:	6013      	str	r3, [r2, #0]
}
 8080e2c:	bf00      	nop
 8080e2e:	46bd      	mov	sp, r7
 8080e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8080e34:	4770      	bx	lr
 8080e36:	bf00      	nop
 8080e38:	20000008 	.word	0x20000008
 8080e3c:	200000f4 	.word	0x200000f4

08080e40 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8080e40:	b480      	push	{r7}
 8080e42:	af00      	add	r7, sp, #0
  return uwTick;
 8080e44:	4b03      	ldr	r3, [pc, #12]	@ (8080e54 <HAL_GetTick+0x14>)
 8080e46:	681b      	ldr	r3, [r3, #0]
}
 8080e48:	4618      	mov	r0, r3
 8080e4a:	46bd      	mov	sp, r7
 8080e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8080e50:	4770      	bx	lr
 8080e52:	bf00      	nop
 8080e54:	200000f4 	.word	0x200000f4

08080e58 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8080e58:	b580      	push	{r7, lr}
 8080e5a:	b084      	sub	sp, #16
 8080e5c:	af00      	add	r7, sp, #0
 8080e5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8080e60:	f7ff ffee 	bl	8080e40 <HAL_GetTick>
 8080e64:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8080e66:	687b      	ldr	r3, [r7, #4]
 8080e68:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8080e6a:	68fb      	ldr	r3, [r7, #12]
 8080e6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8080e70:	d005      	beq.n	8080e7e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8080e72:	4b0a      	ldr	r3, [pc, #40]	@ (8080e9c <HAL_Delay+0x44>)
 8080e74:	781b      	ldrb	r3, [r3, #0]
 8080e76:	461a      	mov	r2, r3
 8080e78:	68fb      	ldr	r3, [r7, #12]
 8080e7a:	4413      	add	r3, r2
 8080e7c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8080e7e:	bf00      	nop
 8080e80:	f7ff ffde 	bl	8080e40 <HAL_GetTick>
 8080e84:	4602      	mov	r2, r0
 8080e86:	68bb      	ldr	r3, [r7, #8]
 8080e88:	1ad3      	subs	r3, r2, r3
 8080e8a:	68fa      	ldr	r2, [r7, #12]
 8080e8c:	429a      	cmp	r2, r3
 8080e8e:	d8f7      	bhi.n	8080e80 <HAL_Delay+0x28>
  {
  }
}
 8080e90:	bf00      	nop
 8080e92:	bf00      	nop
 8080e94:	3710      	adds	r7, #16
 8080e96:	46bd      	mov	sp, r7
 8080e98:	bd80      	pop	{r7, pc}
 8080e9a:	bf00      	nop
 8080e9c:	20000008 	.word	0x20000008

08080ea0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8080ea0:	b480      	push	{r7}
 8080ea2:	b085      	sub	sp, #20
 8080ea4:	af00      	add	r7, sp, #0
 8080ea6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8080ea8:	687b      	ldr	r3, [r7, #4]
 8080eaa:	f003 0307 	and.w	r3, r3, #7
 8080eae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8080eb0:	4b0c      	ldr	r3, [pc, #48]	@ (8080ee4 <__NVIC_SetPriorityGrouping+0x44>)
 8080eb2:	68db      	ldr	r3, [r3, #12]
 8080eb4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8080eb6:	68ba      	ldr	r2, [r7, #8]
 8080eb8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8080ebc:	4013      	ands	r3, r2
 8080ebe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8080ec0:	68fb      	ldr	r3, [r7, #12]
 8080ec2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8080ec4:	68bb      	ldr	r3, [r7, #8]
 8080ec6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8080ec8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8080ecc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8080ed0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8080ed2:	4a04      	ldr	r2, [pc, #16]	@ (8080ee4 <__NVIC_SetPriorityGrouping+0x44>)
 8080ed4:	68bb      	ldr	r3, [r7, #8]
 8080ed6:	60d3      	str	r3, [r2, #12]
}
 8080ed8:	bf00      	nop
 8080eda:	3714      	adds	r7, #20
 8080edc:	46bd      	mov	sp, r7
 8080ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8080ee2:	4770      	bx	lr
 8080ee4:	e000ed00 	.word	0xe000ed00

08080ee8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8080ee8:	b480      	push	{r7}
 8080eea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8080eec:	4b04      	ldr	r3, [pc, #16]	@ (8080f00 <__NVIC_GetPriorityGrouping+0x18>)
 8080eee:	68db      	ldr	r3, [r3, #12]
 8080ef0:	0a1b      	lsrs	r3, r3, #8
 8080ef2:	f003 0307 	and.w	r3, r3, #7
}
 8080ef6:	4618      	mov	r0, r3
 8080ef8:	46bd      	mov	sp, r7
 8080efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8080efe:	4770      	bx	lr
 8080f00:	e000ed00 	.word	0xe000ed00

08080f04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8080f04:	b480      	push	{r7}
 8080f06:	b083      	sub	sp, #12
 8080f08:	af00      	add	r7, sp, #0
 8080f0a:	4603      	mov	r3, r0
 8080f0c:	6039      	str	r1, [r7, #0]
 8080f0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8080f10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8080f14:	2b00      	cmp	r3, #0
 8080f16:	db0a      	blt.n	8080f2e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8080f18:	683b      	ldr	r3, [r7, #0]
 8080f1a:	b2da      	uxtb	r2, r3
 8080f1c:	490c      	ldr	r1, [pc, #48]	@ (8080f50 <__NVIC_SetPriority+0x4c>)
 8080f1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8080f22:	0112      	lsls	r2, r2, #4
 8080f24:	b2d2      	uxtb	r2, r2
 8080f26:	440b      	add	r3, r1
 8080f28:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8080f2c:	e00a      	b.n	8080f44 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8080f2e:	683b      	ldr	r3, [r7, #0]
 8080f30:	b2da      	uxtb	r2, r3
 8080f32:	4908      	ldr	r1, [pc, #32]	@ (8080f54 <__NVIC_SetPriority+0x50>)
 8080f34:	79fb      	ldrb	r3, [r7, #7]
 8080f36:	f003 030f 	and.w	r3, r3, #15
 8080f3a:	3b04      	subs	r3, #4
 8080f3c:	0112      	lsls	r2, r2, #4
 8080f3e:	b2d2      	uxtb	r2, r2
 8080f40:	440b      	add	r3, r1
 8080f42:	761a      	strb	r2, [r3, #24]
}
 8080f44:	bf00      	nop
 8080f46:	370c      	adds	r7, #12
 8080f48:	46bd      	mov	sp, r7
 8080f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8080f4e:	4770      	bx	lr
 8080f50:	e000e100 	.word	0xe000e100
 8080f54:	e000ed00 	.word	0xe000ed00

08080f58 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8080f58:	b480      	push	{r7}
 8080f5a:	b089      	sub	sp, #36	@ 0x24
 8080f5c:	af00      	add	r7, sp, #0
 8080f5e:	60f8      	str	r0, [r7, #12]
 8080f60:	60b9      	str	r1, [r7, #8]
 8080f62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8080f64:	68fb      	ldr	r3, [r7, #12]
 8080f66:	f003 0307 	and.w	r3, r3, #7
 8080f6a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8080f6c:	69fb      	ldr	r3, [r7, #28]
 8080f6e:	f1c3 0307 	rsb	r3, r3, #7
 8080f72:	2b04      	cmp	r3, #4
 8080f74:	bf28      	it	cs
 8080f76:	2304      	movcs	r3, #4
 8080f78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8080f7a:	69fb      	ldr	r3, [r7, #28]
 8080f7c:	3304      	adds	r3, #4
 8080f7e:	2b06      	cmp	r3, #6
 8080f80:	d902      	bls.n	8080f88 <NVIC_EncodePriority+0x30>
 8080f82:	69fb      	ldr	r3, [r7, #28]
 8080f84:	3b03      	subs	r3, #3
 8080f86:	e000      	b.n	8080f8a <NVIC_EncodePriority+0x32>
 8080f88:	2300      	movs	r3, #0
 8080f8a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8080f8c:	f04f 32ff 	mov.w	r2, #4294967295
 8080f90:	69bb      	ldr	r3, [r7, #24]
 8080f92:	fa02 f303 	lsl.w	r3, r2, r3
 8080f96:	43da      	mvns	r2, r3
 8080f98:	68bb      	ldr	r3, [r7, #8]
 8080f9a:	401a      	ands	r2, r3
 8080f9c:	697b      	ldr	r3, [r7, #20]
 8080f9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8080fa0:	f04f 31ff 	mov.w	r1, #4294967295
 8080fa4:	697b      	ldr	r3, [r7, #20]
 8080fa6:	fa01 f303 	lsl.w	r3, r1, r3
 8080faa:	43d9      	mvns	r1, r3
 8080fac:	687b      	ldr	r3, [r7, #4]
 8080fae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8080fb0:	4313      	orrs	r3, r2
         );
}
 8080fb2:	4618      	mov	r0, r3
 8080fb4:	3724      	adds	r7, #36	@ 0x24
 8080fb6:	46bd      	mov	sp, r7
 8080fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8080fbc:	4770      	bx	lr
	...

08080fc0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8080fc0:	b580      	push	{r7, lr}
 8080fc2:	b082      	sub	sp, #8
 8080fc4:	af00      	add	r7, sp, #0
 8080fc6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8080fc8:	687b      	ldr	r3, [r7, #4]
 8080fca:	3b01      	subs	r3, #1
 8080fcc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8080fd0:	d301      	bcc.n	8080fd6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8080fd2:	2301      	movs	r3, #1
 8080fd4:	e00f      	b.n	8080ff6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8080fd6:	4a0a      	ldr	r2, [pc, #40]	@ (8081000 <SysTick_Config+0x40>)
 8080fd8:	687b      	ldr	r3, [r7, #4]
 8080fda:	3b01      	subs	r3, #1
 8080fdc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8080fde:	210f      	movs	r1, #15
 8080fe0:	f04f 30ff 	mov.w	r0, #4294967295
 8080fe4:	f7ff ff8e 	bl	8080f04 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8080fe8:	4b05      	ldr	r3, [pc, #20]	@ (8081000 <SysTick_Config+0x40>)
 8080fea:	2200      	movs	r2, #0
 8080fec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8080fee:	4b04      	ldr	r3, [pc, #16]	@ (8081000 <SysTick_Config+0x40>)
 8080ff0:	2207      	movs	r2, #7
 8080ff2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8080ff4:	2300      	movs	r3, #0
}
 8080ff6:	4618      	mov	r0, r3
 8080ff8:	3708      	adds	r7, #8
 8080ffa:	46bd      	mov	sp, r7
 8080ffc:	bd80      	pop	{r7, pc}
 8080ffe:	bf00      	nop
 8081000:	e000e010 	.word	0xe000e010

08081004 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8081004:	b580      	push	{r7, lr}
 8081006:	b082      	sub	sp, #8
 8081008:	af00      	add	r7, sp, #0
 808100a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 808100c:	6878      	ldr	r0, [r7, #4]
 808100e:	f7ff ff47 	bl	8080ea0 <__NVIC_SetPriorityGrouping>
}
 8081012:	bf00      	nop
 8081014:	3708      	adds	r7, #8
 8081016:	46bd      	mov	sp, r7
 8081018:	bd80      	pop	{r7, pc}

0808101a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 808101a:	b580      	push	{r7, lr}
 808101c:	b086      	sub	sp, #24
 808101e:	af00      	add	r7, sp, #0
 8081020:	4603      	mov	r3, r0
 8081022:	60b9      	str	r1, [r7, #8]
 8081024:	607a      	str	r2, [r7, #4]
 8081026:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8081028:	2300      	movs	r3, #0
 808102a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 808102c:	f7ff ff5c 	bl	8080ee8 <__NVIC_GetPriorityGrouping>
 8081030:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8081032:	687a      	ldr	r2, [r7, #4]
 8081034:	68b9      	ldr	r1, [r7, #8]
 8081036:	6978      	ldr	r0, [r7, #20]
 8081038:	f7ff ff8e 	bl	8080f58 <NVIC_EncodePriority>
 808103c:	4602      	mov	r2, r0
 808103e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8081042:	4611      	mov	r1, r2
 8081044:	4618      	mov	r0, r3
 8081046:	f7ff ff5d 	bl	8080f04 <__NVIC_SetPriority>
}
 808104a:	bf00      	nop
 808104c:	3718      	adds	r7, #24
 808104e:	46bd      	mov	sp, r7
 8081050:	bd80      	pop	{r7, pc}

08081052 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8081052:	b580      	push	{r7, lr}
 8081054:	b082      	sub	sp, #8
 8081056:	af00      	add	r7, sp, #0
 8081058:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 808105a:	6878      	ldr	r0, [r7, #4]
 808105c:	f7ff ffb0 	bl	8080fc0 <SysTick_Config>
 8081060:	4603      	mov	r3, r0
}
 8081062:	4618      	mov	r0, r3
 8081064:	3708      	adds	r7, #8
 8081066:	46bd      	mov	sp, r7
 8081068:	bd80      	pop	{r7, pc}
	...

0808106c <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 808106c:	b580      	push	{r7, lr}
 808106e:	b082      	sub	sp, #8
 8081070:	af00      	add	r7, sp, #0
 8081072:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8081074:	687b      	ldr	r3, [r7, #4]
 8081076:	2b00      	cmp	r3, #0
 8081078:	d101      	bne.n	808107e <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 808107a:	2301      	movs	r3, #1
 808107c:	e054      	b.n	8081128 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 808107e:	687b      	ldr	r3, [r7, #4]
 8081080:	7f5b      	ldrb	r3, [r3, #29]
 8081082:	b2db      	uxtb	r3, r3
 8081084:	2b00      	cmp	r3, #0
 8081086:	d105      	bne.n	8081094 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8081088:	687b      	ldr	r3, [r7, #4]
 808108a:	2200      	movs	r2, #0
 808108c:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 808108e:	6878      	ldr	r0, [r7, #4]
 8081090:	f7ff fd7e 	bl	8080b90 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8081094:	687b      	ldr	r3, [r7, #4]
 8081096:	2202      	movs	r2, #2
 8081098:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 808109a:	687b      	ldr	r3, [r7, #4]
 808109c:	791b      	ldrb	r3, [r3, #4]
 808109e:	2b00      	cmp	r3, #0
 80810a0:	d10c      	bne.n	80810bc <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 80810a2:	687b      	ldr	r3, [r7, #4]
 80810a4:	681b      	ldr	r3, [r3, #0]
 80810a6:	4a22      	ldr	r2, [pc, #136]	@ (8081130 <HAL_CRC_Init+0xc4>)
 80810a8:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 80810aa:	687b      	ldr	r3, [r7, #4]
 80810ac:	681b      	ldr	r3, [r3, #0]
 80810ae:	689a      	ldr	r2, [r3, #8]
 80810b0:	687b      	ldr	r3, [r7, #4]
 80810b2:	681b      	ldr	r3, [r3, #0]
 80810b4:	f022 0218 	bic.w	r2, r2, #24
 80810b8:	609a      	str	r2, [r3, #8]
 80810ba:	e00c      	b.n	80810d6 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 80810bc:	687b      	ldr	r3, [r7, #4]
 80810be:	6899      	ldr	r1, [r3, #8]
 80810c0:	687b      	ldr	r3, [r7, #4]
 80810c2:	68db      	ldr	r3, [r3, #12]
 80810c4:	461a      	mov	r2, r3
 80810c6:	6878      	ldr	r0, [r7, #4]
 80810c8:	f000 f834 	bl	8081134 <HAL_CRCEx_Polynomial_Set>
 80810cc:	4603      	mov	r3, r0
 80810ce:	2b00      	cmp	r3, #0
 80810d0:	d001      	beq.n	80810d6 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 80810d2:	2301      	movs	r3, #1
 80810d4:	e028      	b.n	8081128 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 80810d6:	687b      	ldr	r3, [r7, #4]
 80810d8:	795b      	ldrb	r3, [r3, #5]
 80810da:	2b00      	cmp	r3, #0
 80810dc:	d105      	bne.n	80810ea <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 80810de:	687b      	ldr	r3, [r7, #4]
 80810e0:	681b      	ldr	r3, [r3, #0]
 80810e2:	f04f 32ff 	mov.w	r2, #4294967295
 80810e6:	611a      	str	r2, [r3, #16]
 80810e8:	e004      	b.n	80810f4 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80810ea:	687b      	ldr	r3, [r7, #4]
 80810ec:	681b      	ldr	r3, [r3, #0]
 80810ee:	687a      	ldr	r2, [r7, #4]
 80810f0:	6912      	ldr	r2, [r2, #16]
 80810f2:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 80810f4:	687b      	ldr	r3, [r7, #4]
 80810f6:	681b      	ldr	r3, [r3, #0]
 80810f8:	689b      	ldr	r3, [r3, #8]
 80810fa:	f023 0160 	bic.w	r1, r3, #96	@ 0x60
 80810fe:	687b      	ldr	r3, [r7, #4]
 8081100:	695a      	ldr	r2, [r3, #20]
 8081102:	687b      	ldr	r3, [r7, #4]
 8081104:	681b      	ldr	r3, [r3, #0]
 8081106:	430a      	orrs	r2, r1
 8081108:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 808110a:	687b      	ldr	r3, [r7, #4]
 808110c:	681b      	ldr	r3, [r3, #0]
 808110e:	689b      	ldr	r3, [r3, #8]
 8081110:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 8081114:	687b      	ldr	r3, [r7, #4]
 8081116:	699a      	ldr	r2, [r3, #24]
 8081118:	687b      	ldr	r3, [r7, #4]
 808111a:	681b      	ldr	r3, [r3, #0]
 808111c:	430a      	orrs	r2, r1
 808111e:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8081120:	687b      	ldr	r3, [r7, #4]
 8081122:	2201      	movs	r2, #1
 8081124:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8081126:	2300      	movs	r3, #0
}
 8081128:	4618      	mov	r0, r3
 808112a:	3708      	adds	r7, #8
 808112c:	46bd      	mov	sp, r7
 808112e:	bd80      	pop	{r7, pc}
 8081130:	04c11db7 	.word	0x04c11db7

08081134 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8081134:	b480      	push	{r7}
 8081136:	b087      	sub	sp, #28
 8081138:	af00      	add	r7, sp, #0
 808113a:	60f8      	str	r0, [r7, #12]
 808113c:	60b9      	str	r1, [r7, #8]
 808113e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8081140:	2300      	movs	r3, #0
 8081142:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8081144:	231f      	movs	r3, #31
 8081146:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 8081148:	68bb      	ldr	r3, [r7, #8]
 808114a:	f003 0301 	and.w	r3, r3, #1
 808114e:	2b00      	cmp	r3, #0
 8081150:	d102      	bne.n	8081158 <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 8081152:	2301      	movs	r3, #1
 8081154:	75fb      	strb	r3, [r7, #23]
 8081156:	e063      	b.n	8081220 <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8081158:	bf00      	nop
 808115a:	693b      	ldr	r3, [r7, #16]
 808115c:	1e5a      	subs	r2, r3, #1
 808115e:	613a      	str	r2, [r7, #16]
 8081160:	2b00      	cmp	r3, #0
 8081162:	d009      	beq.n	8081178 <HAL_CRCEx_Polynomial_Set+0x44>
 8081164:	693b      	ldr	r3, [r7, #16]
 8081166:	f003 031f 	and.w	r3, r3, #31
 808116a:	68ba      	ldr	r2, [r7, #8]
 808116c:	fa22 f303 	lsr.w	r3, r2, r3
 8081170:	f003 0301 	and.w	r3, r3, #1
 8081174:	2b00      	cmp	r3, #0
 8081176:	d0f0      	beq.n	808115a <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 8081178:	687b      	ldr	r3, [r7, #4]
 808117a:	2b18      	cmp	r3, #24
 808117c:	d846      	bhi.n	808120c <HAL_CRCEx_Polynomial_Set+0xd8>
 808117e:	a201      	add	r2, pc, #4	@ (adr r2, 8081184 <HAL_CRCEx_Polynomial_Set+0x50>)
 8081180:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8081184:	08081213 	.word	0x08081213
 8081188:	0808120d 	.word	0x0808120d
 808118c:	0808120d 	.word	0x0808120d
 8081190:	0808120d 	.word	0x0808120d
 8081194:	0808120d 	.word	0x0808120d
 8081198:	0808120d 	.word	0x0808120d
 808119c:	0808120d 	.word	0x0808120d
 80811a0:	0808120d 	.word	0x0808120d
 80811a4:	08081201 	.word	0x08081201
 80811a8:	0808120d 	.word	0x0808120d
 80811ac:	0808120d 	.word	0x0808120d
 80811b0:	0808120d 	.word	0x0808120d
 80811b4:	0808120d 	.word	0x0808120d
 80811b8:	0808120d 	.word	0x0808120d
 80811bc:	0808120d 	.word	0x0808120d
 80811c0:	0808120d 	.word	0x0808120d
 80811c4:	080811f5 	.word	0x080811f5
 80811c8:	0808120d 	.word	0x0808120d
 80811cc:	0808120d 	.word	0x0808120d
 80811d0:	0808120d 	.word	0x0808120d
 80811d4:	0808120d 	.word	0x0808120d
 80811d8:	0808120d 	.word	0x0808120d
 80811dc:	0808120d 	.word	0x0808120d
 80811e0:	0808120d 	.word	0x0808120d
 80811e4:	080811e9 	.word	0x080811e9
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 80811e8:	693b      	ldr	r3, [r7, #16]
 80811ea:	2b06      	cmp	r3, #6
 80811ec:	d913      	bls.n	8081216 <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 80811ee:	2301      	movs	r3, #1
 80811f0:	75fb      	strb	r3, [r7, #23]
        }
        break;
 80811f2:	e010      	b.n	8081216 <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 80811f4:	693b      	ldr	r3, [r7, #16]
 80811f6:	2b07      	cmp	r3, #7
 80811f8:	d90f      	bls.n	808121a <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 80811fa:	2301      	movs	r3, #1
 80811fc:	75fb      	strb	r3, [r7, #23]
        }
        break;
 80811fe:	e00c      	b.n	808121a <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 8081200:	693b      	ldr	r3, [r7, #16]
 8081202:	2b0f      	cmp	r3, #15
 8081204:	d90b      	bls.n	808121e <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 8081206:	2301      	movs	r3, #1
 8081208:	75fb      	strb	r3, [r7, #23]
        }
        break;
 808120a:	e008      	b.n	808121e <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 808120c:	2301      	movs	r3, #1
 808120e:	75fb      	strb	r3, [r7, #23]
        break;
 8081210:	e006      	b.n	8081220 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8081212:	bf00      	nop
 8081214:	e004      	b.n	8081220 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8081216:	bf00      	nop
 8081218:	e002      	b.n	8081220 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 808121a:	bf00      	nop
 808121c:	e000      	b.n	8081220 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 808121e:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 8081220:	7dfb      	ldrb	r3, [r7, #23]
 8081222:	2b00      	cmp	r3, #0
 8081224:	d10d      	bne.n	8081242 <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8081226:	68fb      	ldr	r3, [r7, #12]
 8081228:	681b      	ldr	r3, [r3, #0]
 808122a:	68ba      	ldr	r2, [r7, #8]
 808122c:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 808122e:	68fb      	ldr	r3, [r7, #12]
 8081230:	681b      	ldr	r3, [r3, #0]
 8081232:	689b      	ldr	r3, [r3, #8]
 8081234:	f023 0118 	bic.w	r1, r3, #24
 8081238:	68fb      	ldr	r3, [r7, #12]
 808123a:	681b      	ldr	r3, [r3, #0]
 808123c:	687a      	ldr	r2, [r7, #4]
 808123e:	430a      	orrs	r2, r1
 8081240:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8081242:	7dfb      	ldrb	r3, [r7, #23]
}
 8081244:	4618      	mov	r0, r3
 8081246:	371c      	adds	r7, #28
 8081248:	46bd      	mov	sp, r7
 808124a:	f85d 7b04 	ldr.w	r7, [sp], #4
 808124e:	4770      	bx	lr

08081250 <HAL_FLASH_Program>:
  *                are stored the data for the row fast program
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8081250:	b580      	push	{r7, lr}
 8081252:	b086      	sub	sp, #24
 8081254:	af00      	add	r7, sp, #0
 8081256:	60f8      	str	r0, [r7, #12]
 8081258:	60b9      	str	r1, [r7, #8]
 808125a:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status;
  uint32_t prog_bit = 0;
 808125e:	2300      	movs	r3, #0
 8081260:	613b      	str	r3, [r7, #16]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8081262:	4b2f      	ldr	r3, [pc, #188]	@ (8081320 <HAL_FLASH_Program+0xd0>)
 8081264:	781b      	ldrb	r3, [r3, #0]
 8081266:	2b01      	cmp	r3, #1
 8081268:	d101      	bne.n	808126e <HAL_FLASH_Program+0x1e>
 808126a:	2302      	movs	r3, #2
 808126c:	e053      	b.n	8081316 <HAL_FLASH_Program+0xc6>
 808126e:	4b2c      	ldr	r3, [pc, #176]	@ (8081320 <HAL_FLASH_Program+0xd0>)
 8081270:	2201      	movs	r2, #1
 8081272:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8081274:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8081278:	f000 f888 	bl	808138c <FLASH_WaitForLastOperation>
 808127c:	4603      	mov	r3, r0
 808127e:	75fb      	strb	r3, [r7, #23]

  if(status == HAL_OK)
 8081280:	7dfb      	ldrb	r3, [r7, #23]
 8081282:	2b00      	cmp	r3, #0
 8081284:	d143      	bne.n	808130e <HAL_FLASH_Program+0xbe>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8081286:	4b26      	ldr	r3, [pc, #152]	@ (8081320 <HAL_FLASH_Program+0xd0>)
 8081288:	2200      	movs	r2, #0
 808128a:	605a      	str	r2, [r3, #4]

    /* Deactivate the data cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 808128c:	4b25      	ldr	r3, [pc, #148]	@ (8081324 <HAL_FLASH_Program+0xd4>)
 808128e:	681b      	ldr	r3, [r3, #0]
 8081290:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8081294:	2b00      	cmp	r3, #0
 8081296:	d009      	beq.n	80812ac <HAL_FLASH_Program+0x5c>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 8081298:	4b22      	ldr	r3, [pc, #136]	@ (8081324 <HAL_FLASH_Program+0xd4>)
 808129a:	681b      	ldr	r3, [r3, #0]
 808129c:	4a21      	ldr	r2, [pc, #132]	@ (8081324 <HAL_FLASH_Program+0xd4>)
 808129e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80812a2:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 80812a4:	4b1e      	ldr	r3, [pc, #120]	@ (8081320 <HAL_FLASH_Program+0xd0>)
 80812a6:	2202      	movs	r2, #2
 80812a8:	771a      	strb	r2, [r3, #28]
 80812aa:	e002      	b.n	80812b2 <HAL_FLASH_Program+0x62>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 80812ac:	4b1c      	ldr	r3, [pc, #112]	@ (8081320 <HAL_FLASH_Program+0xd0>)
 80812ae:	2200      	movs	r2, #0
 80812b0:	771a      	strb	r2, [r3, #28]
    }

    if(TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 80812b2:	68fb      	ldr	r3, [r7, #12]
 80812b4:	2b00      	cmp	r3, #0
 80812b6:	d107      	bne.n	80812c8 <HAL_FLASH_Program+0x78>
    {
      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 80812b8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80812bc:	68b8      	ldr	r0, [r7, #8]
 80812be:	f000 f8bb 	bl	8081438 <FLASH_Program_DoubleWord>
      prog_bit = FLASH_CR_PG;
 80812c2:	2301      	movs	r3, #1
 80812c4:	613b      	str	r3, [r7, #16]
 80812c6:	e010      	b.n	80812ea <HAL_FLASH_Program+0x9a>
    }
    else if((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST))
 80812c8:	68fb      	ldr	r3, [r7, #12]
 80812ca:	2b01      	cmp	r3, #1
 80812cc:	d002      	beq.n	80812d4 <HAL_FLASH_Program+0x84>
 80812ce:	68fb      	ldr	r3, [r7, #12]
 80812d0:	2b02      	cmp	r3, #2
 80812d2:	d10a      	bne.n	80812ea <HAL_FLASH_Program+0x9a>
    {
      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 80812d4:	683b      	ldr	r3, [r7, #0]
 80812d6:	4619      	mov	r1, r3
 80812d8:	68b8      	ldr	r0, [r7, #8]
 80812da:	f000 f8d3 	bl	8081484 <FLASH_Program_Fast>

      /* If it is the last row, the bit will be cleared at the end of the operation */
      if(TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST)
 80812de:	68fb      	ldr	r3, [r7, #12]
 80812e0:	2b02      	cmp	r3, #2
 80812e2:	d102      	bne.n	80812ea <HAL_FLASH_Program+0x9a>
      {
        prog_bit = FLASH_CR_FSTPG;
 80812e4:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80812e8:	613b      	str	r3, [r7, #16]
    {
      /* Nothing to do */
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80812ea:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80812ee:	f000 f84d 	bl	808138c <FLASH_WaitForLastOperation>
 80812f2:	4603      	mov	r3, r0
 80812f4:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    if (prog_bit != 0U)
 80812f6:	693b      	ldr	r3, [r7, #16]
 80812f8:	2b00      	cmp	r3, #0
 80812fa:	d006      	beq.n	808130a <HAL_FLASH_Program+0xba>
    {
      CLEAR_BIT(FLASH->CR, prog_bit);
 80812fc:	4b09      	ldr	r3, [pc, #36]	@ (8081324 <HAL_FLASH_Program+0xd4>)
 80812fe:	695a      	ldr	r2, [r3, #20]
 8081300:	693b      	ldr	r3, [r7, #16]
 8081302:	43db      	mvns	r3, r3
 8081304:	4907      	ldr	r1, [pc, #28]	@ (8081324 <HAL_FLASH_Program+0xd4>)
 8081306:	4013      	ands	r3, r2
 8081308:	614b      	str	r3, [r1, #20]
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 808130a:	f000 f9eb 	bl	80816e4 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 808130e:	4b04      	ldr	r3, [pc, #16]	@ (8081320 <HAL_FLASH_Program+0xd0>)
 8081310:	2200      	movs	r2, #0
 8081312:	701a      	strb	r2, [r3, #0]

  return status;
 8081314:	7dfb      	ldrb	r3, [r7, #23]
}
 8081316:	4618      	mov	r0, r3
 8081318:	3718      	adds	r7, #24
 808131a:	46bd      	mov	sp, r7
 808131c:	bd80      	pop	{r7, pc}
 808131e:	bf00      	nop
 8081320:	2000000c 	.word	0x2000000c
 8081324:	40022000 	.word	0x40022000

08081328 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8081328:	b480      	push	{r7}
 808132a:	b083      	sub	sp, #12
 808132c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 808132e:	2300      	movs	r3, #0
 8081330:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8081332:	4b0b      	ldr	r3, [pc, #44]	@ (8081360 <HAL_FLASH_Unlock+0x38>)
 8081334:	695b      	ldr	r3, [r3, #20]
 8081336:	2b00      	cmp	r3, #0
 8081338:	da0b      	bge.n	8081352 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 808133a:	4b09      	ldr	r3, [pc, #36]	@ (8081360 <HAL_FLASH_Unlock+0x38>)
 808133c:	4a09      	ldr	r2, [pc, #36]	@ (8081364 <HAL_FLASH_Unlock+0x3c>)
 808133e:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8081340:	4b07      	ldr	r3, [pc, #28]	@ (8081360 <HAL_FLASH_Unlock+0x38>)
 8081342:	4a09      	ldr	r2, [pc, #36]	@ (8081368 <HAL_FLASH_Unlock+0x40>)
 8081344:	609a      	str	r2, [r3, #8]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8081346:	4b06      	ldr	r3, [pc, #24]	@ (8081360 <HAL_FLASH_Unlock+0x38>)
 8081348:	695b      	ldr	r3, [r3, #20]
 808134a:	2b00      	cmp	r3, #0
 808134c:	da01      	bge.n	8081352 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 808134e:	2301      	movs	r3, #1
 8081350:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8081352:	79fb      	ldrb	r3, [r7, #7]
}
 8081354:	4618      	mov	r0, r3
 8081356:	370c      	adds	r7, #12
 8081358:	46bd      	mov	sp, r7
 808135a:	f85d 7b04 	ldr.w	r7, [sp], #4
 808135e:	4770      	bx	lr
 8081360:	40022000 	.word	0x40022000
 8081364:	45670123 	.word	0x45670123
 8081368:	cdef89ab 	.word	0xcdef89ab

0808136c <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 808136c:	b480      	push	{r7}
 808136e:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8081370:	4b05      	ldr	r3, [pc, #20]	@ (8081388 <HAL_FLASH_Lock+0x1c>)
 8081372:	695b      	ldr	r3, [r3, #20]
 8081374:	4a04      	ldr	r2, [pc, #16]	@ (8081388 <HAL_FLASH_Lock+0x1c>)
 8081376:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 808137a:	6153      	str	r3, [r2, #20]

  return HAL_OK;
 808137c:	2300      	movs	r3, #0
}
 808137e:	4618      	mov	r0, r3
 8081380:	46bd      	mov	sp, r7
 8081382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8081386:	4770      	bx	lr
 8081388:	40022000 	.word	0x40022000

0808138c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 808138c:	b580      	push	{r7, lr}
 808138e:	b084      	sub	sp, #16
 8081390:	af00      	add	r7, sp, #0
 8081392:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */

  uint32_t tickstart = HAL_GetTick();
 8081394:	f7ff fd54 	bl	8080e40 <HAL_GetTick>
 8081398:	60f8      	str	r0, [r7, #12]
  uint32_t error;

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 808139a:	e00d      	b.n	80813b8 <FLASH_WaitForLastOperation+0x2c>
  {
    if(Timeout != HAL_MAX_DELAY)
 808139c:	687b      	ldr	r3, [r7, #4]
 808139e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80813a2:	d009      	beq.n	80813b8 <FLASH_WaitForLastOperation+0x2c>
    {
      if((HAL_GetTick() - tickstart) >= Timeout)
 80813a4:	f7ff fd4c 	bl	8080e40 <HAL_GetTick>
 80813a8:	4602      	mov	r2, r0
 80813aa:	68fb      	ldr	r3, [r7, #12]
 80813ac:	1ad3      	subs	r3, r2, r3
 80813ae:	687a      	ldr	r2, [r7, #4]
 80813b0:	429a      	cmp	r2, r3
 80813b2:	d801      	bhi.n	80813b8 <FLASH_WaitForLastOperation+0x2c>
      {
        return HAL_TIMEOUT;
 80813b4:	2303      	movs	r3, #3
 80813b6:	e036      	b.n	8081426 <FLASH_WaitForLastOperation+0x9a>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 80813b8:	4b1d      	ldr	r3, [pc, #116]	@ (8081430 <FLASH_WaitForLastOperation+0xa4>)
 80813ba:	691b      	ldr	r3, [r3, #16]
 80813bc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80813c0:	2b00      	cmp	r3, #0
 80813c2:	d1eb      	bne.n	808139c <FLASH_WaitForLastOperation+0x10>
      }
    }
  }

  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 80813c4:	4b1a      	ldr	r3, [pc, #104]	@ (8081430 <FLASH_WaitForLastOperation+0xa4>)
 80813c6:	691a      	ldr	r2, [r3, #16]
 80813c8:	f24c 33fa 	movw	r3, #50170	@ 0xc3fa
 80813cc:	4013      	ands	r3, r2
 80813ce:	60bb      	str	r3, [r7, #8]

  if(error != 0u)
 80813d0:	68bb      	ldr	r3, [r7, #8]
 80813d2:	2b00      	cmp	r3, #0
 80813d4:	d01d      	beq.n	8081412 <FLASH_WaitForLastOperation+0x86>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= error;
 80813d6:	4b17      	ldr	r3, [pc, #92]	@ (8081434 <FLASH_WaitForLastOperation+0xa8>)
 80813d8:	685a      	ldr	r2, [r3, #4]
 80813da:	68bb      	ldr	r3, [r7, #8]
 80813dc:	4313      	orrs	r3, r2
 80813de:	4a15      	ldr	r2, [pc, #84]	@ (8081434 <FLASH_WaitForLastOperation+0xa8>)
 80813e0:	6053      	str	r3, [r2, #4]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(error);
 80813e2:	68bb      	ldr	r3, [r7, #8]
 80813e4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80813e8:	d307      	bcc.n	80813fa <FLASH_WaitForLastOperation+0x6e>
 80813ea:	4b11      	ldr	r3, [pc, #68]	@ (8081430 <FLASH_WaitForLastOperation+0xa4>)
 80813ec:	699a      	ldr	r2, [r3, #24]
 80813ee:	68bb      	ldr	r3, [r7, #8]
 80813f0:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 80813f4:	490e      	ldr	r1, [pc, #56]	@ (8081430 <FLASH_WaitForLastOperation+0xa4>)
 80813f6:	4313      	orrs	r3, r2
 80813f8:	618b      	str	r3, [r1, #24]
 80813fa:	68bb      	ldr	r3, [r7, #8]
 80813fc:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8081400:	2b00      	cmp	r3, #0
 8081402:	d004      	beq.n	808140e <FLASH_WaitForLastOperation+0x82>
 8081404:	4a0a      	ldr	r2, [pc, #40]	@ (8081430 <FLASH_WaitForLastOperation+0xa4>)
 8081406:	68bb      	ldr	r3, [r7, #8]
 8081408:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 808140c:	6113      	str	r3, [r2, #16]

    return HAL_ERROR;
 808140e:	2301      	movs	r3, #1
 8081410:	e009      	b.n	8081426 <FLASH_WaitForLastOperation+0x9a>
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8081412:	4b07      	ldr	r3, [pc, #28]	@ (8081430 <FLASH_WaitForLastOperation+0xa4>)
 8081414:	691b      	ldr	r3, [r3, #16]
 8081416:	f003 0301 	and.w	r3, r3, #1
 808141a:	2b00      	cmp	r3, #0
 808141c:	d002      	beq.n	8081424 <FLASH_WaitForLastOperation+0x98>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 808141e:	4b04      	ldr	r3, [pc, #16]	@ (8081430 <FLASH_WaitForLastOperation+0xa4>)
 8081420:	2201      	movs	r2, #1
 8081422:	611a      	str	r2, [r3, #16]
  }

  /* If there is an error flag set */
  return HAL_OK;
 8081424:	2300      	movs	r3, #0
}
 8081426:	4618      	mov	r0, r3
 8081428:	3710      	adds	r7, #16
 808142a:	46bd      	mov	sp, r7
 808142c:	bd80      	pop	{r7, pc}
 808142e:	bf00      	nop
 8081430:	40022000 	.word	0x40022000
 8081434:	2000000c 	.word	0x2000000c

08081438 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8081438:	b480      	push	{r7}
 808143a:	b085      	sub	sp, #20
 808143c:	af00      	add	r7, sp, #0
 808143e:	60f8      	str	r0, [r7, #12]
 8081440:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 8081444:	4b0e      	ldr	r3, [pc, #56]	@ (8081480 <FLASH_Program_DoubleWord+0x48>)
 8081446:	695b      	ldr	r3, [r3, #20]
 8081448:	4a0d      	ldr	r2, [pc, #52]	@ (8081480 <FLASH_Program_DoubleWord+0x48>)
 808144a:	f043 0301 	orr.w	r3, r3, #1
 808144e:	6153      	str	r3, [r2, #20]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8081450:	68fb      	ldr	r3, [r7, #12]
 8081452:	683a      	ldr	r2, [r7, #0]
 8081454:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 8081456:	f3bf 8f6f 	isb	sy
}
 808145a:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4U) = (uint32_t)(Data >> 32);
 808145c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8081460:	f04f 0200 	mov.w	r2, #0
 8081464:	f04f 0300 	mov.w	r3, #0
 8081468:	000a      	movs	r2, r1
 808146a:	2300      	movs	r3, #0
 808146c:	68f9      	ldr	r1, [r7, #12]
 808146e:	3104      	adds	r1, #4
 8081470:	4613      	mov	r3, r2
 8081472:	600b      	str	r3, [r1, #0]
}
 8081474:	bf00      	nop
 8081476:	3714      	adds	r7, #20
 8081478:	46bd      	mov	sp, r7
 808147a:	f85d 7b04 	ldr.w	r7, [sp], #4
 808147e:	4770      	bx	lr
 8081480:	40022000 	.word	0x40022000

08081484 <FLASH_Program_Fast>:
  * @param  Address specifies the address to be programmed.
  * @param  DataAddress specifies the address where the data are stored.
  * @retval None
  */
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
 8081484:	b480      	push	{r7}
 8081486:	b089      	sub	sp, #36	@ 0x24
 8081488:	af00      	add	r7, sp, #0
 808148a:	6078      	str	r0, [r7, #4]
 808148c:	6039      	str	r1, [r7, #0]
  uint32_t primask_bit;
  uint8_t row_index = (2*FLASH_NB_DOUBLE_WORDS_IN_ROW);
 808148e:	2340      	movs	r3, #64	@ 0x40
 8081490:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *dest_addr = (__IO uint32_t*)Address;
 8081492:	687b      	ldr	r3, [r7, #4]
 8081494:	61bb      	str	r3, [r7, #24]
  __IO uint32_t *src_addr = (__IO uint32_t*)DataAddress;
 8081496:	683b      	ldr	r3, [r7, #0]
 8081498:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(Address));

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 808149a:	4b14      	ldr	r3, [pc, #80]	@ (80814ec <FLASH_Program_Fast+0x68>)
 808149c:	695b      	ldr	r3, [r3, #20]
 808149e:	4a13      	ldr	r2, [pc, #76]	@ (80814ec <FLASH_Program_Fast+0x68>)
 80814a0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80814a4:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80814a6:	f3ef 8310 	mrs	r3, PRIMASK
 80814aa:	60fb      	str	r3, [r7, #12]
  return(result);
 80814ac:	68fb      	ldr	r3, [r7, #12]

  /* Disable interrupts to avoid any interruption during the loop */
  primask_bit = __get_PRIMASK();
 80814ae:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 80814b0:	b672      	cpsid	i
}
 80814b2:	bf00      	nop
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
 80814b4:	697b      	ldr	r3, [r7, #20]
 80814b6:	681a      	ldr	r2, [r3, #0]
 80814b8:	69bb      	ldr	r3, [r7, #24]
 80814ba:	601a      	str	r2, [r3, #0]
    dest_addr++;
 80814bc:	69bb      	ldr	r3, [r7, #24]
 80814be:	3304      	adds	r3, #4
 80814c0:	61bb      	str	r3, [r7, #24]
    src_addr++;
 80814c2:	697b      	ldr	r3, [r7, #20]
 80814c4:	3304      	adds	r3, #4
 80814c6:	617b      	str	r3, [r7, #20]
    row_index--;
 80814c8:	7ffb      	ldrb	r3, [r7, #31]
 80814ca:	3b01      	subs	r3, #1
 80814cc:	77fb      	strb	r3, [r7, #31]
  } while (row_index != 0U);
 80814ce:	7ffb      	ldrb	r3, [r7, #31]
 80814d0:	2b00      	cmp	r3, #0
 80814d2:	d1ef      	bne.n	80814b4 <FLASH_Program_Fast+0x30>
 80814d4:	693b      	ldr	r3, [r7, #16]
 80814d6:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80814d8:	68bb      	ldr	r3, [r7, #8]
 80814da:	f383 8810 	msr	PRIMASK, r3
}
 80814de:	bf00      	nop

  /* Re-enable the interrupts */
  __set_PRIMASK(primask_bit);
}
 80814e0:	bf00      	nop
 80814e2:	3724      	adds	r7, #36	@ 0x24
 80814e4:	46bd      	mov	sp, r7
 80814e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80814ea:	4770      	bx	lr
 80814ec:	40022000 	.word	0x40022000

080814f0 <HAL_FLASHEx_Erase>:
  *         the pages have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 80814f0:	b580      	push	{r7, lr}
 80814f2:	b084      	sub	sp, #16
 80814f4:	af00      	add	r7, sp, #0
 80814f6:	6078      	str	r0, [r7, #4]
 80814f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t page_index;

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80814fa:	4b49      	ldr	r3, [pc, #292]	@ (8081620 <HAL_FLASHEx_Erase+0x130>)
 80814fc:	781b      	ldrb	r3, [r3, #0]
 80814fe:	2b01      	cmp	r3, #1
 8081500:	d101      	bne.n	8081506 <HAL_FLASHEx_Erase+0x16>
 8081502:	2302      	movs	r3, #2
 8081504:	e087      	b.n	8081616 <HAL_FLASHEx_Erase+0x126>
 8081506:	4b46      	ldr	r3, [pc, #280]	@ (8081620 <HAL_FLASHEx_Erase+0x130>)
 8081508:	2201      	movs	r2, #1
 808150a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 808150c:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8081510:	f7ff ff3c 	bl	808138c <FLASH_WaitForLastOperation>
 8081514:	4603      	mov	r3, r0
 8081516:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8081518:	7bfb      	ldrb	r3, [r7, #15]
 808151a:	2b00      	cmp	r3, #0
 808151c:	d177      	bne.n	808160e <HAL_FLASHEx_Erase+0x11e>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 808151e:	4b40      	ldr	r3, [pc, #256]	@ (8081620 <HAL_FLASHEx_Erase+0x130>)
 8081520:	2200      	movs	r2, #0
 8081522:	605a      	str	r2, [r3, #4]

    /* Deactivate the cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 8081524:	4b3f      	ldr	r3, [pc, #252]	@ (8081624 <HAL_FLASHEx_Erase+0x134>)
 8081526:	681b      	ldr	r3, [r3, #0]
 8081528:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 808152c:	2b00      	cmp	r3, #0
 808152e:	d013      	beq.n	8081558 <HAL_FLASHEx_Erase+0x68>
    {
      if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8081530:	4b3c      	ldr	r3, [pc, #240]	@ (8081624 <HAL_FLASHEx_Erase+0x134>)
 8081532:	681b      	ldr	r3, [r3, #0]
 8081534:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8081538:	2b00      	cmp	r3, #0
 808153a:	d009      	beq.n	8081550 <HAL_FLASHEx_Erase+0x60>
      {
        /* Disable data cache  */
        __HAL_FLASH_DATA_CACHE_DISABLE();
 808153c:	4b39      	ldr	r3, [pc, #228]	@ (8081624 <HAL_FLASHEx_Erase+0x134>)
 808153e:	681b      	ldr	r3, [r3, #0]
 8081540:	4a38      	ldr	r2, [pc, #224]	@ (8081624 <HAL_FLASHEx_Erase+0x134>)
 8081542:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8081546:	6013      	str	r3, [r2, #0]
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 8081548:	4b35      	ldr	r3, [pc, #212]	@ (8081620 <HAL_FLASHEx_Erase+0x130>)
 808154a:	2203      	movs	r2, #3
 808154c:	771a      	strb	r2, [r3, #28]
 808154e:	e016      	b.n	808157e <HAL_FLASHEx_Erase+0x8e>
      }
      else
      {
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_ENABLED;
 8081550:	4b33      	ldr	r3, [pc, #204]	@ (8081620 <HAL_FLASHEx_Erase+0x130>)
 8081552:	2201      	movs	r2, #1
 8081554:	771a      	strb	r2, [r3, #28]
 8081556:	e012      	b.n	808157e <HAL_FLASHEx_Erase+0x8e>
      }
    }
    else if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8081558:	4b32      	ldr	r3, [pc, #200]	@ (8081624 <HAL_FLASHEx_Erase+0x134>)
 808155a:	681b      	ldr	r3, [r3, #0]
 808155c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8081560:	2b00      	cmp	r3, #0
 8081562:	d009      	beq.n	8081578 <HAL_FLASHEx_Erase+0x88>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 8081564:	4b2f      	ldr	r3, [pc, #188]	@ (8081624 <HAL_FLASHEx_Erase+0x134>)
 8081566:	681b      	ldr	r3, [r3, #0]
 8081568:	4a2e      	ldr	r2, [pc, #184]	@ (8081624 <HAL_FLASHEx_Erase+0x134>)
 808156a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 808156e:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8081570:	4b2b      	ldr	r3, [pc, #172]	@ (8081620 <HAL_FLASHEx_Erase+0x130>)
 8081572:	2202      	movs	r2, #2
 8081574:	771a      	strb	r2, [r3, #28]
 8081576:	e002      	b.n	808157e <HAL_FLASHEx_Erase+0x8e>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8081578:	4b29      	ldr	r3, [pc, #164]	@ (8081620 <HAL_FLASHEx_Erase+0x130>)
 808157a:	2200      	movs	r2, #0
 808157c:	771a      	strb	r2, [r3, #28]
    }

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 808157e:	687b      	ldr	r3, [r7, #4]
 8081580:	681b      	ldr	r3, [r3, #0]
 8081582:	2b01      	cmp	r3, #1
 8081584:	d113      	bne.n	80815ae <HAL_FLASHEx_Erase+0xbe>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->Banks);
 8081586:	687b      	ldr	r3, [r7, #4]
 8081588:	685b      	ldr	r3, [r3, #4]
 808158a:	4618      	mov	r0, r3
 808158c:	f000 f84c 	bl	8081628 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8081590:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8081594:	f7ff fefa 	bl	808138c <FLASH_WaitForLastOperation>
 8081598:	4603      	mov	r3, r0
 808159a:	73fb      	strb	r3, [r7, #15]
#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
      /* If the erase operation is completed, disable the MER1 and MER2 Bits */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
 808159c:	4b21      	ldr	r3, [pc, #132]	@ (8081624 <HAL_FLASHEx_Erase+0x134>)
 808159e:	695b      	ldr	r3, [r3, #20]
 80815a0:	4a20      	ldr	r2, [pc, #128]	@ (8081624 <HAL_FLASHEx_Erase+0x134>)
 80815a2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80815a6:	f023 0304 	bic.w	r3, r3, #4
 80815aa:	6153      	str	r3, [r2, #20]
 80815ac:	e02d      	b.n	808160a <HAL_FLASHEx_Erase+0x11a>
#endif
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 80815ae:	683b      	ldr	r3, [r7, #0]
 80815b0:	f04f 32ff 	mov.w	r2, #4294967295
 80815b4:	601a      	str	r2, [r3, #0]

      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 80815b6:	687b      	ldr	r3, [r7, #4]
 80815b8:	689b      	ldr	r3, [r3, #8]
 80815ba:	60bb      	str	r3, [r7, #8]
 80815bc:	e01d      	b.n	80815fa <HAL_FLASHEx_Erase+0x10a>
      {
        FLASH_PageErase(page_index, pEraseInit->Banks);
 80815be:	687b      	ldr	r3, [r7, #4]
 80815c0:	685b      	ldr	r3, [r3, #4]
 80815c2:	4619      	mov	r1, r3
 80815c4:	68b8      	ldr	r0, [r7, #8]
 80815c6:	f000 f857 	bl	8081678 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80815ca:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80815ce:	f7ff fedd 	bl	808138c <FLASH_WaitForLastOperation>
 80815d2:	4603      	mov	r3, r0
 80815d4:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the PER Bit */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 80815d6:	4b13      	ldr	r3, [pc, #76]	@ (8081624 <HAL_FLASHEx_Erase+0x134>)
 80815d8:	695b      	ldr	r3, [r3, #20]
 80815da:	4a12      	ldr	r2, [pc, #72]	@ (8081624 <HAL_FLASHEx_Erase+0x134>)
 80815dc:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80815e0:	f023 0302 	bic.w	r3, r3, #2
 80815e4:	6153      	str	r3, [r2, #20]

        if (status != HAL_OK)
 80815e6:	7bfb      	ldrb	r3, [r7, #15]
 80815e8:	2b00      	cmp	r3, #0
 80815ea:	d003      	beq.n	80815f4 <HAL_FLASHEx_Erase+0x104>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = page_index;
 80815ec:	683b      	ldr	r3, [r7, #0]
 80815ee:	68ba      	ldr	r2, [r7, #8]
 80815f0:	601a      	str	r2, [r3, #0]
          break;
 80815f2:	e00a      	b.n	808160a <HAL_FLASHEx_Erase+0x11a>
      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 80815f4:	68bb      	ldr	r3, [r7, #8]
 80815f6:	3301      	adds	r3, #1
 80815f8:	60bb      	str	r3, [r7, #8]
 80815fa:	687b      	ldr	r3, [r7, #4]
 80815fc:	689a      	ldr	r2, [r3, #8]
 80815fe:	687b      	ldr	r3, [r7, #4]
 8081600:	68db      	ldr	r3, [r3, #12]
 8081602:	4413      	add	r3, r2
 8081604:	68ba      	ldr	r2, [r7, #8]
 8081606:	429a      	cmp	r2, r3
 8081608:	d3d9      	bcc.n	80815be <HAL_FLASHEx_Erase+0xce>
        }
      }
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 808160a:	f000 f86b 	bl	80816e4 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 808160e:	4b04      	ldr	r3, [pc, #16]	@ (8081620 <HAL_FLASHEx_Erase+0x130>)
 8081610:	2200      	movs	r2, #0
 8081612:	701a      	strb	r2, [r3, #0]

  return status;
 8081614:	7bfb      	ldrb	r3, [r7, #15]
}
 8081616:	4618      	mov	r0, r3
 8081618:	3710      	adds	r7, #16
 808161a:	46bd      	mov	sp, r7
 808161c:	bd80      	pop	{r7, pc}
 808161e:	bf00      	nop
 8081620:	2000000c 	.word	0x2000000c
 8081624:	40022000 	.word	0x40022000

08081628 <FLASH_MassErase>:
  *            @arg FLASH_BANK_2: Bank2 to be erased
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8081628:	b480      	push	{r7}
 808162a:	b083      	sub	sp, #12
 808162c:	af00      	add	r7, sp, #0
 808162e:	6078      	str	r0, [r7, #4]
  {
    /* Check the parameters */
    assert_param(IS_FLASH_BANK(Banks));

    /* Set the Mass Erase Bit for the bank 1 if requested */
    if((Banks & FLASH_BANK_1) != 0U)
 8081630:	687b      	ldr	r3, [r7, #4]
 8081632:	f003 0301 	and.w	r3, r3, #1
 8081636:	2b00      	cmp	r3, #0
 8081638:	d005      	beq.n	8081646 <FLASH_MassErase+0x1e>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER1);
 808163a:	4b0e      	ldr	r3, [pc, #56]	@ (8081674 <FLASH_MassErase+0x4c>)
 808163c:	695b      	ldr	r3, [r3, #20]
 808163e:	4a0d      	ldr	r2, [pc, #52]	@ (8081674 <FLASH_MassErase+0x4c>)
 8081640:	f043 0304 	orr.w	r3, r3, #4
 8081644:	6153      	str	r3, [r2, #20]
#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
    /* Set the Mass Erase Bit for the bank 2 if requested */
    if((Banks & FLASH_BANK_2) != 0U)
 8081646:	687b      	ldr	r3, [r7, #4]
 8081648:	f003 0302 	and.w	r3, r3, #2
 808164c:	2b00      	cmp	r3, #0
 808164e:	d005      	beq.n	808165c <FLASH_MassErase+0x34>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER2);
 8081650:	4b08      	ldr	r3, [pc, #32]	@ (8081674 <FLASH_MassErase+0x4c>)
 8081652:	695b      	ldr	r3, [r3, #20]
 8081654:	4a07      	ldr	r2, [pc, #28]	@ (8081674 <FLASH_MassErase+0x4c>)
 8081656:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 808165a:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
  }
#endif

  /* Proceed to erase all sectors */
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 808165c:	4b05      	ldr	r3, [pc, #20]	@ (8081674 <FLASH_MassErase+0x4c>)
 808165e:	695b      	ldr	r3, [r3, #20]
 8081660:	4a04      	ldr	r2, [pc, #16]	@ (8081674 <FLASH_MassErase+0x4c>)
 8081662:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8081666:	6153      	str	r3, [r2, #20]
}
 8081668:	bf00      	nop
 808166a:	370c      	adds	r7, #12
 808166c:	46bd      	mov	sp, r7
 808166e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8081672:	4770      	bx	lr
 8081674:	40022000 	.word	0x40022000

08081678 <FLASH_PageErase>:
  *            @arg FLASH_BANK_1: Page in bank 1 to be erased
  *            @arg FLASH_BANK_2: Page in bank 2 to be erased
  * @retval None
  */
void FLASH_PageErase(uint32_t Page, uint32_t Banks)
{
 8081678:	b480      	push	{r7}
 808167a:	b083      	sub	sp, #12
 808167c:	af00      	add	r7, sp, #0
 808167e:	6078      	str	r0, [r7, #4]
 8081680:	6039      	str	r1, [r7, #0]
  else
#endif
  {
    assert_param(IS_FLASH_BANK_EXCLUSIVE(Banks));

    if((Banks & FLASH_BANK_1) != 0U)
 8081682:	683b      	ldr	r3, [r7, #0]
 8081684:	f003 0301 	and.w	r3, r3, #1
 8081688:	2b00      	cmp	r3, #0
 808168a:	d006      	beq.n	808169a <FLASH_PageErase+0x22>
    {
      CLEAR_BIT(FLASH->CR, FLASH_CR_BKER);
 808168c:	4b14      	ldr	r3, [pc, #80]	@ (80816e0 <FLASH_PageErase+0x68>)
 808168e:	695b      	ldr	r3, [r3, #20]
 8081690:	4a13      	ldr	r2, [pc, #76]	@ (80816e0 <FLASH_PageErase+0x68>)
 8081692:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8081696:	6153      	str	r3, [r2, #20]
 8081698:	e005      	b.n	80816a6 <FLASH_PageErase+0x2e>
    }
    else
    {
      SET_BIT(FLASH->CR, FLASH_CR_BKER);
 808169a:	4b11      	ldr	r3, [pc, #68]	@ (80816e0 <FLASH_PageErase+0x68>)
 808169c:	695b      	ldr	r3, [r3, #20]
 808169e:	4a10      	ldr	r2, [pc, #64]	@ (80816e0 <FLASH_PageErase+0x68>)
 80816a0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80816a4:	6153      	str	r3, [r2, #20]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 80816a6:	4b0e      	ldr	r3, [pc, #56]	@ (80816e0 <FLASH_PageErase+0x68>)
 80816a8:	695b      	ldr	r3, [r3, #20]
 80816aa:	f423 62ff 	bic.w	r2, r3, #2040	@ 0x7f8
 80816ae:	687b      	ldr	r3, [r7, #4]
 80816b0:	00db      	lsls	r3, r3, #3
 80816b2:	f403 63ff 	and.w	r3, r3, #2040	@ 0x7f8
 80816b6:	490a      	ldr	r1, [pc, #40]	@ (80816e0 <FLASH_PageErase+0x68>)
 80816b8:	4313      	orrs	r3, r2
 80816ba:	614b      	str	r3, [r1, #20]
  SET_BIT(FLASH->CR, FLASH_CR_PER);
 80816bc:	4b08      	ldr	r3, [pc, #32]	@ (80816e0 <FLASH_PageErase+0x68>)
 80816be:	695b      	ldr	r3, [r3, #20]
 80816c0:	4a07      	ldr	r2, [pc, #28]	@ (80816e0 <FLASH_PageErase+0x68>)
 80816c2:	f043 0302 	orr.w	r3, r3, #2
 80816c6:	6153      	str	r3, [r2, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80816c8:	4b05      	ldr	r3, [pc, #20]	@ (80816e0 <FLASH_PageErase+0x68>)
 80816ca:	695b      	ldr	r3, [r3, #20]
 80816cc:	4a04      	ldr	r2, [pc, #16]	@ (80816e0 <FLASH_PageErase+0x68>)
 80816ce:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80816d2:	6153      	str	r3, [r2, #20]
}
 80816d4:	bf00      	nop
 80816d6:	370c      	adds	r7, #12
 80816d8:	46bd      	mov	sp, r7
 80816da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80816de:	4770      	bx	lr
 80816e0:	40022000 	.word	0x40022000

080816e4 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 80816e4:	b480      	push	{r7}
 80816e6:	b083      	sub	sp, #12
 80816e8:	af00      	add	r7, sp, #0
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 80816ea:	4b21      	ldr	r3, [pc, #132]	@ (8081770 <FLASH_FlushCaches+0x8c>)
 80816ec:	7f1b      	ldrb	r3, [r3, #28]
 80816ee:	71fb      	strb	r3, [r7, #7]

  /* Flush instruction cache  */
  if((cache == FLASH_CACHE_ICACHE_ENABLED) ||
 80816f0:	79fb      	ldrb	r3, [r7, #7]
 80816f2:	2b01      	cmp	r3, #1
 80816f4:	d002      	beq.n	80816fc <FLASH_FlushCaches+0x18>
 80816f6:	79fb      	ldrb	r3, [r7, #7]
 80816f8:	2b03      	cmp	r3, #3
 80816fa:	d117      	bne.n	808172c <FLASH_FlushCaches+0x48>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Disable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 80816fc:	4b1d      	ldr	r3, [pc, #116]	@ (8081774 <FLASH_FlushCaches+0x90>)
 80816fe:	681b      	ldr	r3, [r3, #0]
 8081700:	4a1c      	ldr	r2, [pc, #112]	@ (8081774 <FLASH_FlushCaches+0x90>)
 8081702:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8081706:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8081708:	4b1a      	ldr	r3, [pc, #104]	@ (8081774 <FLASH_FlushCaches+0x90>)
 808170a:	681b      	ldr	r3, [r3, #0]
 808170c:	4a19      	ldr	r2, [pc, #100]	@ (8081774 <FLASH_FlushCaches+0x90>)
 808170e:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8081712:	6013      	str	r3, [r2, #0]
 8081714:	4b17      	ldr	r3, [pc, #92]	@ (8081774 <FLASH_FlushCaches+0x90>)
 8081716:	681b      	ldr	r3, [r3, #0]
 8081718:	4a16      	ldr	r2, [pc, #88]	@ (8081774 <FLASH_FlushCaches+0x90>)
 808171a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 808171e:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8081720:	4b14      	ldr	r3, [pc, #80]	@ (8081774 <FLASH_FlushCaches+0x90>)
 8081722:	681b      	ldr	r3, [r3, #0]
 8081724:	4a13      	ldr	r2, [pc, #76]	@ (8081774 <FLASH_FlushCaches+0x90>)
 8081726:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 808172a:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if((cache == FLASH_CACHE_DCACHE_ENABLED) ||
 808172c:	79fb      	ldrb	r3, [r7, #7]
 808172e:	2b02      	cmp	r3, #2
 8081730:	d002      	beq.n	8081738 <FLASH_FlushCaches+0x54>
 8081732:	79fb      	ldrb	r3, [r7, #7]
 8081734:	2b03      	cmp	r3, #3
 8081736:	d111      	bne.n	808175c <FLASH_FlushCaches+0x78>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8081738:	4b0e      	ldr	r3, [pc, #56]	@ (8081774 <FLASH_FlushCaches+0x90>)
 808173a:	681b      	ldr	r3, [r3, #0]
 808173c:	4a0d      	ldr	r2, [pc, #52]	@ (8081774 <FLASH_FlushCaches+0x90>)
 808173e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8081742:	6013      	str	r3, [r2, #0]
 8081744:	4b0b      	ldr	r3, [pc, #44]	@ (8081774 <FLASH_FlushCaches+0x90>)
 8081746:	681b      	ldr	r3, [r3, #0]
 8081748:	4a0a      	ldr	r2, [pc, #40]	@ (8081774 <FLASH_FlushCaches+0x90>)
 808174a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 808174e:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8081750:	4b08      	ldr	r3, [pc, #32]	@ (8081774 <FLASH_FlushCaches+0x90>)
 8081752:	681b      	ldr	r3, [r3, #0]
 8081754:	4a07      	ldr	r2, [pc, #28]	@ (8081774 <FLASH_FlushCaches+0x90>)
 8081756:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 808175a:	6013      	str	r3, [r2, #0]
  }

  /* Reset internal variable */
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 808175c:	4b04      	ldr	r3, [pc, #16]	@ (8081770 <FLASH_FlushCaches+0x8c>)
 808175e:	2200      	movs	r2, #0
 8081760:	771a      	strb	r2, [r3, #28]
}
 8081762:	bf00      	nop
 8081764:	370c      	adds	r7, #12
 8081766:	46bd      	mov	sp, r7
 8081768:	f85d 7b04 	ldr.w	r7, [sp], #4
 808176c:	4770      	bx	lr
 808176e:	bf00      	nop
 8081770:	2000000c 	.word	0x2000000c
 8081774:	40022000 	.word	0x40022000

08081778 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8081778:	b480      	push	{r7}
 808177a:	b087      	sub	sp, #28
 808177c:	af00      	add	r7, sp, #0
 808177e:	6078      	str	r0, [r7, #4]
 8081780:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8081782:	2300      	movs	r3, #0
 8081784:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8081786:	e166      	b.n	8081a56 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8081788:	683b      	ldr	r3, [r7, #0]
 808178a:	681a      	ldr	r2, [r3, #0]
 808178c:	2101      	movs	r1, #1
 808178e:	697b      	ldr	r3, [r7, #20]
 8081790:	fa01 f303 	lsl.w	r3, r1, r3
 8081794:	4013      	ands	r3, r2
 8081796:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8081798:	68fb      	ldr	r3, [r7, #12]
 808179a:	2b00      	cmp	r3, #0
 808179c:	f000 8158 	beq.w	8081a50 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80817a0:	683b      	ldr	r3, [r7, #0]
 80817a2:	685b      	ldr	r3, [r3, #4]
 80817a4:	f003 0303 	and.w	r3, r3, #3
 80817a8:	2b01      	cmp	r3, #1
 80817aa:	d005      	beq.n	80817b8 <HAL_GPIO_Init+0x40>
 80817ac:	683b      	ldr	r3, [r7, #0]
 80817ae:	685b      	ldr	r3, [r3, #4]
 80817b0:	f003 0303 	and.w	r3, r3, #3
 80817b4:	2b02      	cmp	r3, #2
 80817b6:	d130      	bne.n	808181a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80817b8:	687b      	ldr	r3, [r7, #4]
 80817ba:	689b      	ldr	r3, [r3, #8]
 80817bc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80817be:	697b      	ldr	r3, [r7, #20]
 80817c0:	005b      	lsls	r3, r3, #1
 80817c2:	2203      	movs	r2, #3
 80817c4:	fa02 f303 	lsl.w	r3, r2, r3
 80817c8:	43db      	mvns	r3, r3
 80817ca:	693a      	ldr	r2, [r7, #16]
 80817cc:	4013      	ands	r3, r2
 80817ce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80817d0:	683b      	ldr	r3, [r7, #0]
 80817d2:	68da      	ldr	r2, [r3, #12]
 80817d4:	697b      	ldr	r3, [r7, #20]
 80817d6:	005b      	lsls	r3, r3, #1
 80817d8:	fa02 f303 	lsl.w	r3, r2, r3
 80817dc:	693a      	ldr	r2, [r7, #16]
 80817de:	4313      	orrs	r3, r2
 80817e0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80817e2:	687b      	ldr	r3, [r7, #4]
 80817e4:	693a      	ldr	r2, [r7, #16]
 80817e6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80817e8:	687b      	ldr	r3, [r7, #4]
 80817ea:	685b      	ldr	r3, [r3, #4]
 80817ec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80817ee:	2201      	movs	r2, #1
 80817f0:	697b      	ldr	r3, [r7, #20]
 80817f2:	fa02 f303 	lsl.w	r3, r2, r3
 80817f6:	43db      	mvns	r3, r3
 80817f8:	693a      	ldr	r2, [r7, #16]
 80817fa:	4013      	ands	r3, r2
 80817fc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80817fe:	683b      	ldr	r3, [r7, #0]
 8081800:	685b      	ldr	r3, [r3, #4]
 8081802:	091b      	lsrs	r3, r3, #4
 8081804:	f003 0201 	and.w	r2, r3, #1
 8081808:	697b      	ldr	r3, [r7, #20]
 808180a:	fa02 f303 	lsl.w	r3, r2, r3
 808180e:	693a      	ldr	r2, [r7, #16]
 8081810:	4313      	orrs	r3, r2
 8081812:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8081814:	687b      	ldr	r3, [r7, #4]
 8081816:	693a      	ldr	r2, [r7, #16]
 8081818:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 808181a:	683b      	ldr	r3, [r7, #0]
 808181c:	685b      	ldr	r3, [r3, #4]
 808181e:	f003 0303 	and.w	r3, r3, #3
 8081822:	2b03      	cmp	r3, #3
 8081824:	d017      	beq.n	8081856 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8081826:	687b      	ldr	r3, [r7, #4]
 8081828:	68db      	ldr	r3, [r3, #12]
 808182a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 808182c:	697b      	ldr	r3, [r7, #20]
 808182e:	005b      	lsls	r3, r3, #1
 8081830:	2203      	movs	r2, #3
 8081832:	fa02 f303 	lsl.w	r3, r2, r3
 8081836:	43db      	mvns	r3, r3
 8081838:	693a      	ldr	r2, [r7, #16]
 808183a:	4013      	ands	r3, r2
 808183c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 808183e:	683b      	ldr	r3, [r7, #0]
 8081840:	689a      	ldr	r2, [r3, #8]
 8081842:	697b      	ldr	r3, [r7, #20]
 8081844:	005b      	lsls	r3, r3, #1
 8081846:	fa02 f303 	lsl.w	r3, r2, r3
 808184a:	693a      	ldr	r2, [r7, #16]
 808184c:	4313      	orrs	r3, r2
 808184e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8081850:	687b      	ldr	r3, [r7, #4]
 8081852:	693a      	ldr	r2, [r7, #16]
 8081854:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8081856:	683b      	ldr	r3, [r7, #0]
 8081858:	685b      	ldr	r3, [r3, #4]
 808185a:	f003 0303 	and.w	r3, r3, #3
 808185e:	2b02      	cmp	r3, #2
 8081860:	d123      	bne.n	80818aa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8081862:	697b      	ldr	r3, [r7, #20]
 8081864:	08da      	lsrs	r2, r3, #3
 8081866:	687b      	ldr	r3, [r7, #4]
 8081868:	3208      	adds	r2, #8
 808186a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 808186e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8081870:	697b      	ldr	r3, [r7, #20]
 8081872:	f003 0307 	and.w	r3, r3, #7
 8081876:	009b      	lsls	r3, r3, #2
 8081878:	220f      	movs	r2, #15
 808187a:	fa02 f303 	lsl.w	r3, r2, r3
 808187e:	43db      	mvns	r3, r3
 8081880:	693a      	ldr	r2, [r7, #16]
 8081882:	4013      	ands	r3, r2
 8081884:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8081886:	683b      	ldr	r3, [r7, #0]
 8081888:	691a      	ldr	r2, [r3, #16]
 808188a:	697b      	ldr	r3, [r7, #20]
 808188c:	f003 0307 	and.w	r3, r3, #7
 8081890:	009b      	lsls	r3, r3, #2
 8081892:	fa02 f303 	lsl.w	r3, r2, r3
 8081896:	693a      	ldr	r2, [r7, #16]
 8081898:	4313      	orrs	r3, r2
 808189a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 808189c:	697b      	ldr	r3, [r7, #20]
 808189e:	08da      	lsrs	r2, r3, #3
 80818a0:	687b      	ldr	r3, [r7, #4]
 80818a2:	3208      	adds	r2, #8
 80818a4:	6939      	ldr	r1, [r7, #16]
 80818a6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80818aa:	687b      	ldr	r3, [r7, #4]
 80818ac:	681b      	ldr	r3, [r3, #0]
 80818ae:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80818b0:	697b      	ldr	r3, [r7, #20]
 80818b2:	005b      	lsls	r3, r3, #1
 80818b4:	2203      	movs	r2, #3
 80818b6:	fa02 f303 	lsl.w	r3, r2, r3
 80818ba:	43db      	mvns	r3, r3
 80818bc:	693a      	ldr	r2, [r7, #16]
 80818be:	4013      	ands	r3, r2
 80818c0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80818c2:	683b      	ldr	r3, [r7, #0]
 80818c4:	685b      	ldr	r3, [r3, #4]
 80818c6:	f003 0203 	and.w	r2, r3, #3
 80818ca:	697b      	ldr	r3, [r7, #20]
 80818cc:	005b      	lsls	r3, r3, #1
 80818ce:	fa02 f303 	lsl.w	r3, r2, r3
 80818d2:	693a      	ldr	r2, [r7, #16]
 80818d4:	4313      	orrs	r3, r2
 80818d6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80818d8:	687b      	ldr	r3, [r7, #4]
 80818da:	693a      	ldr	r2, [r7, #16]
 80818dc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80818de:	683b      	ldr	r3, [r7, #0]
 80818e0:	685b      	ldr	r3, [r3, #4]
 80818e2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80818e6:	2b00      	cmp	r3, #0
 80818e8:	f000 80b2 	beq.w	8081a50 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80818ec:	4b61      	ldr	r3, [pc, #388]	@ (8081a74 <HAL_GPIO_Init+0x2fc>)
 80818ee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80818f0:	4a60      	ldr	r2, [pc, #384]	@ (8081a74 <HAL_GPIO_Init+0x2fc>)
 80818f2:	f043 0301 	orr.w	r3, r3, #1
 80818f6:	6613      	str	r3, [r2, #96]	@ 0x60
 80818f8:	4b5e      	ldr	r3, [pc, #376]	@ (8081a74 <HAL_GPIO_Init+0x2fc>)
 80818fa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80818fc:	f003 0301 	and.w	r3, r3, #1
 8081900:	60bb      	str	r3, [r7, #8]
 8081902:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8081904:	4a5c      	ldr	r2, [pc, #368]	@ (8081a78 <HAL_GPIO_Init+0x300>)
 8081906:	697b      	ldr	r3, [r7, #20]
 8081908:	089b      	lsrs	r3, r3, #2
 808190a:	3302      	adds	r3, #2
 808190c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8081910:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8081912:	697b      	ldr	r3, [r7, #20]
 8081914:	f003 0303 	and.w	r3, r3, #3
 8081918:	009b      	lsls	r3, r3, #2
 808191a:	220f      	movs	r2, #15
 808191c:	fa02 f303 	lsl.w	r3, r2, r3
 8081920:	43db      	mvns	r3, r3
 8081922:	693a      	ldr	r2, [r7, #16]
 8081924:	4013      	ands	r3, r2
 8081926:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8081928:	687b      	ldr	r3, [r7, #4]
 808192a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 808192e:	d02b      	beq.n	8081988 <HAL_GPIO_Init+0x210>
 8081930:	687b      	ldr	r3, [r7, #4]
 8081932:	4a52      	ldr	r2, [pc, #328]	@ (8081a7c <HAL_GPIO_Init+0x304>)
 8081934:	4293      	cmp	r3, r2
 8081936:	d025      	beq.n	8081984 <HAL_GPIO_Init+0x20c>
 8081938:	687b      	ldr	r3, [r7, #4]
 808193a:	4a51      	ldr	r2, [pc, #324]	@ (8081a80 <HAL_GPIO_Init+0x308>)
 808193c:	4293      	cmp	r3, r2
 808193e:	d01f      	beq.n	8081980 <HAL_GPIO_Init+0x208>
 8081940:	687b      	ldr	r3, [r7, #4]
 8081942:	4a50      	ldr	r2, [pc, #320]	@ (8081a84 <HAL_GPIO_Init+0x30c>)
 8081944:	4293      	cmp	r3, r2
 8081946:	d019      	beq.n	808197c <HAL_GPIO_Init+0x204>
 8081948:	687b      	ldr	r3, [r7, #4]
 808194a:	4a4f      	ldr	r2, [pc, #316]	@ (8081a88 <HAL_GPIO_Init+0x310>)
 808194c:	4293      	cmp	r3, r2
 808194e:	d013      	beq.n	8081978 <HAL_GPIO_Init+0x200>
 8081950:	687b      	ldr	r3, [r7, #4]
 8081952:	4a4e      	ldr	r2, [pc, #312]	@ (8081a8c <HAL_GPIO_Init+0x314>)
 8081954:	4293      	cmp	r3, r2
 8081956:	d00d      	beq.n	8081974 <HAL_GPIO_Init+0x1fc>
 8081958:	687b      	ldr	r3, [r7, #4]
 808195a:	4a4d      	ldr	r2, [pc, #308]	@ (8081a90 <HAL_GPIO_Init+0x318>)
 808195c:	4293      	cmp	r3, r2
 808195e:	d007      	beq.n	8081970 <HAL_GPIO_Init+0x1f8>
 8081960:	687b      	ldr	r3, [r7, #4]
 8081962:	4a4c      	ldr	r2, [pc, #304]	@ (8081a94 <HAL_GPIO_Init+0x31c>)
 8081964:	4293      	cmp	r3, r2
 8081966:	d101      	bne.n	808196c <HAL_GPIO_Init+0x1f4>
 8081968:	2307      	movs	r3, #7
 808196a:	e00e      	b.n	808198a <HAL_GPIO_Init+0x212>
 808196c:	2308      	movs	r3, #8
 808196e:	e00c      	b.n	808198a <HAL_GPIO_Init+0x212>
 8081970:	2306      	movs	r3, #6
 8081972:	e00a      	b.n	808198a <HAL_GPIO_Init+0x212>
 8081974:	2305      	movs	r3, #5
 8081976:	e008      	b.n	808198a <HAL_GPIO_Init+0x212>
 8081978:	2304      	movs	r3, #4
 808197a:	e006      	b.n	808198a <HAL_GPIO_Init+0x212>
 808197c:	2303      	movs	r3, #3
 808197e:	e004      	b.n	808198a <HAL_GPIO_Init+0x212>
 8081980:	2302      	movs	r3, #2
 8081982:	e002      	b.n	808198a <HAL_GPIO_Init+0x212>
 8081984:	2301      	movs	r3, #1
 8081986:	e000      	b.n	808198a <HAL_GPIO_Init+0x212>
 8081988:	2300      	movs	r3, #0
 808198a:	697a      	ldr	r2, [r7, #20]
 808198c:	f002 0203 	and.w	r2, r2, #3
 8081990:	0092      	lsls	r2, r2, #2
 8081992:	4093      	lsls	r3, r2
 8081994:	693a      	ldr	r2, [r7, #16]
 8081996:	4313      	orrs	r3, r2
 8081998:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 808199a:	4937      	ldr	r1, [pc, #220]	@ (8081a78 <HAL_GPIO_Init+0x300>)
 808199c:	697b      	ldr	r3, [r7, #20]
 808199e:	089b      	lsrs	r3, r3, #2
 80819a0:	3302      	adds	r3, #2
 80819a2:	693a      	ldr	r2, [r7, #16]
 80819a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80819a8:	4b3b      	ldr	r3, [pc, #236]	@ (8081a98 <HAL_GPIO_Init+0x320>)
 80819aa:	689b      	ldr	r3, [r3, #8]
 80819ac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80819ae:	68fb      	ldr	r3, [r7, #12]
 80819b0:	43db      	mvns	r3, r3
 80819b2:	693a      	ldr	r2, [r7, #16]
 80819b4:	4013      	ands	r3, r2
 80819b6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80819b8:	683b      	ldr	r3, [r7, #0]
 80819ba:	685b      	ldr	r3, [r3, #4]
 80819bc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80819c0:	2b00      	cmp	r3, #0
 80819c2:	d003      	beq.n	80819cc <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 80819c4:	693a      	ldr	r2, [r7, #16]
 80819c6:	68fb      	ldr	r3, [r7, #12]
 80819c8:	4313      	orrs	r3, r2
 80819ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80819cc:	4a32      	ldr	r2, [pc, #200]	@ (8081a98 <HAL_GPIO_Init+0x320>)
 80819ce:	693b      	ldr	r3, [r7, #16]
 80819d0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80819d2:	4b31      	ldr	r3, [pc, #196]	@ (8081a98 <HAL_GPIO_Init+0x320>)
 80819d4:	68db      	ldr	r3, [r3, #12]
 80819d6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80819d8:	68fb      	ldr	r3, [r7, #12]
 80819da:	43db      	mvns	r3, r3
 80819dc:	693a      	ldr	r2, [r7, #16]
 80819de:	4013      	ands	r3, r2
 80819e0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80819e2:	683b      	ldr	r3, [r7, #0]
 80819e4:	685b      	ldr	r3, [r3, #4]
 80819e6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80819ea:	2b00      	cmp	r3, #0
 80819ec:	d003      	beq.n	80819f6 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 80819ee:	693a      	ldr	r2, [r7, #16]
 80819f0:	68fb      	ldr	r3, [r7, #12]
 80819f2:	4313      	orrs	r3, r2
 80819f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80819f6:	4a28      	ldr	r2, [pc, #160]	@ (8081a98 <HAL_GPIO_Init+0x320>)
 80819f8:	693b      	ldr	r3, [r7, #16]
 80819fa:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80819fc:	4b26      	ldr	r3, [pc, #152]	@ (8081a98 <HAL_GPIO_Init+0x320>)
 80819fe:	685b      	ldr	r3, [r3, #4]
 8081a00:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8081a02:	68fb      	ldr	r3, [r7, #12]
 8081a04:	43db      	mvns	r3, r3
 8081a06:	693a      	ldr	r2, [r7, #16]
 8081a08:	4013      	ands	r3, r2
 8081a0a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8081a0c:	683b      	ldr	r3, [r7, #0]
 8081a0e:	685b      	ldr	r3, [r3, #4]
 8081a10:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8081a14:	2b00      	cmp	r3, #0
 8081a16:	d003      	beq.n	8081a20 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8081a18:	693a      	ldr	r2, [r7, #16]
 8081a1a:	68fb      	ldr	r3, [r7, #12]
 8081a1c:	4313      	orrs	r3, r2
 8081a1e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8081a20:	4a1d      	ldr	r2, [pc, #116]	@ (8081a98 <HAL_GPIO_Init+0x320>)
 8081a22:	693b      	ldr	r3, [r7, #16]
 8081a24:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8081a26:	4b1c      	ldr	r3, [pc, #112]	@ (8081a98 <HAL_GPIO_Init+0x320>)
 8081a28:	681b      	ldr	r3, [r3, #0]
 8081a2a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8081a2c:	68fb      	ldr	r3, [r7, #12]
 8081a2e:	43db      	mvns	r3, r3
 8081a30:	693a      	ldr	r2, [r7, #16]
 8081a32:	4013      	ands	r3, r2
 8081a34:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8081a36:	683b      	ldr	r3, [r7, #0]
 8081a38:	685b      	ldr	r3, [r3, #4]
 8081a3a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8081a3e:	2b00      	cmp	r3, #0
 8081a40:	d003      	beq.n	8081a4a <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8081a42:	693a      	ldr	r2, [r7, #16]
 8081a44:	68fb      	ldr	r3, [r7, #12]
 8081a46:	4313      	orrs	r3, r2
 8081a48:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8081a4a:	4a13      	ldr	r2, [pc, #76]	@ (8081a98 <HAL_GPIO_Init+0x320>)
 8081a4c:	693b      	ldr	r3, [r7, #16]
 8081a4e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8081a50:	697b      	ldr	r3, [r7, #20]
 8081a52:	3301      	adds	r3, #1
 8081a54:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8081a56:	683b      	ldr	r3, [r7, #0]
 8081a58:	681a      	ldr	r2, [r3, #0]
 8081a5a:	697b      	ldr	r3, [r7, #20]
 8081a5c:	fa22 f303 	lsr.w	r3, r2, r3
 8081a60:	2b00      	cmp	r3, #0
 8081a62:	f47f ae91 	bne.w	8081788 <HAL_GPIO_Init+0x10>
  }
}
 8081a66:	bf00      	nop
 8081a68:	bf00      	nop
 8081a6a:	371c      	adds	r7, #28
 8081a6c:	46bd      	mov	sp, r7
 8081a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8081a72:	4770      	bx	lr
 8081a74:	40021000 	.word	0x40021000
 8081a78:	40010000 	.word	0x40010000
 8081a7c:	48000400 	.word	0x48000400
 8081a80:	48000800 	.word	0x48000800
 8081a84:	48000c00 	.word	0x48000c00
 8081a88:	48001000 	.word	0x48001000
 8081a8c:	48001400 	.word	0x48001400
 8081a90:	48001800 	.word	0x48001800
 8081a94:	48001c00 	.word	0x48001c00
 8081a98:	40010400 	.word	0x40010400

08081a9c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8081a9c:	b480      	push	{r7}
 8081a9e:	b083      	sub	sp, #12
 8081aa0:	af00      	add	r7, sp, #0
 8081aa2:	6078      	str	r0, [r7, #4]
 8081aa4:	460b      	mov	r3, r1
 8081aa6:	807b      	strh	r3, [r7, #2]
 8081aa8:	4613      	mov	r3, r2
 8081aaa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8081aac:	787b      	ldrb	r3, [r7, #1]
 8081aae:	2b00      	cmp	r3, #0
 8081ab0:	d003      	beq.n	8081aba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8081ab2:	887a      	ldrh	r2, [r7, #2]
 8081ab4:	687b      	ldr	r3, [r7, #4]
 8081ab6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8081ab8:	e002      	b.n	8081ac0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8081aba:	887a      	ldrh	r2, [r7, #2]
 8081abc:	687b      	ldr	r3, [r7, #4]
 8081abe:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8081ac0:	bf00      	nop
 8081ac2:	370c      	adds	r7, #12
 8081ac4:	46bd      	mov	sp, r7
 8081ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8081aca:	4770      	bx	lr

08081acc <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8081acc:	b480      	push	{r7}
 8081ace:	b085      	sub	sp, #20
 8081ad0:	af00      	add	r7, sp, #0
 8081ad2:	6078      	str	r0, [r7, #4]
 8081ad4:	460b      	mov	r3, r1
 8081ad6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8081ad8:	687b      	ldr	r3, [r7, #4]
 8081ada:	695b      	ldr	r3, [r3, #20]
 8081adc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8081ade:	887a      	ldrh	r2, [r7, #2]
 8081ae0:	68fb      	ldr	r3, [r7, #12]
 8081ae2:	4013      	ands	r3, r2
 8081ae4:	041a      	lsls	r2, r3, #16
 8081ae6:	68fb      	ldr	r3, [r7, #12]
 8081ae8:	43d9      	mvns	r1, r3
 8081aea:	887b      	ldrh	r3, [r7, #2]
 8081aec:	400b      	ands	r3, r1
 8081aee:	431a      	orrs	r2, r3
 8081af0:	687b      	ldr	r3, [r7, #4]
 8081af2:	619a      	str	r2, [r3, #24]
}
 8081af4:	bf00      	nop
 8081af6:	3714      	adds	r7, #20
 8081af8:	46bd      	mov	sp, r7
 8081afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8081afe:	4770      	bx	lr

08081b00 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8081b00:	b480      	push	{r7}
 8081b02:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8081b04:	4b04      	ldr	r3, [pc, #16]	@ (8081b18 <HAL_PWREx_GetVoltageRange+0x18>)
 8081b06:	681b      	ldr	r3, [r3, #0]
 8081b08:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8081b0c:	4618      	mov	r0, r3
 8081b0e:	46bd      	mov	sp, r7
 8081b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8081b14:	4770      	bx	lr
 8081b16:	bf00      	nop
 8081b18:	40007000 	.word	0x40007000

08081b1c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8081b1c:	b480      	push	{r7}
 8081b1e:	b085      	sub	sp, #20
 8081b20:	af00      	add	r7, sp, #0
 8081b22:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8081b24:	687b      	ldr	r3, [r7, #4]
 8081b26:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8081b2a:	d130      	bne.n	8081b8e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8081b2c:	4b23      	ldr	r3, [pc, #140]	@ (8081bbc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8081b2e:	681b      	ldr	r3, [r3, #0]
 8081b30:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8081b34:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8081b38:	d038      	beq.n	8081bac <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8081b3a:	4b20      	ldr	r3, [pc, #128]	@ (8081bbc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8081b3c:	681b      	ldr	r3, [r3, #0]
 8081b3e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8081b42:	4a1e      	ldr	r2, [pc, #120]	@ (8081bbc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8081b44:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8081b48:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8081b4a:	4b1d      	ldr	r3, [pc, #116]	@ (8081bc0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8081b4c:	681b      	ldr	r3, [r3, #0]
 8081b4e:	2232      	movs	r2, #50	@ 0x32
 8081b50:	fb02 f303 	mul.w	r3, r2, r3
 8081b54:	4a1b      	ldr	r2, [pc, #108]	@ (8081bc4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8081b56:	fba2 2303 	umull	r2, r3, r2, r3
 8081b5a:	0c9b      	lsrs	r3, r3, #18
 8081b5c:	3301      	adds	r3, #1
 8081b5e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8081b60:	e002      	b.n	8081b68 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8081b62:	68fb      	ldr	r3, [r7, #12]
 8081b64:	3b01      	subs	r3, #1
 8081b66:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8081b68:	4b14      	ldr	r3, [pc, #80]	@ (8081bbc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8081b6a:	695b      	ldr	r3, [r3, #20]
 8081b6c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8081b70:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8081b74:	d102      	bne.n	8081b7c <HAL_PWREx_ControlVoltageScaling+0x60>
 8081b76:	68fb      	ldr	r3, [r7, #12]
 8081b78:	2b00      	cmp	r3, #0
 8081b7a:	d1f2      	bne.n	8081b62 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8081b7c:	4b0f      	ldr	r3, [pc, #60]	@ (8081bbc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8081b7e:	695b      	ldr	r3, [r3, #20]
 8081b80:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8081b84:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8081b88:	d110      	bne.n	8081bac <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8081b8a:	2303      	movs	r3, #3
 8081b8c:	e00f      	b.n	8081bae <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8081b8e:	4b0b      	ldr	r3, [pc, #44]	@ (8081bbc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8081b90:	681b      	ldr	r3, [r3, #0]
 8081b92:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8081b96:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8081b9a:	d007      	beq.n	8081bac <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8081b9c:	4b07      	ldr	r3, [pc, #28]	@ (8081bbc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8081b9e:	681b      	ldr	r3, [r3, #0]
 8081ba0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8081ba4:	4a05      	ldr	r2, [pc, #20]	@ (8081bbc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8081ba6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8081baa:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8081bac:	2300      	movs	r3, #0
}
 8081bae:	4618      	mov	r0, r3
 8081bb0:	3714      	adds	r7, #20
 8081bb2:	46bd      	mov	sp, r7
 8081bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8081bb8:	4770      	bx	lr
 8081bba:	bf00      	nop
 8081bbc:	40007000 	.word	0x40007000
 8081bc0:	20000000 	.word	0x20000000
 8081bc4:	431bde83 	.word	0x431bde83

08081bc8 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8081bc8:	b480      	push	{r7}
 8081bca:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8081bcc:	4b05      	ldr	r3, [pc, #20]	@ (8081be4 <HAL_PWREx_EnableVddIO2+0x1c>)
 8081bce:	685b      	ldr	r3, [r3, #4]
 8081bd0:	4a04      	ldr	r2, [pc, #16]	@ (8081be4 <HAL_PWREx_EnableVddIO2+0x1c>)
 8081bd2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8081bd6:	6053      	str	r3, [r2, #4]
}
 8081bd8:	bf00      	nop
 8081bda:	46bd      	mov	sp, r7
 8081bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8081be0:	4770      	bx	lr
 8081be2:	bf00      	nop
 8081be4:	40007000 	.word	0x40007000

08081be8 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8081be8:	b580      	push	{r7, lr}
 8081bea:	b088      	sub	sp, #32
 8081bec:	af00      	add	r7, sp, #0
 8081bee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8081bf0:	687b      	ldr	r3, [r7, #4]
 8081bf2:	2b00      	cmp	r3, #0
 8081bf4:	d102      	bne.n	8081bfc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8081bf6:	2301      	movs	r3, #1
 8081bf8:	f000 bc08 	b.w	808240c <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8081bfc:	4b96      	ldr	r3, [pc, #600]	@ (8081e58 <HAL_RCC_OscConfig+0x270>)
 8081bfe:	689b      	ldr	r3, [r3, #8]
 8081c00:	f003 030c 	and.w	r3, r3, #12
 8081c04:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8081c06:	4b94      	ldr	r3, [pc, #592]	@ (8081e58 <HAL_RCC_OscConfig+0x270>)
 8081c08:	68db      	ldr	r3, [r3, #12]
 8081c0a:	f003 0303 	and.w	r3, r3, #3
 8081c0e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8081c10:	687b      	ldr	r3, [r7, #4]
 8081c12:	681b      	ldr	r3, [r3, #0]
 8081c14:	f003 0310 	and.w	r3, r3, #16
 8081c18:	2b00      	cmp	r3, #0
 8081c1a:	f000 80e4 	beq.w	8081de6 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8081c1e:	69bb      	ldr	r3, [r7, #24]
 8081c20:	2b00      	cmp	r3, #0
 8081c22:	d007      	beq.n	8081c34 <HAL_RCC_OscConfig+0x4c>
 8081c24:	69bb      	ldr	r3, [r7, #24]
 8081c26:	2b0c      	cmp	r3, #12
 8081c28:	f040 808b 	bne.w	8081d42 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8081c2c:	697b      	ldr	r3, [r7, #20]
 8081c2e:	2b01      	cmp	r3, #1
 8081c30:	f040 8087 	bne.w	8081d42 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8081c34:	4b88      	ldr	r3, [pc, #544]	@ (8081e58 <HAL_RCC_OscConfig+0x270>)
 8081c36:	681b      	ldr	r3, [r3, #0]
 8081c38:	f003 0302 	and.w	r3, r3, #2
 8081c3c:	2b00      	cmp	r3, #0
 8081c3e:	d005      	beq.n	8081c4c <HAL_RCC_OscConfig+0x64>
 8081c40:	687b      	ldr	r3, [r7, #4]
 8081c42:	699b      	ldr	r3, [r3, #24]
 8081c44:	2b00      	cmp	r3, #0
 8081c46:	d101      	bne.n	8081c4c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8081c48:	2301      	movs	r3, #1
 8081c4a:	e3df      	b.n	808240c <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8081c4c:	687b      	ldr	r3, [r7, #4]
 8081c4e:	6a1a      	ldr	r2, [r3, #32]
 8081c50:	4b81      	ldr	r3, [pc, #516]	@ (8081e58 <HAL_RCC_OscConfig+0x270>)
 8081c52:	681b      	ldr	r3, [r3, #0]
 8081c54:	f003 0308 	and.w	r3, r3, #8
 8081c58:	2b00      	cmp	r3, #0
 8081c5a:	d004      	beq.n	8081c66 <HAL_RCC_OscConfig+0x7e>
 8081c5c:	4b7e      	ldr	r3, [pc, #504]	@ (8081e58 <HAL_RCC_OscConfig+0x270>)
 8081c5e:	681b      	ldr	r3, [r3, #0]
 8081c60:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8081c64:	e005      	b.n	8081c72 <HAL_RCC_OscConfig+0x8a>
 8081c66:	4b7c      	ldr	r3, [pc, #496]	@ (8081e58 <HAL_RCC_OscConfig+0x270>)
 8081c68:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8081c6c:	091b      	lsrs	r3, r3, #4
 8081c6e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8081c72:	4293      	cmp	r3, r2
 8081c74:	d223      	bcs.n	8081cbe <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8081c76:	687b      	ldr	r3, [r7, #4]
 8081c78:	6a1b      	ldr	r3, [r3, #32]
 8081c7a:	4618      	mov	r0, r3
 8081c7c:	f000 fd92 	bl	80827a4 <RCC_SetFlashLatencyFromMSIRange>
 8081c80:	4603      	mov	r3, r0
 8081c82:	2b00      	cmp	r3, #0
 8081c84:	d001      	beq.n	8081c8a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8081c86:	2301      	movs	r3, #1
 8081c88:	e3c0      	b.n	808240c <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8081c8a:	4b73      	ldr	r3, [pc, #460]	@ (8081e58 <HAL_RCC_OscConfig+0x270>)
 8081c8c:	681b      	ldr	r3, [r3, #0]
 8081c8e:	4a72      	ldr	r2, [pc, #456]	@ (8081e58 <HAL_RCC_OscConfig+0x270>)
 8081c90:	f043 0308 	orr.w	r3, r3, #8
 8081c94:	6013      	str	r3, [r2, #0]
 8081c96:	4b70      	ldr	r3, [pc, #448]	@ (8081e58 <HAL_RCC_OscConfig+0x270>)
 8081c98:	681b      	ldr	r3, [r3, #0]
 8081c9a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8081c9e:	687b      	ldr	r3, [r7, #4]
 8081ca0:	6a1b      	ldr	r3, [r3, #32]
 8081ca2:	496d      	ldr	r1, [pc, #436]	@ (8081e58 <HAL_RCC_OscConfig+0x270>)
 8081ca4:	4313      	orrs	r3, r2
 8081ca6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8081ca8:	4b6b      	ldr	r3, [pc, #428]	@ (8081e58 <HAL_RCC_OscConfig+0x270>)
 8081caa:	685b      	ldr	r3, [r3, #4]
 8081cac:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8081cb0:	687b      	ldr	r3, [r7, #4]
 8081cb2:	69db      	ldr	r3, [r3, #28]
 8081cb4:	021b      	lsls	r3, r3, #8
 8081cb6:	4968      	ldr	r1, [pc, #416]	@ (8081e58 <HAL_RCC_OscConfig+0x270>)
 8081cb8:	4313      	orrs	r3, r2
 8081cba:	604b      	str	r3, [r1, #4]
 8081cbc:	e025      	b.n	8081d0a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8081cbe:	4b66      	ldr	r3, [pc, #408]	@ (8081e58 <HAL_RCC_OscConfig+0x270>)
 8081cc0:	681b      	ldr	r3, [r3, #0]
 8081cc2:	4a65      	ldr	r2, [pc, #404]	@ (8081e58 <HAL_RCC_OscConfig+0x270>)
 8081cc4:	f043 0308 	orr.w	r3, r3, #8
 8081cc8:	6013      	str	r3, [r2, #0]
 8081cca:	4b63      	ldr	r3, [pc, #396]	@ (8081e58 <HAL_RCC_OscConfig+0x270>)
 8081ccc:	681b      	ldr	r3, [r3, #0]
 8081cce:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8081cd2:	687b      	ldr	r3, [r7, #4]
 8081cd4:	6a1b      	ldr	r3, [r3, #32]
 8081cd6:	4960      	ldr	r1, [pc, #384]	@ (8081e58 <HAL_RCC_OscConfig+0x270>)
 8081cd8:	4313      	orrs	r3, r2
 8081cda:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8081cdc:	4b5e      	ldr	r3, [pc, #376]	@ (8081e58 <HAL_RCC_OscConfig+0x270>)
 8081cde:	685b      	ldr	r3, [r3, #4]
 8081ce0:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8081ce4:	687b      	ldr	r3, [r7, #4]
 8081ce6:	69db      	ldr	r3, [r3, #28]
 8081ce8:	021b      	lsls	r3, r3, #8
 8081cea:	495b      	ldr	r1, [pc, #364]	@ (8081e58 <HAL_RCC_OscConfig+0x270>)
 8081cec:	4313      	orrs	r3, r2
 8081cee:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8081cf0:	69bb      	ldr	r3, [r7, #24]
 8081cf2:	2b00      	cmp	r3, #0
 8081cf4:	d109      	bne.n	8081d0a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8081cf6:	687b      	ldr	r3, [r7, #4]
 8081cf8:	6a1b      	ldr	r3, [r3, #32]
 8081cfa:	4618      	mov	r0, r3
 8081cfc:	f000 fd52 	bl	80827a4 <RCC_SetFlashLatencyFromMSIRange>
 8081d00:	4603      	mov	r3, r0
 8081d02:	2b00      	cmp	r3, #0
 8081d04:	d001      	beq.n	8081d0a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8081d06:	2301      	movs	r3, #1
 8081d08:	e380      	b.n	808240c <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8081d0a:	f000 fc87 	bl	808261c <HAL_RCC_GetSysClockFreq>
 8081d0e:	4602      	mov	r2, r0
 8081d10:	4b51      	ldr	r3, [pc, #324]	@ (8081e58 <HAL_RCC_OscConfig+0x270>)
 8081d12:	689b      	ldr	r3, [r3, #8]
 8081d14:	091b      	lsrs	r3, r3, #4
 8081d16:	f003 030f 	and.w	r3, r3, #15
 8081d1a:	4950      	ldr	r1, [pc, #320]	@ (8081e5c <HAL_RCC_OscConfig+0x274>)
 8081d1c:	5ccb      	ldrb	r3, [r1, r3]
 8081d1e:	f003 031f 	and.w	r3, r3, #31
 8081d22:	fa22 f303 	lsr.w	r3, r2, r3
 8081d26:	4a4e      	ldr	r2, [pc, #312]	@ (8081e60 <HAL_RCC_OscConfig+0x278>)
 8081d28:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8081d2a:	4b4e      	ldr	r3, [pc, #312]	@ (8081e64 <HAL_RCC_OscConfig+0x27c>)
 8081d2c:	681b      	ldr	r3, [r3, #0]
 8081d2e:	4618      	mov	r0, r3
 8081d30:	f7ff f836 	bl	8080da0 <HAL_InitTick>
 8081d34:	4603      	mov	r3, r0
 8081d36:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8081d38:	7bfb      	ldrb	r3, [r7, #15]
 8081d3a:	2b00      	cmp	r3, #0
 8081d3c:	d052      	beq.n	8081de4 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8081d3e:	7bfb      	ldrb	r3, [r7, #15]
 8081d40:	e364      	b.n	808240c <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8081d42:	687b      	ldr	r3, [r7, #4]
 8081d44:	699b      	ldr	r3, [r3, #24]
 8081d46:	2b00      	cmp	r3, #0
 8081d48:	d032      	beq.n	8081db0 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8081d4a:	4b43      	ldr	r3, [pc, #268]	@ (8081e58 <HAL_RCC_OscConfig+0x270>)
 8081d4c:	681b      	ldr	r3, [r3, #0]
 8081d4e:	4a42      	ldr	r2, [pc, #264]	@ (8081e58 <HAL_RCC_OscConfig+0x270>)
 8081d50:	f043 0301 	orr.w	r3, r3, #1
 8081d54:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8081d56:	f7ff f873 	bl	8080e40 <HAL_GetTick>
 8081d5a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8081d5c:	e008      	b.n	8081d70 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8081d5e:	f7ff f86f 	bl	8080e40 <HAL_GetTick>
 8081d62:	4602      	mov	r2, r0
 8081d64:	693b      	ldr	r3, [r7, #16]
 8081d66:	1ad3      	subs	r3, r2, r3
 8081d68:	2b02      	cmp	r3, #2
 8081d6a:	d901      	bls.n	8081d70 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8081d6c:	2303      	movs	r3, #3
 8081d6e:	e34d      	b.n	808240c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8081d70:	4b39      	ldr	r3, [pc, #228]	@ (8081e58 <HAL_RCC_OscConfig+0x270>)
 8081d72:	681b      	ldr	r3, [r3, #0]
 8081d74:	f003 0302 	and.w	r3, r3, #2
 8081d78:	2b00      	cmp	r3, #0
 8081d7a:	d0f0      	beq.n	8081d5e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8081d7c:	4b36      	ldr	r3, [pc, #216]	@ (8081e58 <HAL_RCC_OscConfig+0x270>)
 8081d7e:	681b      	ldr	r3, [r3, #0]
 8081d80:	4a35      	ldr	r2, [pc, #212]	@ (8081e58 <HAL_RCC_OscConfig+0x270>)
 8081d82:	f043 0308 	orr.w	r3, r3, #8
 8081d86:	6013      	str	r3, [r2, #0]
 8081d88:	4b33      	ldr	r3, [pc, #204]	@ (8081e58 <HAL_RCC_OscConfig+0x270>)
 8081d8a:	681b      	ldr	r3, [r3, #0]
 8081d8c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8081d90:	687b      	ldr	r3, [r7, #4]
 8081d92:	6a1b      	ldr	r3, [r3, #32]
 8081d94:	4930      	ldr	r1, [pc, #192]	@ (8081e58 <HAL_RCC_OscConfig+0x270>)
 8081d96:	4313      	orrs	r3, r2
 8081d98:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8081d9a:	4b2f      	ldr	r3, [pc, #188]	@ (8081e58 <HAL_RCC_OscConfig+0x270>)
 8081d9c:	685b      	ldr	r3, [r3, #4]
 8081d9e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8081da2:	687b      	ldr	r3, [r7, #4]
 8081da4:	69db      	ldr	r3, [r3, #28]
 8081da6:	021b      	lsls	r3, r3, #8
 8081da8:	492b      	ldr	r1, [pc, #172]	@ (8081e58 <HAL_RCC_OscConfig+0x270>)
 8081daa:	4313      	orrs	r3, r2
 8081dac:	604b      	str	r3, [r1, #4]
 8081dae:	e01a      	b.n	8081de6 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8081db0:	4b29      	ldr	r3, [pc, #164]	@ (8081e58 <HAL_RCC_OscConfig+0x270>)
 8081db2:	681b      	ldr	r3, [r3, #0]
 8081db4:	4a28      	ldr	r2, [pc, #160]	@ (8081e58 <HAL_RCC_OscConfig+0x270>)
 8081db6:	f023 0301 	bic.w	r3, r3, #1
 8081dba:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8081dbc:	f7ff f840 	bl	8080e40 <HAL_GetTick>
 8081dc0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8081dc2:	e008      	b.n	8081dd6 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8081dc4:	f7ff f83c 	bl	8080e40 <HAL_GetTick>
 8081dc8:	4602      	mov	r2, r0
 8081dca:	693b      	ldr	r3, [r7, #16]
 8081dcc:	1ad3      	subs	r3, r2, r3
 8081dce:	2b02      	cmp	r3, #2
 8081dd0:	d901      	bls.n	8081dd6 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8081dd2:	2303      	movs	r3, #3
 8081dd4:	e31a      	b.n	808240c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8081dd6:	4b20      	ldr	r3, [pc, #128]	@ (8081e58 <HAL_RCC_OscConfig+0x270>)
 8081dd8:	681b      	ldr	r3, [r3, #0]
 8081dda:	f003 0302 	and.w	r3, r3, #2
 8081dde:	2b00      	cmp	r3, #0
 8081de0:	d1f0      	bne.n	8081dc4 <HAL_RCC_OscConfig+0x1dc>
 8081de2:	e000      	b.n	8081de6 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8081de4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8081de6:	687b      	ldr	r3, [r7, #4]
 8081de8:	681b      	ldr	r3, [r3, #0]
 8081dea:	f003 0301 	and.w	r3, r3, #1
 8081dee:	2b00      	cmp	r3, #0
 8081df0:	d073      	beq.n	8081eda <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8081df2:	69bb      	ldr	r3, [r7, #24]
 8081df4:	2b08      	cmp	r3, #8
 8081df6:	d005      	beq.n	8081e04 <HAL_RCC_OscConfig+0x21c>
 8081df8:	69bb      	ldr	r3, [r7, #24]
 8081dfa:	2b0c      	cmp	r3, #12
 8081dfc:	d10e      	bne.n	8081e1c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8081dfe:	697b      	ldr	r3, [r7, #20]
 8081e00:	2b03      	cmp	r3, #3
 8081e02:	d10b      	bne.n	8081e1c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8081e04:	4b14      	ldr	r3, [pc, #80]	@ (8081e58 <HAL_RCC_OscConfig+0x270>)
 8081e06:	681b      	ldr	r3, [r3, #0]
 8081e08:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8081e0c:	2b00      	cmp	r3, #0
 8081e0e:	d063      	beq.n	8081ed8 <HAL_RCC_OscConfig+0x2f0>
 8081e10:	687b      	ldr	r3, [r7, #4]
 8081e12:	685b      	ldr	r3, [r3, #4]
 8081e14:	2b00      	cmp	r3, #0
 8081e16:	d15f      	bne.n	8081ed8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8081e18:	2301      	movs	r3, #1
 8081e1a:	e2f7      	b.n	808240c <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8081e1c:	687b      	ldr	r3, [r7, #4]
 8081e1e:	685b      	ldr	r3, [r3, #4]
 8081e20:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8081e24:	d106      	bne.n	8081e34 <HAL_RCC_OscConfig+0x24c>
 8081e26:	4b0c      	ldr	r3, [pc, #48]	@ (8081e58 <HAL_RCC_OscConfig+0x270>)
 8081e28:	681b      	ldr	r3, [r3, #0]
 8081e2a:	4a0b      	ldr	r2, [pc, #44]	@ (8081e58 <HAL_RCC_OscConfig+0x270>)
 8081e2c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8081e30:	6013      	str	r3, [r2, #0]
 8081e32:	e025      	b.n	8081e80 <HAL_RCC_OscConfig+0x298>
 8081e34:	687b      	ldr	r3, [r7, #4]
 8081e36:	685b      	ldr	r3, [r3, #4]
 8081e38:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8081e3c:	d114      	bne.n	8081e68 <HAL_RCC_OscConfig+0x280>
 8081e3e:	4b06      	ldr	r3, [pc, #24]	@ (8081e58 <HAL_RCC_OscConfig+0x270>)
 8081e40:	681b      	ldr	r3, [r3, #0]
 8081e42:	4a05      	ldr	r2, [pc, #20]	@ (8081e58 <HAL_RCC_OscConfig+0x270>)
 8081e44:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8081e48:	6013      	str	r3, [r2, #0]
 8081e4a:	4b03      	ldr	r3, [pc, #12]	@ (8081e58 <HAL_RCC_OscConfig+0x270>)
 8081e4c:	681b      	ldr	r3, [r3, #0]
 8081e4e:	4a02      	ldr	r2, [pc, #8]	@ (8081e58 <HAL_RCC_OscConfig+0x270>)
 8081e50:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8081e54:	6013      	str	r3, [r2, #0]
 8081e56:	e013      	b.n	8081e80 <HAL_RCC_OscConfig+0x298>
 8081e58:	40021000 	.word	0x40021000
 8081e5c:	080848d4 	.word	0x080848d4
 8081e60:	20000000 	.word	0x20000000
 8081e64:	20000004 	.word	0x20000004
 8081e68:	4ba0      	ldr	r3, [pc, #640]	@ (80820ec <HAL_RCC_OscConfig+0x504>)
 8081e6a:	681b      	ldr	r3, [r3, #0]
 8081e6c:	4a9f      	ldr	r2, [pc, #636]	@ (80820ec <HAL_RCC_OscConfig+0x504>)
 8081e6e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8081e72:	6013      	str	r3, [r2, #0]
 8081e74:	4b9d      	ldr	r3, [pc, #628]	@ (80820ec <HAL_RCC_OscConfig+0x504>)
 8081e76:	681b      	ldr	r3, [r3, #0]
 8081e78:	4a9c      	ldr	r2, [pc, #624]	@ (80820ec <HAL_RCC_OscConfig+0x504>)
 8081e7a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8081e7e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8081e80:	687b      	ldr	r3, [r7, #4]
 8081e82:	685b      	ldr	r3, [r3, #4]
 8081e84:	2b00      	cmp	r3, #0
 8081e86:	d013      	beq.n	8081eb0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8081e88:	f7fe ffda 	bl	8080e40 <HAL_GetTick>
 8081e8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8081e8e:	e008      	b.n	8081ea2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8081e90:	f7fe ffd6 	bl	8080e40 <HAL_GetTick>
 8081e94:	4602      	mov	r2, r0
 8081e96:	693b      	ldr	r3, [r7, #16]
 8081e98:	1ad3      	subs	r3, r2, r3
 8081e9a:	2b64      	cmp	r3, #100	@ 0x64
 8081e9c:	d901      	bls.n	8081ea2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8081e9e:	2303      	movs	r3, #3
 8081ea0:	e2b4      	b.n	808240c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8081ea2:	4b92      	ldr	r3, [pc, #584]	@ (80820ec <HAL_RCC_OscConfig+0x504>)
 8081ea4:	681b      	ldr	r3, [r3, #0]
 8081ea6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8081eaa:	2b00      	cmp	r3, #0
 8081eac:	d0f0      	beq.n	8081e90 <HAL_RCC_OscConfig+0x2a8>
 8081eae:	e014      	b.n	8081eda <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8081eb0:	f7fe ffc6 	bl	8080e40 <HAL_GetTick>
 8081eb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8081eb6:	e008      	b.n	8081eca <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8081eb8:	f7fe ffc2 	bl	8080e40 <HAL_GetTick>
 8081ebc:	4602      	mov	r2, r0
 8081ebe:	693b      	ldr	r3, [r7, #16]
 8081ec0:	1ad3      	subs	r3, r2, r3
 8081ec2:	2b64      	cmp	r3, #100	@ 0x64
 8081ec4:	d901      	bls.n	8081eca <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8081ec6:	2303      	movs	r3, #3
 8081ec8:	e2a0      	b.n	808240c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8081eca:	4b88      	ldr	r3, [pc, #544]	@ (80820ec <HAL_RCC_OscConfig+0x504>)
 8081ecc:	681b      	ldr	r3, [r3, #0]
 8081ece:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8081ed2:	2b00      	cmp	r3, #0
 8081ed4:	d1f0      	bne.n	8081eb8 <HAL_RCC_OscConfig+0x2d0>
 8081ed6:	e000      	b.n	8081eda <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8081ed8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8081eda:	687b      	ldr	r3, [r7, #4]
 8081edc:	681b      	ldr	r3, [r3, #0]
 8081ede:	f003 0302 	and.w	r3, r3, #2
 8081ee2:	2b00      	cmp	r3, #0
 8081ee4:	d060      	beq.n	8081fa8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8081ee6:	69bb      	ldr	r3, [r7, #24]
 8081ee8:	2b04      	cmp	r3, #4
 8081eea:	d005      	beq.n	8081ef8 <HAL_RCC_OscConfig+0x310>
 8081eec:	69bb      	ldr	r3, [r7, #24]
 8081eee:	2b0c      	cmp	r3, #12
 8081ef0:	d119      	bne.n	8081f26 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8081ef2:	697b      	ldr	r3, [r7, #20]
 8081ef4:	2b02      	cmp	r3, #2
 8081ef6:	d116      	bne.n	8081f26 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8081ef8:	4b7c      	ldr	r3, [pc, #496]	@ (80820ec <HAL_RCC_OscConfig+0x504>)
 8081efa:	681b      	ldr	r3, [r3, #0]
 8081efc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8081f00:	2b00      	cmp	r3, #0
 8081f02:	d005      	beq.n	8081f10 <HAL_RCC_OscConfig+0x328>
 8081f04:	687b      	ldr	r3, [r7, #4]
 8081f06:	68db      	ldr	r3, [r3, #12]
 8081f08:	2b00      	cmp	r3, #0
 8081f0a:	d101      	bne.n	8081f10 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8081f0c:	2301      	movs	r3, #1
 8081f0e:	e27d      	b.n	808240c <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8081f10:	4b76      	ldr	r3, [pc, #472]	@ (80820ec <HAL_RCC_OscConfig+0x504>)
 8081f12:	685b      	ldr	r3, [r3, #4]
 8081f14:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8081f18:	687b      	ldr	r3, [r7, #4]
 8081f1a:	691b      	ldr	r3, [r3, #16]
 8081f1c:	061b      	lsls	r3, r3, #24
 8081f1e:	4973      	ldr	r1, [pc, #460]	@ (80820ec <HAL_RCC_OscConfig+0x504>)
 8081f20:	4313      	orrs	r3, r2
 8081f22:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8081f24:	e040      	b.n	8081fa8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8081f26:	687b      	ldr	r3, [r7, #4]
 8081f28:	68db      	ldr	r3, [r3, #12]
 8081f2a:	2b00      	cmp	r3, #0
 8081f2c:	d023      	beq.n	8081f76 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8081f2e:	4b6f      	ldr	r3, [pc, #444]	@ (80820ec <HAL_RCC_OscConfig+0x504>)
 8081f30:	681b      	ldr	r3, [r3, #0]
 8081f32:	4a6e      	ldr	r2, [pc, #440]	@ (80820ec <HAL_RCC_OscConfig+0x504>)
 8081f34:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8081f38:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8081f3a:	f7fe ff81 	bl	8080e40 <HAL_GetTick>
 8081f3e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8081f40:	e008      	b.n	8081f54 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8081f42:	f7fe ff7d 	bl	8080e40 <HAL_GetTick>
 8081f46:	4602      	mov	r2, r0
 8081f48:	693b      	ldr	r3, [r7, #16]
 8081f4a:	1ad3      	subs	r3, r2, r3
 8081f4c:	2b02      	cmp	r3, #2
 8081f4e:	d901      	bls.n	8081f54 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8081f50:	2303      	movs	r3, #3
 8081f52:	e25b      	b.n	808240c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8081f54:	4b65      	ldr	r3, [pc, #404]	@ (80820ec <HAL_RCC_OscConfig+0x504>)
 8081f56:	681b      	ldr	r3, [r3, #0]
 8081f58:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8081f5c:	2b00      	cmp	r3, #0
 8081f5e:	d0f0      	beq.n	8081f42 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8081f60:	4b62      	ldr	r3, [pc, #392]	@ (80820ec <HAL_RCC_OscConfig+0x504>)
 8081f62:	685b      	ldr	r3, [r3, #4]
 8081f64:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8081f68:	687b      	ldr	r3, [r7, #4]
 8081f6a:	691b      	ldr	r3, [r3, #16]
 8081f6c:	061b      	lsls	r3, r3, #24
 8081f6e:	495f      	ldr	r1, [pc, #380]	@ (80820ec <HAL_RCC_OscConfig+0x504>)
 8081f70:	4313      	orrs	r3, r2
 8081f72:	604b      	str	r3, [r1, #4]
 8081f74:	e018      	b.n	8081fa8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8081f76:	4b5d      	ldr	r3, [pc, #372]	@ (80820ec <HAL_RCC_OscConfig+0x504>)
 8081f78:	681b      	ldr	r3, [r3, #0]
 8081f7a:	4a5c      	ldr	r2, [pc, #368]	@ (80820ec <HAL_RCC_OscConfig+0x504>)
 8081f7c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8081f80:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8081f82:	f7fe ff5d 	bl	8080e40 <HAL_GetTick>
 8081f86:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8081f88:	e008      	b.n	8081f9c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8081f8a:	f7fe ff59 	bl	8080e40 <HAL_GetTick>
 8081f8e:	4602      	mov	r2, r0
 8081f90:	693b      	ldr	r3, [r7, #16]
 8081f92:	1ad3      	subs	r3, r2, r3
 8081f94:	2b02      	cmp	r3, #2
 8081f96:	d901      	bls.n	8081f9c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8081f98:	2303      	movs	r3, #3
 8081f9a:	e237      	b.n	808240c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8081f9c:	4b53      	ldr	r3, [pc, #332]	@ (80820ec <HAL_RCC_OscConfig+0x504>)
 8081f9e:	681b      	ldr	r3, [r3, #0]
 8081fa0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8081fa4:	2b00      	cmp	r3, #0
 8081fa6:	d1f0      	bne.n	8081f8a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8081fa8:	687b      	ldr	r3, [r7, #4]
 8081faa:	681b      	ldr	r3, [r3, #0]
 8081fac:	f003 0308 	and.w	r3, r3, #8
 8081fb0:	2b00      	cmp	r3, #0
 8081fb2:	d03c      	beq.n	808202e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8081fb4:	687b      	ldr	r3, [r7, #4]
 8081fb6:	695b      	ldr	r3, [r3, #20]
 8081fb8:	2b00      	cmp	r3, #0
 8081fba:	d01c      	beq.n	8081ff6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8081fbc:	4b4b      	ldr	r3, [pc, #300]	@ (80820ec <HAL_RCC_OscConfig+0x504>)
 8081fbe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8081fc2:	4a4a      	ldr	r2, [pc, #296]	@ (80820ec <HAL_RCC_OscConfig+0x504>)
 8081fc4:	f043 0301 	orr.w	r3, r3, #1
 8081fc8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8081fcc:	f7fe ff38 	bl	8080e40 <HAL_GetTick>
 8081fd0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8081fd2:	e008      	b.n	8081fe6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8081fd4:	f7fe ff34 	bl	8080e40 <HAL_GetTick>
 8081fd8:	4602      	mov	r2, r0
 8081fda:	693b      	ldr	r3, [r7, #16]
 8081fdc:	1ad3      	subs	r3, r2, r3
 8081fde:	2b02      	cmp	r3, #2
 8081fe0:	d901      	bls.n	8081fe6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8081fe2:	2303      	movs	r3, #3
 8081fe4:	e212      	b.n	808240c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8081fe6:	4b41      	ldr	r3, [pc, #260]	@ (80820ec <HAL_RCC_OscConfig+0x504>)
 8081fe8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8081fec:	f003 0302 	and.w	r3, r3, #2
 8081ff0:	2b00      	cmp	r3, #0
 8081ff2:	d0ef      	beq.n	8081fd4 <HAL_RCC_OscConfig+0x3ec>
 8081ff4:	e01b      	b.n	808202e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8081ff6:	4b3d      	ldr	r3, [pc, #244]	@ (80820ec <HAL_RCC_OscConfig+0x504>)
 8081ff8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8081ffc:	4a3b      	ldr	r2, [pc, #236]	@ (80820ec <HAL_RCC_OscConfig+0x504>)
 8081ffe:	f023 0301 	bic.w	r3, r3, #1
 8082002:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8082006:	f7fe ff1b 	bl	8080e40 <HAL_GetTick>
 808200a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 808200c:	e008      	b.n	8082020 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 808200e:	f7fe ff17 	bl	8080e40 <HAL_GetTick>
 8082012:	4602      	mov	r2, r0
 8082014:	693b      	ldr	r3, [r7, #16]
 8082016:	1ad3      	subs	r3, r2, r3
 8082018:	2b02      	cmp	r3, #2
 808201a:	d901      	bls.n	8082020 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 808201c:	2303      	movs	r3, #3
 808201e:	e1f5      	b.n	808240c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8082020:	4b32      	ldr	r3, [pc, #200]	@ (80820ec <HAL_RCC_OscConfig+0x504>)
 8082022:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8082026:	f003 0302 	and.w	r3, r3, #2
 808202a:	2b00      	cmp	r3, #0
 808202c:	d1ef      	bne.n	808200e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 808202e:	687b      	ldr	r3, [r7, #4]
 8082030:	681b      	ldr	r3, [r3, #0]
 8082032:	f003 0304 	and.w	r3, r3, #4
 8082036:	2b00      	cmp	r3, #0
 8082038:	f000 80a6 	beq.w	8082188 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 808203c:	2300      	movs	r3, #0
 808203e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8082040:	4b2a      	ldr	r3, [pc, #168]	@ (80820ec <HAL_RCC_OscConfig+0x504>)
 8082042:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8082044:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8082048:	2b00      	cmp	r3, #0
 808204a:	d10d      	bne.n	8082068 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 808204c:	4b27      	ldr	r3, [pc, #156]	@ (80820ec <HAL_RCC_OscConfig+0x504>)
 808204e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8082050:	4a26      	ldr	r2, [pc, #152]	@ (80820ec <HAL_RCC_OscConfig+0x504>)
 8082052:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8082056:	6593      	str	r3, [r2, #88]	@ 0x58
 8082058:	4b24      	ldr	r3, [pc, #144]	@ (80820ec <HAL_RCC_OscConfig+0x504>)
 808205a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 808205c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8082060:	60bb      	str	r3, [r7, #8]
 8082062:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8082064:	2301      	movs	r3, #1
 8082066:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8082068:	4b21      	ldr	r3, [pc, #132]	@ (80820f0 <HAL_RCC_OscConfig+0x508>)
 808206a:	681b      	ldr	r3, [r3, #0]
 808206c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8082070:	2b00      	cmp	r3, #0
 8082072:	d118      	bne.n	80820a6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8082074:	4b1e      	ldr	r3, [pc, #120]	@ (80820f0 <HAL_RCC_OscConfig+0x508>)
 8082076:	681b      	ldr	r3, [r3, #0]
 8082078:	4a1d      	ldr	r2, [pc, #116]	@ (80820f0 <HAL_RCC_OscConfig+0x508>)
 808207a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 808207e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8082080:	f7fe fede 	bl	8080e40 <HAL_GetTick>
 8082084:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8082086:	e008      	b.n	808209a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8082088:	f7fe feda 	bl	8080e40 <HAL_GetTick>
 808208c:	4602      	mov	r2, r0
 808208e:	693b      	ldr	r3, [r7, #16]
 8082090:	1ad3      	subs	r3, r2, r3
 8082092:	2b02      	cmp	r3, #2
 8082094:	d901      	bls.n	808209a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8082096:	2303      	movs	r3, #3
 8082098:	e1b8      	b.n	808240c <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 808209a:	4b15      	ldr	r3, [pc, #84]	@ (80820f0 <HAL_RCC_OscConfig+0x508>)
 808209c:	681b      	ldr	r3, [r3, #0]
 808209e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80820a2:	2b00      	cmp	r3, #0
 80820a4:	d0f0      	beq.n	8082088 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80820a6:	687b      	ldr	r3, [r7, #4]
 80820a8:	689b      	ldr	r3, [r3, #8]
 80820aa:	2b01      	cmp	r3, #1
 80820ac:	d108      	bne.n	80820c0 <HAL_RCC_OscConfig+0x4d8>
 80820ae:	4b0f      	ldr	r3, [pc, #60]	@ (80820ec <HAL_RCC_OscConfig+0x504>)
 80820b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80820b4:	4a0d      	ldr	r2, [pc, #52]	@ (80820ec <HAL_RCC_OscConfig+0x504>)
 80820b6:	f043 0301 	orr.w	r3, r3, #1
 80820ba:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80820be:	e029      	b.n	8082114 <HAL_RCC_OscConfig+0x52c>
 80820c0:	687b      	ldr	r3, [r7, #4]
 80820c2:	689b      	ldr	r3, [r3, #8]
 80820c4:	2b05      	cmp	r3, #5
 80820c6:	d115      	bne.n	80820f4 <HAL_RCC_OscConfig+0x50c>
 80820c8:	4b08      	ldr	r3, [pc, #32]	@ (80820ec <HAL_RCC_OscConfig+0x504>)
 80820ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80820ce:	4a07      	ldr	r2, [pc, #28]	@ (80820ec <HAL_RCC_OscConfig+0x504>)
 80820d0:	f043 0304 	orr.w	r3, r3, #4
 80820d4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80820d8:	4b04      	ldr	r3, [pc, #16]	@ (80820ec <HAL_RCC_OscConfig+0x504>)
 80820da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80820de:	4a03      	ldr	r2, [pc, #12]	@ (80820ec <HAL_RCC_OscConfig+0x504>)
 80820e0:	f043 0301 	orr.w	r3, r3, #1
 80820e4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80820e8:	e014      	b.n	8082114 <HAL_RCC_OscConfig+0x52c>
 80820ea:	bf00      	nop
 80820ec:	40021000 	.word	0x40021000
 80820f0:	40007000 	.word	0x40007000
 80820f4:	4b9d      	ldr	r3, [pc, #628]	@ (808236c <HAL_RCC_OscConfig+0x784>)
 80820f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80820fa:	4a9c      	ldr	r2, [pc, #624]	@ (808236c <HAL_RCC_OscConfig+0x784>)
 80820fc:	f023 0301 	bic.w	r3, r3, #1
 8082100:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8082104:	4b99      	ldr	r3, [pc, #612]	@ (808236c <HAL_RCC_OscConfig+0x784>)
 8082106:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 808210a:	4a98      	ldr	r2, [pc, #608]	@ (808236c <HAL_RCC_OscConfig+0x784>)
 808210c:	f023 0304 	bic.w	r3, r3, #4
 8082110:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8082114:	687b      	ldr	r3, [r7, #4]
 8082116:	689b      	ldr	r3, [r3, #8]
 8082118:	2b00      	cmp	r3, #0
 808211a:	d016      	beq.n	808214a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 808211c:	f7fe fe90 	bl	8080e40 <HAL_GetTick>
 8082120:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8082122:	e00a      	b.n	808213a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8082124:	f7fe fe8c 	bl	8080e40 <HAL_GetTick>
 8082128:	4602      	mov	r2, r0
 808212a:	693b      	ldr	r3, [r7, #16]
 808212c:	1ad3      	subs	r3, r2, r3
 808212e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8082132:	4293      	cmp	r3, r2
 8082134:	d901      	bls.n	808213a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8082136:	2303      	movs	r3, #3
 8082138:	e168      	b.n	808240c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 808213a:	4b8c      	ldr	r3, [pc, #560]	@ (808236c <HAL_RCC_OscConfig+0x784>)
 808213c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8082140:	f003 0302 	and.w	r3, r3, #2
 8082144:	2b00      	cmp	r3, #0
 8082146:	d0ed      	beq.n	8082124 <HAL_RCC_OscConfig+0x53c>
 8082148:	e015      	b.n	8082176 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 808214a:	f7fe fe79 	bl	8080e40 <HAL_GetTick>
 808214e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8082150:	e00a      	b.n	8082168 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8082152:	f7fe fe75 	bl	8080e40 <HAL_GetTick>
 8082156:	4602      	mov	r2, r0
 8082158:	693b      	ldr	r3, [r7, #16]
 808215a:	1ad3      	subs	r3, r2, r3
 808215c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8082160:	4293      	cmp	r3, r2
 8082162:	d901      	bls.n	8082168 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8082164:	2303      	movs	r3, #3
 8082166:	e151      	b.n	808240c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8082168:	4b80      	ldr	r3, [pc, #512]	@ (808236c <HAL_RCC_OscConfig+0x784>)
 808216a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 808216e:	f003 0302 	and.w	r3, r3, #2
 8082172:	2b00      	cmp	r3, #0
 8082174:	d1ed      	bne.n	8082152 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8082176:	7ffb      	ldrb	r3, [r7, #31]
 8082178:	2b01      	cmp	r3, #1
 808217a:	d105      	bne.n	8082188 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 808217c:	4b7b      	ldr	r3, [pc, #492]	@ (808236c <HAL_RCC_OscConfig+0x784>)
 808217e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8082180:	4a7a      	ldr	r2, [pc, #488]	@ (808236c <HAL_RCC_OscConfig+0x784>)
 8082182:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8082186:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8082188:	687b      	ldr	r3, [r7, #4]
 808218a:	681b      	ldr	r3, [r3, #0]
 808218c:	f003 0320 	and.w	r3, r3, #32
 8082190:	2b00      	cmp	r3, #0
 8082192:	d03c      	beq.n	808220e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8082194:	687b      	ldr	r3, [r7, #4]
 8082196:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8082198:	2b00      	cmp	r3, #0
 808219a:	d01c      	beq.n	80821d6 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 808219c:	4b73      	ldr	r3, [pc, #460]	@ (808236c <HAL_RCC_OscConfig+0x784>)
 808219e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80821a2:	4a72      	ldr	r2, [pc, #456]	@ (808236c <HAL_RCC_OscConfig+0x784>)
 80821a4:	f043 0301 	orr.w	r3, r3, #1
 80821a8:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80821ac:	f7fe fe48 	bl	8080e40 <HAL_GetTick>
 80821b0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80821b2:	e008      	b.n	80821c6 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80821b4:	f7fe fe44 	bl	8080e40 <HAL_GetTick>
 80821b8:	4602      	mov	r2, r0
 80821ba:	693b      	ldr	r3, [r7, #16]
 80821bc:	1ad3      	subs	r3, r2, r3
 80821be:	2b02      	cmp	r3, #2
 80821c0:	d901      	bls.n	80821c6 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80821c2:	2303      	movs	r3, #3
 80821c4:	e122      	b.n	808240c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80821c6:	4b69      	ldr	r3, [pc, #420]	@ (808236c <HAL_RCC_OscConfig+0x784>)
 80821c8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80821cc:	f003 0302 	and.w	r3, r3, #2
 80821d0:	2b00      	cmp	r3, #0
 80821d2:	d0ef      	beq.n	80821b4 <HAL_RCC_OscConfig+0x5cc>
 80821d4:	e01b      	b.n	808220e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80821d6:	4b65      	ldr	r3, [pc, #404]	@ (808236c <HAL_RCC_OscConfig+0x784>)
 80821d8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80821dc:	4a63      	ldr	r2, [pc, #396]	@ (808236c <HAL_RCC_OscConfig+0x784>)
 80821de:	f023 0301 	bic.w	r3, r3, #1
 80821e2:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80821e6:	f7fe fe2b 	bl	8080e40 <HAL_GetTick>
 80821ea:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80821ec:	e008      	b.n	8082200 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80821ee:	f7fe fe27 	bl	8080e40 <HAL_GetTick>
 80821f2:	4602      	mov	r2, r0
 80821f4:	693b      	ldr	r3, [r7, #16]
 80821f6:	1ad3      	subs	r3, r2, r3
 80821f8:	2b02      	cmp	r3, #2
 80821fa:	d901      	bls.n	8082200 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80821fc:	2303      	movs	r3, #3
 80821fe:	e105      	b.n	808240c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8082200:	4b5a      	ldr	r3, [pc, #360]	@ (808236c <HAL_RCC_OscConfig+0x784>)
 8082202:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8082206:	f003 0302 	and.w	r3, r3, #2
 808220a:	2b00      	cmp	r3, #0
 808220c:	d1ef      	bne.n	80821ee <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 808220e:	687b      	ldr	r3, [r7, #4]
 8082210:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8082212:	2b00      	cmp	r3, #0
 8082214:	f000 80f9 	beq.w	808240a <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8082218:	687b      	ldr	r3, [r7, #4]
 808221a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 808221c:	2b02      	cmp	r3, #2
 808221e:	f040 80cf 	bne.w	80823c0 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8082222:	4b52      	ldr	r3, [pc, #328]	@ (808236c <HAL_RCC_OscConfig+0x784>)
 8082224:	68db      	ldr	r3, [r3, #12]
 8082226:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8082228:	697b      	ldr	r3, [r7, #20]
 808222a:	f003 0203 	and.w	r2, r3, #3
 808222e:	687b      	ldr	r3, [r7, #4]
 8082230:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8082232:	429a      	cmp	r2, r3
 8082234:	d12c      	bne.n	8082290 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8082236:	697b      	ldr	r3, [r7, #20]
 8082238:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 808223c:	687b      	ldr	r3, [r7, #4]
 808223e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8082240:	3b01      	subs	r3, #1
 8082242:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8082244:	429a      	cmp	r2, r3
 8082246:	d123      	bne.n	8082290 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8082248:	697b      	ldr	r3, [r7, #20]
 808224a:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 808224e:	687b      	ldr	r3, [r7, #4]
 8082250:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8082252:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8082254:	429a      	cmp	r2, r3
 8082256:	d11b      	bne.n	8082290 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8082258:	697b      	ldr	r3, [r7, #20]
 808225a:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 808225e:	687b      	ldr	r3, [r7, #4]
 8082260:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8082262:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8082264:	429a      	cmp	r2, r3
 8082266:	d113      	bne.n	8082290 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8082268:	697b      	ldr	r3, [r7, #20]
 808226a:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 808226e:	687b      	ldr	r3, [r7, #4]
 8082270:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8082272:	085b      	lsrs	r3, r3, #1
 8082274:	3b01      	subs	r3, #1
 8082276:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8082278:	429a      	cmp	r2, r3
 808227a:	d109      	bne.n	8082290 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 808227c:	697b      	ldr	r3, [r7, #20]
 808227e:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8082282:	687b      	ldr	r3, [r7, #4]
 8082284:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8082286:	085b      	lsrs	r3, r3, #1
 8082288:	3b01      	subs	r3, #1
 808228a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 808228c:	429a      	cmp	r2, r3
 808228e:	d071      	beq.n	8082374 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8082290:	69bb      	ldr	r3, [r7, #24]
 8082292:	2b0c      	cmp	r3, #12
 8082294:	d068      	beq.n	8082368 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8082296:	4b35      	ldr	r3, [pc, #212]	@ (808236c <HAL_RCC_OscConfig+0x784>)
 8082298:	681b      	ldr	r3, [r3, #0]
 808229a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 808229e:	2b00      	cmp	r3, #0
 80822a0:	d105      	bne.n	80822ae <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80822a2:	4b32      	ldr	r3, [pc, #200]	@ (808236c <HAL_RCC_OscConfig+0x784>)
 80822a4:	681b      	ldr	r3, [r3, #0]
 80822a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80822aa:	2b00      	cmp	r3, #0
 80822ac:	d001      	beq.n	80822b2 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 80822ae:	2301      	movs	r3, #1
 80822b0:	e0ac      	b.n	808240c <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80822b2:	4b2e      	ldr	r3, [pc, #184]	@ (808236c <HAL_RCC_OscConfig+0x784>)
 80822b4:	681b      	ldr	r3, [r3, #0]
 80822b6:	4a2d      	ldr	r2, [pc, #180]	@ (808236c <HAL_RCC_OscConfig+0x784>)
 80822b8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80822bc:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80822be:	f7fe fdbf 	bl	8080e40 <HAL_GetTick>
 80822c2:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80822c4:	e008      	b.n	80822d8 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80822c6:	f7fe fdbb 	bl	8080e40 <HAL_GetTick>
 80822ca:	4602      	mov	r2, r0
 80822cc:	693b      	ldr	r3, [r7, #16]
 80822ce:	1ad3      	subs	r3, r2, r3
 80822d0:	2b02      	cmp	r3, #2
 80822d2:	d901      	bls.n	80822d8 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 80822d4:	2303      	movs	r3, #3
 80822d6:	e099      	b.n	808240c <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80822d8:	4b24      	ldr	r3, [pc, #144]	@ (808236c <HAL_RCC_OscConfig+0x784>)
 80822da:	681b      	ldr	r3, [r3, #0]
 80822dc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80822e0:	2b00      	cmp	r3, #0
 80822e2:	d1f0      	bne.n	80822c6 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80822e4:	4b21      	ldr	r3, [pc, #132]	@ (808236c <HAL_RCC_OscConfig+0x784>)
 80822e6:	68da      	ldr	r2, [r3, #12]
 80822e8:	4b21      	ldr	r3, [pc, #132]	@ (8082370 <HAL_RCC_OscConfig+0x788>)
 80822ea:	4013      	ands	r3, r2
 80822ec:	687a      	ldr	r2, [r7, #4]
 80822ee:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80822f0:	687a      	ldr	r2, [r7, #4]
 80822f2:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80822f4:	3a01      	subs	r2, #1
 80822f6:	0112      	lsls	r2, r2, #4
 80822f8:	4311      	orrs	r1, r2
 80822fa:	687a      	ldr	r2, [r7, #4]
 80822fc:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80822fe:	0212      	lsls	r2, r2, #8
 8082300:	4311      	orrs	r1, r2
 8082302:	687a      	ldr	r2, [r7, #4]
 8082304:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8082306:	0852      	lsrs	r2, r2, #1
 8082308:	3a01      	subs	r2, #1
 808230a:	0552      	lsls	r2, r2, #21
 808230c:	4311      	orrs	r1, r2
 808230e:	687a      	ldr	r2, [r7, #4]
 8082310:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8082312:	0852      	lsrs	r2, r2, #1
 8082314:	3a01      	subs	r2, #1
 8082316:	0652      	lsls	r2, r2, #25
 8082318:	4311      	orrs	r1, r2
 808231a:	687a      	ldr	r2, [r7, #4]
 808231c:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 808231e:	06d2      	lsls	r2, r2, #27
 8082320:	430a      	orrs	r2, r1
 8082322:	4912      	ldr	r1, [pc, #72]	@ (808236c <HAL_RCC_OscConfig+0x784>)
 8082324:	4313      	orrs	r3, r2
 8082326:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8082328:	4b10      	ldr	r3, [pc, #64]	@ (808236c <HAL_RCC_OscConfig+0x784>)
 808232a:	681b      	ldr	r3, [r3, #0]
 808232c:	4a0f      	ldr	r2, [pc, #60]	@ (808236c <HAL_RCC_OscConfig+0x784>)
 808232e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8082332:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8082334:	4b0d      	ldr	r3, [pc, #52]	@ (808236c <HAL_RCC_OscConfig+0x784>)
 8082336:	68db      	ldr	r3, [r3, #12]
 8082338:	4a0c      	ldr	r2, [pc, #48]	@ (808236c <HAL_RCC_OscConfig+0x784>)
 808233a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 808233e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8082340:	f7fe fd7e 	bl	8080e40 <HAL_GetTick>
 8082344:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8082346:	e008      	b.n	808235a <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8082348:	f7fe fd7a 	bl	8080e40 <HAL_GetTick>
 808234c:	4602      	mov	r2, r0
 808234e:	693b      	ldr	r3, [r7, #16]
 8082350:	1ad3      	subs	r3, r2, r3
 8082352:	2b02      	cmp	r3, #2
 8082354:	d901      	bls.n	808235a <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8082356:	2303      	movs	r3, #3
 8082358:	e058      	b.n	808240c <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 808235a:	4b04      	ldr	r3, [pc, #16]	@ (808236c <HAL_RCC_OscConfig+0x784>)
 808235c:	681b      	ldr	r3, [r3, #0]
 808235e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8082362:	2b00      	cmp	r3, #0
 8082364:	d0f0      	beq.n	8082348 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8082366:	e050      	b.n	808240a <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8082368:	2301      	movs	r3, #1
 808236a:	e04f      	b.n	808240c <HAL_RCC_OscConfig+0x824>
 808236c:	40021000 	.word	0x40021000
 8082370:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8082374:	4b27      	ldr	r3, [pc, #156]	@ (8082414 <HAL_RCC_OscConfig+0x82c>)
 8082376:	681b      	ldr	r3, [r3, #0]
 8082378:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 808237c:	2b00      	cmp	r3, #0
 808237e:	d144      	bne.n	808240a <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8082380:	4b24      	ldr	r3, [pc, #144]	@ (8082414 <HAL_RCC_OscConfig+0x82c>)
 8082382:	681b      	ldr	r3, [r3, #0]
 8082384:	4a23      	ldr	r2, [pc, #140]	@ (8082414 <HAL_RCC_OscConfig+0x82c>)
 8082386:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 808238a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 808238c:	4b21      	ldr	r3, [pc, #132]	@ (8082414 <HAL_RCC_OscConfig+0x82c>)
 808238e:	68db      	ldr	r3, [r3, #12]
 8082390:	4a20      	ldr	r2, [pc, #128]	@ (8082414 <HAL_RCC_OscConfig+0x82c>)
 8082392:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8082396:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8082398:	f7fe fd52 	bl	8080e40 <HAL_GetTick>
 808239c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 808239e:	e008      	b.n	80823b2 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80823a0:	f7fe fd4e 	bl	8080e40 <HAL_GetTick>
 80823a4:	4602      	mov	r2, r0
 80823a6:	693b      	ldr	r3, [r7, #16]
 80823a8:	1ad3      	subs	r3, r2, r3
 80823aa:	2b02      	cmp	r3, #2
 80823ac:	d901      	bls.n	80823b2 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 80823ae:	2303      	movs	r3, #3
 80823b0:	e02c      	b.n	808240c <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80823b2:	4b18      	ldr	r3, [pc, #96]	@ (8082414 <HAL_RCC_OscConfig+0x82c>)
 80823b4:	681b      	ldr	r3, [r3, #0]
 80823b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80823ba:	2b00      	cmp	r3, #0
 80823bc:	d0f0      	beq.n	80823a0 <HAL_RCC_OscConfig+0x7b8>
 80823be:	e024      	b.n	808240a <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80823c0:	69bb      	ldr	r3, [r7, #24]
 80823c2:	2b0c      	cmp	r3, #12
 80823c4:	d01f      	beq.n	8082406 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80823c6:	4b13      	ldr	r3, [pc, #76]	@ (8082414 <HAL_RCC_OscConfig+0x82c>)
 80823c8:	681b      	ldr	r3, [r3, #0]
 80823ca:	4a12      	ldr	r2, [pc, #72]	@ (8082414 <HAL_RCC_OscConfig+0x82c>)
 80823cc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80823d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80823d2:	f7fe fd35 	bl	8080e40 <HAL_GetTick>
 80823d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80823d8:	e008      	b.n	80823ec <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80823da:	f7fe fd31 	bl	8080e40 <HAL_GetTick>
 80823de:	4602      	mov	r2, r0
 80823e0:	693b      	ldr	r3, [r7, #16]
 80823e2:	1ad3      	subs	r3, r2, r3
 80823e4:	2b02      	cmp	r3, #2
 80823e6:	d901      	bls.n	80823ec <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 80823e8:	2303      	movs	r3, #3
 80823ea:	e00f      	b.n	808240c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80823ec:	4b09      	ldr	r3, [pc, #36]	@ (8082414 <HAL_RCC_OscConfig+0x82c>)
 80823ee:	681b      	ldr	r3, [r3, #0]
 80823f0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80823f4:	2b00      	cmp	r3, #0
 80823f6:	d1f0      	bne.n	80823da <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80823f8:	4b06      	ldr	r3, [pc, #24]	@ (8082414 <HAL_RCC_OscConfig+0x82c>)
 80823fa:	68da      	ldr	r2, [r3, #12]
 80823fc:	4905      	ldr	r1, [pc, #20]	@ (8082414 <HAL_RCC_OscConfig+0x82c>)
 80823fe:	4b06      	ldr	r3, [pc, #24]	@ (8082418 <HAL_RCC_OscConfig+0x830>)
 8082400:	4013      	ands	r3, r2
 8082402:	60cb      	str	r3, [r1, #12]
 8082404:	e001      	b.n	808240a <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8082406:	2301      	movs	r3, #1
 8082408:	e000      	b.n	808240c <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 808240a:	2300      	movs	r3, #0
}
 808240c:	4618      	mov	r0, r3
 808240e:	3720      	adds	r7, #32
 8082410:	46bd      	mov	sp, r7
 8082412:	bd80      	pop	{r7, pc}
 8082414:	40021000 	.word	0x40021000
 8082418:	feeefffc 	.word	0xfeeefffc

0808241c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 808241c:	b580      	push	{r7, lr}
 808241e:	b084      	sub	sp, #16
 8082420:	af00      	add	r7, sp, #0
 8082422:	6078      	str	r0, [r7, #4]
 8082424:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8082426:	687b      	ldr	r3, [r7, #4]
 8082428:	2b00      	cmp	r3, #0
 808242a:	d101      	bne.n	8082430 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 808242c:	2301      	movs	r3, #1
 808242e:	e0e7      	b.n	8082600 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8082430:	4b75      	ldr	r3, [pc, #468]	@ (8082608 <HAL_RCC_ClockConfig+0x1ec>)
 8082432:	681b      	ldr	r3, [r3, #0]
 8082434:	f003 0307 	and.w	r3, r3, #7
 8082438:	683a      	ldr	r2, [r7, #0]
 808243a:	429a      	cmp	r2, r3
 808243c:	d910      	bls.n	8082460 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 808243e:	4b72      	ldr	r3, [pc, #456]	@ (8082608 <HAL_RCC_ClockConfig+0x1ec>)
 8082440:	681b      	ldr	r3, [r3, #0]
 8082442:	f023 0207 	bic.w	r2, r3, #7
 8082446:	4970      	ldr	r1, [pc, #448]	@ (8082608 <HAL_RCC_ClockConfig+0x1ec>)
 8082448:	683b      	ldr	r3, [r7, #0]
 808244a:	4313      	orrs	r3, r2
 808244c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 808244e:	4b6e      	ldr	r3, [pc, #440]	@ (8082608 <HAL_RCC_ClockConfig+0x1ec>)
 8082450:	681b      	ldr	r3, [r3, #0]
 8082452:	f003 0307 	and.w	r3, r3, #7
 8082456:	683a      	ldr	r2, [r7, #0]
 8082458:	429a      	cmp	r2, r3
 808245a:	d001      	beq.n	8082460 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 808245c:	2301      	movs	r3, #1
 808245e:	e0cf      	b.n	8082600 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8082460:	687b      	ldr	r3, [r7, #4]
 8082462:	681b      	ldr	r3, [r3, #0]
 8082464:	f003 0302 	and.w	r3, r3, #2
 8082468:	2b00      	cmp	r3, #0
 808246a:	d010      	beq.n	808248e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 808246c:	687b      	ldr	r3, [r7, #4]
 808246e:	689a      	ldr	r2, [r3, #8]
 8082470:	4b66      	ldr	r3, [pc, #408]	@ (808260c <HAL_RCC_ClockConfig+0x1f0>)
 8082472:	689b      	ldr	r3, [r3, #8]
 8082474:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8082478:	429a      	cmp	r2, r3
 808247a:	d908      	bls.n	808248e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 808247c:	4b63      	ldr	r3, [pc, #396]	@ (808260c <HAL_RCC_ClockConfig+0x1f0>)
 808247e:	689b      	ldr	r3, [r3, #8]
 8082480:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8082484:	687b      	ldr	r3, [r7, #4]
 8082486:	689b      	ldr	r3, [r3, #8]
 8082488:	4960      	ldr	r1, [pc, #384]	@ (808260c <HAL_RCC_ClockConfig+0x1f0>)
 808248a:	4313      	orrs	r3, r2
 808248c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 808248e:	687b      	ldr	r3, [r7, #4]
 8082490:	681b      	ldr	r3, [r3, #0]
 8082492:	f003 0301 	and.w	r3, r3, #1
 8082496:	2b00      	cmp	r3, #0
 8082498:	d04c      	beq.n	8082534 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 808249a:	687b      	ldr	r3, [r7, #4]
 808249c:	685b      	ldr	r3, [r3, #4]
 808249e:	2b03      	cmp	r3, #3
 80824a0:	d107      	bne.n	80824b2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80824a2:	4b5a      	ldr	r3, [pc, #360]	@ (808260c <HAL_RCC_ClockConfig+0x1f0>)
 80824a4:	681b      	ldr	r3, [r3, #0]
 80824a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80824aa:	2b00      	cmp	r3, #0
 80824ac:	d121      	bne.n	80824f2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80824ae:	2301      	movs	r3, #1
 80824b0:	e0a6      	b.n	8082600 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80824b2:	687b      	ldr	r3, [r7, #4]
 80824b4:	685b      	ldr	r3, [r3, #4]
 80824b6:	2b02      	cmp	r3, #2
 80824b8:	d107      	bne.n	80824ca <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80824ba:	4b54      	ldr	r3, [pc, #336]	@ (808260c <HAL_RCC_ClockConfig+0x1f0>)
 80824bc:	681b      	ldr	r3, [r3, #0]
 80824be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80824c2:	2b00      	cmp	r3, #0
 80824c4:	d115      	bne.n	80824f2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80824c6:	2301      	movs	r3, #1
 80824c8:	e09a      	b.n	8082600 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80824ca:	687b      	ldr	r3, [r7, #4]
 80824cc:	685b      	ldr	r3, [r3, #4]
 80824ce:	2b00      	cmp	r3, #0
 80824d0:	d107      	bne.n	80824e2 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80824d2:	4b4e      	ldr	r3, [pc, #312]	@ (808260c <HAL_RCC_ClockConfig+0x1f0>)
 80824d4:	681b      	ldr	r3, [r3, #0]
 80824d6:	f003 0302 	and.w	r3, r3, #2
 80824da:	2b00      	cmp	r3, #0
 80824dc:	d109      	bne.n	80824f2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80824de:	2301      	movs	r3, #1
 80824e0:	e08e      	b.n	8082600 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80824e2:	4b4a      	ldr	r3, [pc, #296]	@ (808260c <HAL_RCC_ClockConfig+0x1f0>)
 80824e4:	681b      	ldr	r3, [r3, #0]
 80824e6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80824ea:	2b00      	cmp	r3, #0
 80824ec:	d101      	bne.n	80824f2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80824ee:	2301      	movs	r3, #1
 80824f0:	e086      	b.n	8082600 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80824f2:	4b46      	ldr	r3, [pc, #280]	@ (808260c <HAL_RCC_ClockConfig+0x1f0>)
 80824f4:	689b      	ldr	r3, [r3, #8]
 80824f6:	f023 0203 	bic.w	r2, r3, #3
 80824fa:	687b      	ldr	r3, [r7, #4]
 80824fc:	685b      	ldr	r3, [r3, #4]
 80824fe:	4943      	ldr	r1, [pc, #268]	@ (808260c <HAL_RCC_ClockConfig+0x1f0>)
 8082500:	4313      	orrs	r3, r2
 8082502:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8082504:	f7fe fc9c 	bl	8080e40 <HAL_GetTick>
 8082508:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 808250a:	e00a      	b.n	8082522 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 808250c:	f7fe fc98 	bl	8080e40 <HAL_GetTick>
 8082510:	4602      	mov	r2, r0
 8082512:	68fb      	ldr	r3, [r7, #12]
 8082514:	1ad3      	subs	r3, r2, r3
 8082516:	f241 3288 	movw	r2, #5000	@ 0x1388
 808251a:	4293      	cmp	r3, r2
 808251c:	d901      	bls.n	8082522 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 808251e:	2303      	movs	r3, #3
 8082520:	e06e      	b.n	8082600 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8082522:	4b3a      	ldr	r3, [pc, #232]	@ (808260c <HAL_RCC_ClockConfig+0x1f0>)
 8082524:	689b      	ldr	r3, [r3, #8]
 8082526:	f003 020c 	and.w	r2, r3, #12
 808252a:	687b      	ldr	r3, [r7, #4]
 808252c:	685b      	ldr	r3, [r3, #4]
 808252e:	009b      	lsls	r3, r3, #2
 8082530:	429a      	cmp	r2, r3
 8082532:	d1eb      	bne.n	808250c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8082534:	687b      	ldr	r3, [r7, #4]
 8082536:	681b      	ldr	r3, [r3, #0]
 8082538:	f003 0302 	and.w	r3, r3, #2
 808253c:	2b00      	cmp	r3, #0
 808253e:	d010      	beq.n	8082562 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8082540:	687b      	ldr	r3, [r7, #4]
 8082542:	689a      	ldr	r2, [r3, #8]
 8082544:	4b31      	ldr	r3, [pc, #196]	@ (808260c <HAL_RCC_ClockConfig+0x1f0>)
 8082546:	689b      	ldr	r3, [r3, #8]
 8082548:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 808254c:	429a      	cmp	r2, r3
 808254e:	d208      	bcs.n	8082562 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8082550:	4b2e      	ldr	r3, [pc, #184]	@ (808260c <HAL_RCC_ClockConfig+0x1f0>)
 8082552:	689b      	ldr	r3, [r3, #8]
 8082554:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8082558:	687b      	ldr	r3, [r7, #4]
 808255a:	689b      	ldr	r3, [r3, #8]
 808255c:	492b      	ldr	r1, [pc, #172]	@ (808260c <HAL_RCC_ClockConfig+0x1f0>)
 808255e:	4313      	orrs	r3, r2
 8082560:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8082562:	4b29      	ldr	r3, [pc, #164]	@ (8082608 <HAL_RCC_ClockConfig+0x1ec>)
 8082564:	681b      	ldr	r3, [r3, #0]
 8082566:	f003 0307 	and.w	r3, r3, #7
 808256a:	683a      	ldr	r2, [r7, #0]
 808256c:	429a      	cmp	r2, r3
 808256e:	d210      	bcs.n	8082592 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8082570:	4b25      	ldr	r3, [pc, #148]	@ (8082608 <HAL_RCC_ClockConfig+0x1ec>)
 8082572:	681b      	ldr	r3, [r3, #0]
 8082574:	f023 0207 	bic.w	r2, r3, #7
 8082578:	4923      	ldr	r1, [pc, #140]	@ (8082608 <HAL_RCC_ClockConfig+0x1ec>)
 808257a:	683b      	ldr	r3, [r7, #0]
 808257c:	4313      	orrs	r3, r2
 808257e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8082580:	4b21      	ldr	r3, [pc, #132]	@ (8082608 <HAL_RCC_ClockConfig+0x1ec>)
 8082582:	681b      	ldr	r3, [r3, #0]
 8082584:	f003 0307 	and.w	r3, r3, #7
 8082588:	683a      	ldr	r2, [r7, #0]
 808258a:	429a      	cmp	r2, r3
 808258c:	d001      	beq.n	8082592 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 808258e:	2301      	movs	r3, #1
 8082590:	e036      	b.n	8082600 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8082592:	687b      	ldr	r3, [r7, #4]
 8082594:	681b      	ldr	r3, [r3, #0]
 8082596:	f003 0304 	and.w	r3, r3, #4
 808259a:	2b00      	cmp	r3, #0
 808259c:	d008      	beq.n	80825b0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 808259e:	4b1b      	ldr	r3, [pc, #108]	@ (808260c <HAL_RCC_ClockConfig+0x1f0>)
 80825a0:	689b      	ldr	r3, [r3, #8]
 80825a2:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80825a6:	687b      	ldr	r3, [r7, #4]
 80825a8:	68db      	ldr	r3, [r3, #12]
 80825aa:	4918      	ldr	r1, [pc, #96]	@ (808260c <HAL_RCC_ClockConfig+0x1f0>)
 80825ac:	4313      	orrs	r3, r2
 80825ae:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80825b0:	687b      	ldr	r3, [r7, #4]
 80825b2:	681b      	ldr	r3, [r3, #0]
 80825b4:	f003 0308 	and.w	r3, r3, #8
 80825b8:	2b00      	cmp	r3, #0
 80825ba:	d009      	beq.n	80825d0 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80825bc:	4b13      	ldr	r3, [pc, #76]	@ (808260c <HAL_RCC_ClockConfig+0x1f0>)
 80825be:	689b      	ldr	r3, [r3, #8]
 80825c0:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80825c4:	687b      	ldr	r3, [r7, #4]
 80825c6:	691b      	ldr	r3, [r3, #16]
 80825c8:	00db      	lsls	r3, r3, #3
 80825ca:	4910      	ldr	r1, [pc, #64]	@ (808260c <HAL_RCC_ClockConfig+0x1f0>)
 80825cc:	4313      	orrs	r3, r2
 80825ce:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80825d0:	f000 f824 	bl	808261c <HAL_RCC_GetSysClockFreq>
 80825d4:	4602      	mov	r2, r0
 80825d6:	4b0d      	ldr	r3, [pc, #52]	@ (808260c <HAL_RCC_ClockConfig+0x1f0>)
 80825d8:	689b      	ldr	r3, [r3, #8]
 80825da:	091b      	lsrs	r3, r3, #4
 80825dc:	f003 030f 	and.w	r3, r3, #15
 80825e0:	490b      	ldr	r1, [pc, #44]	@ (8082610 <HAL_RCC_ClockConfig+0x1f4>)
 80825e2:	5ccb      	ldrb	r3, [r1, r3]
 80825e4:	f003 031f 	and.w	r3, r3, #31
 80825e8:	fa22 f303 	lsr.w	r3, r2, r3
 80825ec:	4a09      	ldr	r2, [pc, #36]	@ (8082614 <HAL_RCC_ClockConfig+0x1f8>)
 80825ee:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80825f0:	4b09      	ldr	r3, [pc, #36]	@ (8082618 <HAL_RCC_ClockConfig+0x1fc>)
 80825f2:	681b      	ldr	r3, [r3, #0]
 80825f4:	4618      	mov	r0, r3
 80825f6:	f7fe fbd3 	bl	8080da0 <HAL_InitTick>
 80825fa:	4603      	mov	r3, r0
 80825fc:	72fb      	strb	r3, [r7, #11]

  return status;
 80825fe:	7afb      	ldrb	r3, [r7, #11]
}
 8082600:	4618      	mov	r0, r3
 8082602:	3710      	adds	r7, #16
 8082604:	46bd      	mov	sp, r7
 8082606:	bd80      	pop	{r7, pc}
 8082608:	40022000 	.word	0x40022000
 808260c:	40021000 	.word	0x40021000
 8082610:	080848d4 	.word	0x080848d4
 8082614:	20000000 	.word	0x20000000
 8082618:	20000004 	.word	0x20000004

0808261c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 808261c:	b480      	push	{r7}
 808261e:	b089      	sub	sp, #36	@ 0x24
 8082620:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8082622:	2300      	movs	r3, #0
 8082624:	61fb      	str	r3, [r7, #28]
 8082626:	2300      	movs	r3, #0
 8082628:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 808262a:	4b3e      	ldr	r3, [pc, #248]	@ (8082724 <HAL_RCC_GetSysClockFreq+0x108>)
 808262c:	689b      	ldr	r3, [r3, #8]
 808262e:	f003 030c 	and.w	r3, r3, #12
 8082632:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8082634:	4b3b      	ldr	r3, [pc, #236]	@ (8082724 <HAL_RCC_GetSysClockFreq+0x108>)
 8082636:	68db      	ldr	r3, [r3, #12]
 8082638:	f003 0303 	and.w	r3, r3, #3
 808263c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 808263e:	693b      	ldr	r3, [r7, #16]
 8082640:	2b00      	cmp	r3, #0
 8082642:	d005      	beq.n	8082650 <HAL_RCC_GetSysClockFreq+0x34>
 8082644:	693b      	ldr	r3, [r7, #16]
 8082646:	2b0c      	cmp	r3, #12
 8082648:	d121      	bne.n	808268e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 808264a:	68fb      	ldr	r3, [r7, #12]
 808264c:	2b01      	cmp	r3, #1
 808264e:	d11e      	bne.n	808268e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8082650:	4b34      	ldr	r3, [pc, #208]	@ (8082724 <HAL_RCC_GetSysClockFreq+0x108>)
 8082652:	681b      	ldr	r3, [r3, #0]
 8082654:	f003 0308 	and.w	r3, r3, #8
 8082658:	2b00      	cmp	r3, #0
 808265a:	d107      	bne.n	808266c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 808265c:	4b31      	ldr	r3, [pc, #196]	@ (8082724 <HAL_RCC_GetSysClockFreq+0x108>)
 808265e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8082662:	0a1b      	lsrs	r3, r3, #8
 8082664:	f003 030f 	and.w	r3, r3, #15
 8082668:	61fb      	str	r3, [r7, #28]
 808266a:	e005      	b.n	8082678 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 808266c:	4b2d      	ldr	r3, [pc, #180]	@ (8082724 <HAL_RCC_GetSysClockFreq+0x108>)
 808266e:	681b      	ldr	r3, [r3, #0]
 8082670:	091b      	lsrs	r3, r3, #4
 8082672:	f003 030f 	and.w	r3, r3, #15
 8082676:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8082678:	4a2b      	ldr	r2, [pc, #172]	@ (8082728 <HAL_RCC_GetSysClockFreq+0x10c>)
 808267a:	69fb      	ldr	r3, [r7, #28]
 808267c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8082680:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8082682:	693b      	ldr	r3, [r7, #16]
 8082684:	2b00      	cmp	r3, #0
 8082686:	d10d      	bne.n	80826a4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8082688:	69fb      	ldr	r3, [r7, #28]
 808268a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 808268c:	e00a      	b.n	80826a4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 808268e:	693b      	ldr	r3, [r7, #16]
 8082690:	2b04      	cmp	r3, #4
 8082692:	d102      	bne.n	808269a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8082694:	4b25      	ldr	r3, [pc, #148]	@ (808272c <HAL_RCC_GetSysClockFreq+0x110>)
 8082696:	61bb      	str	r3, [r7, #24]
 8082698:	e004      	b.n	80826a4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 808269a:	693b      	ldr	r3, [r7, #16]
 808269c:	2b08      	cmp	r3, #8
 808269e:	d101      	bne.n	80826a4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80826a0:	4b23      	ldr	r3, [pc, #140]	@ (8082730 <HAL_RCC_GetSysClockFreq+0x114>)
 80826a2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80826a4:	693b      	ldr	r3, [r7, #16]
 80826a6:	2b0c      	cmp	r3, #12
 80826a8:	d134      	bne.n	8082714 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80826aa:	4b1e      	ldr	r3, [pc, #120]	@ (8082724 <HAL_RCC_GetSysClockFreq+0x108>)
 80826ac:	68db      	ldr	r3, [r3, #12]
 80826ae:	f003 0303 	and.w	r3, r3, #3
 80826b2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80826b4:	68bb      	ldr	r3, [r7, #8]
 80826b6:	2b02      	cmp	r3, #2
 80826b8:	d003      	beq.n	80826c2 <HAL_RCC_GetSysClockFreq+0xa6>
 80826ba:	68bb      	ldr	r3, [r7, #8]
 80826bc:	2b03      	cmp	r3, #3
 80826be:	d003      	beq.n	80826c8 <HAL_RCC_GetSysClockFreq+0xac>
 80826c0:	e005      	b.n	80826ce <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80826c2:	4b1a      	ldr	r3, [pc, #104]	@ (808272c <HAL_RCC_GetSysClockFreq+0x110>)
 80826c4:	617b      	str	r3, [r7, #20]
      break;
 80826c6:	e005      	b.n	80826d4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80826c8:	4b19      	ldr	r3, [pc, #100]	@ (8082730 <HAL_RCC_GetSysClockFreq+0x114>)
 80826ca:	617b      	str	r3, [r7, #20]
      break;
 80826cc:	e002      	b.n	80826d4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80826ce:	69fb      	ldr	r3, [r7, #28]
 80826d0:	617b      	str	r3, [r7, #20]
      break;
 80826d2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80826d4:	4b13      	ldr	r3, [pc, #76]	@ (8082724 <HAL_RCC_GetSysClockFreq+0x108>)
 80826d6:	68db      	ldr	r3, [r3, #12]
 80826d8:	091b      	lsrs	r3, r3, #4
 80826da:	f003 0307 	and.w	r3, r3, #7
 80826de:	3301      	adds	r3, #1
 80826e0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80826e2:	4b10      	ldr	r3, [pc, #64]	@ (8082724 <HAL_RCC_GetSysClockFreq+0x108>)
 80826e4:	68db      	ldr	r3, [r3, #12]
 80826e6:	0a1b      	lsrs	r3, r3, #8
 80826e8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80826ec:	697a      	ldr	r2, [r7, #20]
 80826ee:	fb03 f202 	mul.w	r2, r3, r2
 80826f2:	687b      	ldr	r3, [r7, #4]
 80826f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80826f8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80826fa:	4b0a      	ldr	r3, [pc, #40]	@ (8082724 <HAL_RCC_GetSysClockFreq+0x108>)
 80826fc:	68db      	ldr	r3, [r3, #12]
 80826fe:	0e5b      	lsrs	r3, r3, #25
 8082700:	f003 0303 	and.w	r3, r3, #3
 8082704:	3301      	adds	r3, #1
 8082706:	005b      	lsls	r3, r3, #1
 8082708:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 808270a:	697a      	ldr	r2, [r7, #20]
 808270c:	683b      	ldr	r3, [r7, #0]
 808270e:	fbb2 f3f3 	udiv	r3, r2, r3
 8082712:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8082714:	69bb      	ldr	r3, [r7, #24]
}
 8082716:	4618      	mov	r0, r3
 8082718:	3724      	adds	r7, #36	@ 0x24
 808271a:	46bd      	mov	sp, r7
 808271c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8082720:	4770      	bx	lr
 8082722:	bf00      	nop
 8082724:	40021000 	.word	0x40021000
 8082728:	080848ec 	.word	0x080848ec
 808272c:	00f42400 	.word	0x00f42400
 8082730:	007a1200 	.word	0x007a1200

08082734 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8082734:	b480      	push	{r7}
 8082736:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8082738:	4b03      	ldr	r3, [pc, #12]	@ (8082748 <HAL_RCC_GetHCLKFreq+0x14>)
 808273a:	681b      	ldr	r3, [r3, #0]
}
 808273c:	4618      	mov	r0, r3
 808273e:	46bd      	mov	sp, r7
 8082740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8082744:	4770      	bx	lr
 8082746:	bf00      	nop
 8082748:	20000000 	.word	0x20000000

0808274c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 808274c:	b580      	push	{r7, lr}
 808274e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8082750:	f7ff fff0 	bl	8082734 <HAL_RCC_GetHCLKFreq>
 8082754:	4602      	mov	r2, r0
 8082756:	4b06      	ldr	r3, [pc, #24]	@ (8082770 <HAL_RCC_GetPCLK1Freq+0x24>)
 8082758:	689b      	ldr	r3, [r3, #8]
 808275a:	0a1b      	lsrs	r3, r3, #8
 808275c:	f003 0307 	and.w	r3, r3, #7
 8082760:	4904      	ldr	r1, [pc, #16]	@ (8082774 <HAL_RCC_GetPCLK1Freq+0x28>)
 8082762:	5ccb      	ldrb	r3, [r1, r3]
 8082764:	f003 031f 	and.w	r3, r3, #31
 8082768:	fa22 f303 	lsr.w	r3, r2, r3
}
 808276c:	4618      	mov	r0, r3
 808276e:	bd80      	pop	{r7, pc}
 8082770:	40021000 	.word	0x40021000
 8082774:	080848e4 	.word	0x080848e4

08082778 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8082778:	b580      	push	{r7, lr}
 808277a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 808277c:	f7ff ffda 	bl	8082734 <HAL_RCC_GetHCLKFreq>
 8082780:	4602      	mov	r2, r0
 8082782:	4b06      	ldr	r3, [pc, #24]	@ (808279c <HAL_RCC_GetPCLK2Freq+0x24>)
 8082784:	689b      	ldr	r3, [r3, #8]
 8082786:	0adb      	lsrs	r3, r3, #11
 8082788:	f003 0307 	and.w	r3, r3, #7
 808278c:	4904      	ldr	r1, [pc, #16]	@ (80827a0 <HAL_RCC_GetPCLK2Freq+0x28>)
 808278e:	5ccb      	ldrb	r3, [r1, r3]
 8082790:	f003 031f 	and.w	r3, r3, #31
 8082794:	fa22 f303 	lsr.w	r3, r2, r3
}
 8082798:	4618      	mov	r0, r3
 808279a:	bd80      	pop	{r7, pc}
 808279c:	40021000 	.word	0x40021000
 80827a0:	080848e4 	.word	0x080848e4

080827a4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80827a4:	b580      	push	{r7, lr}
 80827a6:	b086      	sub	sp, #24
 80827a8:	af00      	add	r7, sp, #0
 80827aa:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80827ac:	2300      	movs	r3, #0
 80827ae:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80827b0:	4b2a      	ldr	r3, [pc, #168]	@ (808285c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80827b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80827b4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80827b8:	2b00      	cmp	r3, #0
 80827ba:	d003      	beq.n	80827c4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80827bc:	f7ff f9a0 	bl	8081b00 <HAL_PWREx_GetVoltageRange>
 80827c0:	6178      	str	r0, [r7, #20]
 80827c2:	e014      	b.n	80827ee <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80827c4:	4b25      	ldr	r3, [pc, #148]	@ (808285c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80827c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80827c8:	4a24      	ldr	r2, [pc, #144]	@ (808285c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80827ca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80827ce:	6593      	str	r3, [r2, #88]	@ 0x58
 80827d0:	4b22      	ldr	r3, [pc, #136]	@ (808285c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80827d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80827d4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80827d8:	60fb      	str	r3, [r7, #12]
 80827da:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80827dc:	f7ff f990 	bl	8081b00 <HAL_PWREx_GetVoltageRange>
 80827e0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80827e2:	4b1e      	ldr	r3, [pc, #120]	@ (808285c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80827e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80827e6:	4a1d      	ldr	r2, [pc, #116]	@ (808285c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80827e8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80827ec:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80827ee:	697b      	ldr	r3, [r7, #20]
 80827f0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80827f4:	d10b      	bne.n	808280e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80827f6:	687b      	ldr	r3, [r7, #4]
 80827f8:	2b80      	cmp	r3, #128	@ 0x80
 80827fa:	d919      	bls.n	8082830 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80827fc:	687b      	ldr	r3, [r7, #4]
 80827fe:	2ba0      	cmp	r3, #160	@ 0xa0
 8082800:	d902      	bls.n	8082808 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8082802:	2302      	movs	r3, #2
 8082804:	613b      	str	r3, [r7, #16]
 8082806:	e013      	b.n	8082830 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8082808:	2301      	movs	r3, #1
 808280a:	613b      	str	r3, [r7, #16]
 808280c:	e010      	b.n	8082830 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 808280e:	687b      	ldr	r3, [r7, #4]
 8082810:	2b80      	cmp	r3, #128	@ 0x80
 8082812:	d902      	bls.n	808281a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8082814:	2303      	movs	r3, #3
 8082816:	613b      	str	r3, [r7, #16]
 8082818:	e00a      	b.n	8082830 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 808281a:	687b      	ldr	r3, [r7, #4]
 808281c:	2b80      	cmp	r3, #128	@ 0x80
 808281e:	d102      	bne.n	8082826 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8082820:	2302      	movs	r3, #2
 8082822:	613b      	str	r3, [r7, #16]
 8082824:	e004      	b.n	8082830 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8082826:	687b      	ldr	r3, [r7, #4]
 8082828:	2b70      	cmp	r3, #112	@ 0x70
 808282a:	d101      	bne.n	8082830 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 808282c:	2301      	movs	r3, #1
 808282e:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8082830:	4b0b      	ldr	r3, [pc, #44]	@ (8082860 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8082832:	681b      	ldr	r3, [r3, #0]
 8082834:	f023 0207 	bic.w	r2, r3, #7
 8082838:	4909      	ldr	r1, [pc, #36]	@ (8082860 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 808283a:	693b      	ldr	r3, [r7, #16]
 808283c:	4313      	orrs	r3, r2
 808283e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8082840:	4b07      	ldr	r3, [pc, #28]	@ (8082860 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8082842:	681b      	ldr	r3, [r3, #0]
 8082844:	f003 0307 	and.w	r3, r3, #7
 8082848:	693a      	ldr	r2, [r7, #16]
 808284a:	429a      	cmp	r2, r3
 808284c:	d001      	beq.n	8082852 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 808284e:	2301      	movs	r3, #1
 8082850:	e000      	b.n	8082854 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8082852:	2300      	movs	r3, #0
}
 8082854:	4618      	mov	r0, r3
 8082856:	3718      	adds	r7, #24
 8082858:	46bd      	mov	sp, r7
 808285a:	bd80      	pop	{r7, pc}
 808285c:	40021000 	.word	0x40021000
 8082860:	40022000 	.word	0x40022000

08082864 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8082864:	b580      	push	{r7, lr}
 8082866:	b086      	sub	sp, #24
 8082868:	af00      	add	r7, sp, #0
 808286a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 808286c:	2300      	movs	r3, #0
 808286e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8082870:	2300      	movs	r3, #0
 8082872:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8082874:	687b      	ldr	r3, [r7, #4]
 8082876:	681b      	ldr	r3, [r3, #0]
 8082878:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 808287c:	2b00      	cmp	r3, #0
 808287e:	d041      	beq.n	8082904 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8082880:	687b      	ldr	r3, [r7, #4]
 8082882:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8082884:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8082888:	d02a      	beq.n	80828e0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 808288a:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 808288e:	d824      	bhi.n	80828da <HAL_RCCEx_PeriphCLKConfig+0x76>
 8082890:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8082894:	d008      	beq.n	80828a8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8082896:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 808289a:	d81e      	bhi.n	80828da <HAL_RCCEx_PeriphCLKConfig+0x76>
 808289c:	2b00      	cmp	r3, #0
 808289e:	d00a      	beq.n	80828b6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80828a0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80828a4:	d010      	beq.n	80828c8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80828a6:	e018      	b.n	80828da <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80828a8:	4b86      	ldr	r3, [pc, #536]	@ (8082ac4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80828aa:	68db      	ldr	r3, [r3, #12]
 80828ac:	4a85      	ldr	r2, [pc, #532]	@ (8082ac4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80828ae:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80828b2:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80828b4:	e015      	b.n	80828e2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80828b6:	687b      	ldr	r3, [r7, #4]
 80828b8:	3304      	adds	r3, #4
 80828ba:	2100      	movs	r1, #0
 80828bc:	4618      	mov	r0, r3
 80828be:	f000 facd 	bl	8082e5c <RCCEx_PLLSAI1_Config>
 80828c2:	4603      	mov	r3, r0
 80828c4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80828c6:	e00c      	b.n	80828e2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80828c8:	687b      	ldr	r3, [r7, #4]
 80828ca:	3320      	adds	r3, #32
 80828cc:	2100      	movs	r1, #0
 80828ce:	4618      	mov	r0, r3
 80828d0:	f000 fbb6 	bl	8083040 <RCCEx_PLLSAI2_Config>
 80828d4:	4603      	mov	r3, r0
 80828d6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80828d8:	e003      	b.n	80828e2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80828da:	2301      	movs	r3, #1
 80828dc:	74fb      	strb	r3, [r7, #19]
      break;
 80828de:	e000      	b.n	80828e2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80828e0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80828e2:	7cfb      	ldrb	r3, [r7, #19]
 80828e4:	2b00      	cmp	r3, #0
 80828e6:	d10b      	bne.n	8082900 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80828e8:	4b76      	ldr	r3, [pc, #472]	@ (8082ac4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80828ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80828ee:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80828f2:	687b      	ldr	r3, [r7, #4]
 80828f4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80828f6:	4973      	ldr	r1, [pc, #460]	@ (8082ac4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80828f8:	4313      	orrs	r3, r2
 80828fa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80828fe:	e001      	b.n	8082904 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8082900:	7cfb      	ldrb	r3, [r7, #19]
 8082902:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8082904:	687b      	ldr	r3, [r7, #4]
 8082906:	681b      	ldr	r3, [r3, #0]
 8082908:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 808290c:	2b00      	cmp	r3, #0
 808290e:	d041      	beq.n	8082994 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8082910:	687b      	ldr	r3, [r7, #4]
 8082912:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8082914:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8082918:	d02a      	beq.n	8082970 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 808291a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 808291e:	d824      	bhi.n	808296a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8082920:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8082924:	d008      	beq.n	8082938 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8082926:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 808292a:	d81e      	bhi.n	808296a <HAL_RCCEx_PeriphCLKConfig+0x106>
 808292c:	2b00      	cmp	r3, #0
 808292e:	d00a      	beq.n	8082946 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8082930:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8082934:	d010      	beq.n	8082958 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8082936:	e018      	b.n	808296a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8082938:	4b62      	ldr	r3, [pc, #392]	@ (8082ac4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 808293a:	68db      	ldr	r3, [r3, #12]
 808293c:	4a61      	ldr	r2, [pc, #388]	@ (8082ac4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 808293e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8082942:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8082944:	e015      	b.n	8082972 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8082946:	687b      	ldr	r3, [r7, #4]
 8082948:	3304      	adds	r3, #4
 808294a:	2100      	movs	r1, #0
 808294c:	4618      	mov	r0, r3
 808294e:	f000 fa85 	bl	8082e5c <RCCEx_PLLSAI1_Config>
 8082952:	4603      	mov	r3, r0
 8082954:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8082956:	e00c      	b.n	8082972 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8082958:	687b      	ldr	r3, [r7, #4]
 808295a:	3320      	adds	r3, #32
 808295c:	2100      	movs	r1, #0
 808295e:	4618      	mov	r0, r3
 8082960:	f000 fb6e 	bl	8083040 <RCCEx_PLLSAI2_Config>
 8082964:	4603      	mov	r3, r0
 8082966:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8082968:	e003      	b.n	8082972 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 808296a:	2301      	movs	r3, #1
 808296c:	74fb      	strb	r3, [r7, #19]
      break;
 808296e:	e000      	b.n	8082972 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8082970:	bf00      	nop
    }

    if(ret == HAL_OK)
 8082972:	7cfb      	ldrb	r3, [r7, #19]
 8082974:	2b00      	cmp	r3, #0
 8082976:	d10b      	bne.n	8082990 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8082978:	4b52      	ldr	r3, [pc, #328]	@ (8082ac4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 808297a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 808297e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8082982:	687b      	ldr	r3, [r7, #4]
 8082984:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8082986:	494f      	ldr	r1, [pc, #316]	@ (8082ac4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8082988:	4313      	orrs	r3, r2
 808298a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 808298e:	e001      	b.n	8082994 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8082990:	7cfb      	ldrb	r3, [r7, #19]
 8082992:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8082994:	687b      	ldr	r3, [r7, #4]
 8082996:	681b      	ldr	r3, [r3, #0]
 8082998:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 808299c:	2b00      	cmp	r3, #0
 808299e:	f000 80a0 	beq.w	8082ae2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80829a2:	2300      	movs	r3, #0
 80829a4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80829a6:	4b47      	ldr	r3, [pc, #284]	@ (8082ac4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80829a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80829aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80829ae:	2b00      	cmp	r3, #0
 80829b0:	d101      	bne.n	80829b6 <HAL_RCCEx_PeriphCLKConfig+0x152>
 80829b2:	2301      	movs	r3, #1
 80829b4:	e000      	b.n	80829b8 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80829b6:	2300      	movs	r3, #0
 80829b8:	2b00      	cmp	r3, #0
 80829ba:	d00d      	beq.n	80829d8 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80829bc:	4b41      	ldr	r3, [pc, #260]	@ (8082ac4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80829be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80829c0:	4a40      	ldr	r2, [pc, #256]	@ (8082ac4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80829c2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80829c6:	6593      	str	r3, [r2, #88]	@ 0x58
 80829c8:	4b3e      	ldr	r3, [pc, #248]	@ (8082ac4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80829ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80829cc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80829d0:	60bb      	str	r3, [r7, #8]
 80829d2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80829d4:	2301      	movs	r3, #1
 80829d6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80829d8:	4b3b      	ldr	r3, [pc, #236]	@ (8082ac8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80829da:	681b      	ldr	r3, [r3, #0]
 80829dc:	4a3a      	ldr	r2, [pc, #232]	@ (8082ac8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80829de:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80829e2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80829e4:	f7fe fa2c 	bl	8080e40 <HAL_GetTick>
 80829e8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80829ea:	e009      	b.n	8082a00 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80829ec:	f7fe fa28 	bl	8080e40 <HAL_GetTick>
 80829f0:	4602      	mov	r2, r0
 80829f2:	68fb      	ldr	r3, [r7, #12]
 80829f4:	1ad3      	subs	r3, r2, r3
 80829f6:	2b02      	cmp	r3, #2
 80829f8:	d902      	bls.n	8082a00 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80829fa:	2303      	movs	r3, #3
 80829fc:	74fb      	strb	r3, [r7, #19]
        break;
 80829fe:	e005      	b.n	8082a0c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8082a00:	4b31      	ldr	r3, [pc, #196]	@ (8082ac8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8082a02:	681b      	ldr	r3, [r3, #0]
 8082a04:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8082a08:	2b00      	cmp	r3, #0
 8082a0a:	d0ef      	beq.n	80829ec <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8082a0c:	7cfb      	ldrb	r3, [r7, #19]
 8082a0e:	2b00      	cmp	r3, #0
 8082a10:	d15c      	bne.n	8082acc <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8082a12:	4b2c      	ldr	r3, [pc, #176]	@ (8082ac4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8082a14:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8082a18:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8082a1c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8082a1e:	697b      	ldr	r3, [r7, #20]
 8082a20:	2b00      	cmp	r3, #0
 8082a22:	d01f      	beq.n	8082a64 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8082a24:	687b      	ldr	r3, [r7, #4]
 8082a26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8082a2a:	697a      	ldr	r2, [r7, #20]
 8082a2c:	429a      	cmp	r2, r3
 8082a2e:	d019      	beq.n	8082a64 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8082a30:	4b24      	ldr	r3, [pc, #144]	@ (8082ac4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8082a32:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8082a36:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8082a3a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8082a3c:	4b21      	ldr	r3, [pc, #132]	@ (8082ac4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8082a3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8082a42:	4a20      	ldr	r2, [pc, #128]	@ (8082ac4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8082a44:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8082a48:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8082a4c:	4b1d      	ldr	r3, [pc, #116]	@ (8082ac4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8082a4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8082a52:	4a1c      	ldr	r2, [pc, #112]	@ (8082ac4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8082a54:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8082a58:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8082a5c:	4a19      	ldr	r2, [pc, #100]	@ (8082ac4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8082a5e:	697b      	ldr	r3, [r7, #20]
 8082a60:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8082a64:	697b      	ldr	r3, [r7, #20]
 8082a66:	f003 0301 	and.w	r3, r3, #1
 8082a6a:	2b00      	cmp	r3, #0
 8082a6c:	d016      	beq.n	8082a9c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8082a6e:	f7fe f9e7 	bl	8080e40 <HAL_GetTick>
 8082a72:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8082a74:	e00b      	b.n	8082a8e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8082a76:	f7fe f9e3 	bl	8080e40 <HAL_GetTick>
 8082a7a:	4602      	mov	r2, r0
 8082a7c:	68fb      	ldr	r3, [r7, #12]
 8082a7e:	1ad3      	subs	r3, r2, r3
 8082a80:	f241 3288 	movw	r2, #5000	@ 0x1388
 8082a84:	4293      	cmp	r3, r2
 8082a86:	d902      	bls.n	8082a8e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8082a88:	2303      	movs	r3, #3
 8082a8a:	74fb      	strb	r3, [r7, #19]
            break;
 8082a8c:	e006      	b.n	8082a9c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8082a8e:	4b0d      	ldr	r3, [pc, #52]	@ (8082ac4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8082a90:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8082a94:	f003 0302 	and.w	r3, r3, #2
 8082a98:	2b00      	cmp	r3, #0
 8082a9a:	d0ec      	beq.n	8082a76 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8082a9c:	7cfb      	ldrb	r3, [r7, #19]
 8082a9e:	2b00      	cmp	r3, #0
 8082aa0:	d10c      	bne.n	8082abc <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8082aa2:	4b08      	ldr	r3, [pc, #32]	@ (8082ac4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8082aa4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8082aa8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8082aac:	687b      	ldr	r3, [r7, #4]
 8082aae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8082ab2:	4904      	ldr	r1, [pc, #16]	@ (8082ac4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8082ab4:	4313      	orrs	r3, r2
 8082ab6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8082aba:	e009      	b.n	8082ad0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8082abc:	7cfb      	ldrb	r3, [r7, #19]
 8082abe:	74bb      	strb	r3, [r7, #18]
 8082ac0:	e006      	b.n	8082ad0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8082ac2:	bf00      	nop
 8082ac4:	40021000 	.word	0x40021000
 8082ac8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8082acc:	7cfb      	ldrb	r3, [r7, #19]
 8082ace:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8082ad0:	7c7b      	ldrb	r3, [r7, #17]
 8082ad2:	2b01      	cmp	r3, #1
 8082ad4:	d105      	bne.n	8082ae2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8082ad6:	4ba6      	ldr	r3, [pc, #664]	@ (8082d70 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8082ad8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8082ada:	4aa5      	ldr	r2, [pc, #660]	@ (8082d70 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8082adc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8082ae0:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8082ae2:	687b      	ldr	r3, [r7, #4]
 8082ae4:	681b      	ldr	r3, [r3, #0]
 8082ae6:	f003 0301 	and.w	r3, r3, #1
 8082aea:	2b00      	cmp	r3, #0
 8082aec:	d00a      	beq.n	8082b04 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8082aee:	4ba0      	ldr	r3, [pc, #640]	@ (8082d70 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8082af0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8082af4:	f023 0203 	bic.w	r2, r3, #3
 8082af8:	687b      	ldr	r3, [r7, #4]
 8082afa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8082afc:	499c      	ldr	r1, [pc, #624]	@ (8082d70 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8082afe:	4313      	orrs	r3, r2
 8082b00:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8082b04:	687b      	ldr	r3, [r7, #4]
 8082b06:	681b      	ldr	r3, [r3, #0]
 8082b08:	f003 0302 	and.w	r3, r3, #2
 8082b0c:	2b00      	cmp	r3, #0
 8082b0e:	d00a      	beq.n	8082b26 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8082b10:	4b97      	ldr	r3, [pc, #604]	@ (8082d70 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8082b12:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8082b16:	f023 020c 	bic.w	r2, r3, #12
 8082b1a:	687b      	ldr	r3, [r7, #4]
 8082b1c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8082b1e:	4994      	ldr	r1, [pc, #592]	@ (8082d70 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8082b20:	4313      	orrs	r3, r2
 8082b22:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8082b26:	687b      	ldr	r3, [r7, #4]
 8082b28:	681b      	ldr	r3, [r3, #0]
 8082b2a:	f003 0304 	and.w	r3, r3, #4
 8082b2e:	2b00      	cmp	r3, #0
 8082b30:	d00a      	beq.n	8082b48 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8082b32:	4b8f      	ldr	r3, [pc, #572]	@ (8082d70 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8082b34:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8082b38:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8082b3c:	687b      	ldr	r3, [r7, #4]
 8082b3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8082b40:	498b      	ldr	r1, [pc, #556]	@ (8082d70 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8082b42:	4313      	orrs	r3, r2
 8082b44:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8082b48:	687b      	ldr	r3, [r7, #4]
 8082b4a:	681b      	ldr	r3, [r3, #0]
 8082b4c:	f003 0308 	and.w	r3, r3, #8
 8082b50:	2b00      	cmp	r3, #0
 8082b52:	d00a      	beq.n	8082b6a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8082b54:	4b86      	ldr	r3, [pc, #536]	@ (8082d70 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8082b56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8082b5a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8082b5e:	687b      	ldr	r3, [r7, #4]
 8082b60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8082b62:	4983      	ldr	r1, [pc, #524]	@ (8082d70 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8082b64:	4313      	orrs	r3, r2
 8082b66:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8082b6a:	687b      	ldr	r3, [r7, #4]
 8082b6c:	681b      	ldr	r3, [r3, #0]
 8082b6e:	f003 0310 	and.w	r3, r3, #16
 8082b72:	2b00      	cmp	r3, #0
 8082b74:	d00a      	beq.n	8082b8c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8082b76:	4b7e      	ldr	r3, [pc, #504]	@ (8082d70 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8082b78:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8082b7c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8082b80:	687b      	ldr	r3, [r7, #4]
 8082b82:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8082b84:	497a      	ldr	r1, [pc, #488]	@ (8082d70 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8082b86:	4313      	orrs	r3, r2
 8082b88:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8082b8c:	687b      	ldr	r3, [r7, #4]
 8082b8e:	681b      	ldr	r3, [r3, #0]
 8082b90:	f003 0320 	and.w	r3, r3, #32
 8082b94:	2b00      	cmp	r3, #0
 8082b96:	d00a      	beq.n	8082bae <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8082b98:	4b75      	ldr	r3, [pc, #468]	@ (8082d70 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8082b9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8082b9e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8082ba2:	687b      	ldr	r3, [r7, #4]
 8082ba4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8082ba6:	4972      	ldr	r1, [pc, #456]	@ (8082d70 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8082ba8:	4313      	orrs	r3, r2
 8082baa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8082bae:	687b      	ldr	r3, [r7, #4]
 8082bb0:	681b      	ldr	r3, [r3, #0]
 8082bb2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8082bb6:	2b00      	cmp	r3, #0
 8082bb8:	d00a      	beq.n	8082bd0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8082bba:	4b6d      	ldr	r3, [pc, #436]	@ (8082d70 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8082bbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8082bc0:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8082bc4:	687b      	ldr	r3, [r7, #4]
 8082bc6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8082bc8:	4969      	ldr	r1, [pc, #420]	@ (8082d70 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8082bca:	4313      	orrs	r3, r2
 8082bcc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8082bd0:	687b      	ldr	r3, [r7, #4]
 8082bd2:	681b      	ldr	r3, [r3, #0]
 8082bd4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8082bd8:	2b00      	cmp	r3, #0
 8082bda:	d00a      	beq.n	8082bf2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8082bdc:	4b64      	ldr	r3, [pc, #400]	@ (8082d70 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8082bde:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8082be2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8082be6:	687b      	ldr	r3, [r7, #4]
 8082be8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8082bea:	4961      	ldr	r1, [pc, #388]	@ (8082d70 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8082bec:	4313      	orrs	r3, r2
 8082bee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8082bf2:	687b      	ldr	r3, [r7, #4]
 8082bf4:	681b      	ldr	r3, [r3, #0]
 8082bf6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8082bfa:	2b00      	cmp	r3, #0
 8082bfc:	d00a      	beq.n	8082c14 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8082bfe:	4b5c      	ldr	r3, [pc, #368]	@ (8082d70 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8082c00:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8082c04:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8082c08:	687b      	ldr	r3, [r7, #4]
 8082c0a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8082c0c:	4958      	ldr	r1, [pc, #352]	@ (8082d70 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8082c0e:	4313      	orrs	r3, r2
 8082c10:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8082c14:	687b      	ldr	r3, [r7, #4]
 8082c16:	681b      	ldr	r3, [r3, #0]
 8082c18:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8082c1c:	2b00      	cmp	r3, #0
 8082c1e:	d00a      	beq.n	8082c36 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8082c20:	4b53      	ldr	r3, [pc, #332]	@ (8082d70 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8082c22:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8082c26:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8082c2a:	687b      	ldr	r3, [r7, #4]
 8082c2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8082c2e:	4950      	ldr	r1, [pc, #320]	@ (8082d70 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8082c30:	4313      	orrs	r3, r2
 8082c32:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8082c36:	687b      	ldr	r3, [r7, #4]
 8082c38:	681b      	ldr	r3, [r3, #0]
 8082c3a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8082c3e:	2b00      	cmp	r3, #0
 8082c40:	d00a      	beq.n	8082c58 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8082c42:	4b4b      	ldr	r3, [pc, #300]	@ (8082d70 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8082c44:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8082c48:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8082c4c:	687b      	ldr	r3, [r7, #4]
 8082c4e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8082c50:	4947      	ldr	r1, [pc, #284]	@ (8082d70 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8082c52:	4313      	orrs	r3, r2
 8082c54:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8082c58:	687b      	ldr	r3, [r7, #4]
 8082c5a:	681b      	ldr	r3, [r3, #0]
 8082c5c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8082c60:	2b00      	cmp	r3, #0
 8082c62:	d00a      	beq.n	8082c7a <HAL_RCCEx_PeriphCLKConfig+0x416>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8082c64:	4b42      	ldr	r3, [pc, #264]	@ (8082d70 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8082c66:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8082c6a:	f023 0203 	bic.w	r2, r3, #3
 8082c6e:	687b      	ldr	r3, [r7, #4]
 8082c70:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8082c72:	493f      	ldr	r1, [pc, #252]	@ (8082d70 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8082c74:	4313      	orrs	r3, r2
 8082c76:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8082c7a:	687b      	ldr	r3, [r7, #4]
 8082c7c:	681b      	ldr	r3, [r3, #0]
 8082c7e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8082c82:	2b00      	cmp	r3, #0
 8082c84:	d028      	beq.n	8082cd8 <HAL_RCCEx_PeriphCLKConfig+0x474>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8082c86:	4b3a      	ldr	r3, [pc, #232]	@ (8082d70 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8082c88:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8082c8c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8082c90:	687b      	ldr	r3, [r7, #4]
 8082c92:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8082c94:	4936      	ldr	r1, [pc, #216]	@ (8082d70 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8082c96:	4313      	orrs	r3, r2
 8082c98:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8082c9c:	687b      	ldr	r3, [r7, #4]
 8082c9e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8082ca0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8082ca4:	d106      	bne.n	8082cb4 <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8082ca6:	4b32      	ldr	r3, [pc, #200]	@ (8082d70 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8082ca8:	68db      	ldr	r3, [r3, #12]
 8082caa:	4a31      	ldr	r2, [pc, #196]	@ (8082d70 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8082cac:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8082cb0:	60d3      	str	r3, [r2, #12]
 8082cb2:	e011      	b.n	8082cd8 <HAL_RCCEx_PeriphCLKConfig+0x474>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8082cb4:	687b      	ldr	r3, [r7, #4]
 8082cb6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8082cb8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8082cbc:	d10c      	bne.n	8082cd8 <HAL_RCCEx_PeriphCLKConfig+0x474>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8082cbe:	687b      	ldr	r3, [r7, #4]
 8082cc0:	3304      	adds	r3, #4
 8082cc2:	2101      	movs	r1, #1
 8082cc4:	4618      	mov	r0, r3
 8082cc6:	f000 f8c9 	bl	8082e5c <RCCEx_PLLSAI1_Config>
 8082cca:	4603      	mov	r3, r0
 8082ccc:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8082cce:	7cfb      	ldrb	r3, [r7, #19]
 8082cd0:	2b00      	cmp	r3, #0
 8082cd2:	d001      	beq.n	8082cd8 <HAL_RCCEx_PeriphCLKConfig+0x474>
        {
          /* set overall return value */
          status = ret;
 8082cd4:	7cfb      	ldrb	r3, [r7, #19]
 8082cd6:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8082cd8:	687b      	ldr	r3, [r7, #4]
 8082cda:	681b      	ldr	r3, [r3, #0]
 8082cdc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8082ce0:	2b00      	cmp	r3, #0
 8082ce2:	d028      	beq.n	8082d36 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8082ce4:	4b22      	ldr	r3, [pc, #136]	@ (8082d70 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8082ce6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8082cea:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8082cee:	687b      	ldr	r3, [r7, #4]
 8082cf0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8082cf2:	491f      	ldr	r1, [pc, #124]	@ (8082d70 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8082cf4:	4313      	orrs	r3, r2
 8082cf6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8082cfa:	687b      	ldr	r3, [r7, #4]
 8082cfc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8082cfe:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8082d02:	d106      	bne.n	8082d12 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8082d04:	4b1a      	ldr	r3, [pc, #104]	@ (8082d70 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8082d06:	68db      	ldr	r3, [r3, #12]
 8082d08:	4a19      	ldr	r2, [pc, #100]	@ (8082d70 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8082d0a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8082d0e:	60d3      	str	r3, [r2, #12]
 8082d10:	e011      	b.n	8082d36 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8082d12:	687b      	ldr	r3, [r7, #4]
 8082d14:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8082d16:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8082d1a:	d10c      	bne.n	8082d36 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8082d1c:	687b      	ldr	r3, [r7, #4]
 8082d1e:	3304      	adds	r3, #4
 8082d20:	2101      	movs	r1, #1
 8082d22:	4618      	mov	r0, r3
 8082d24:	f000 f89a 	bl	8082e5c <RCCEx_PLLSAI1_Config>
 8082d28:	4603      	mov	r3, r0
 8082d2a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8082d2c:	7cfb      	ldrb	r3, [r7, #19]
 8082d2e:	2b00      	cmp	r3, #0
 8082d30:	d001      	beq.n	8082d36 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
      {
        /* set overall return value */
        status = ret;
 8082d32:	7cfb      	ldrb	r3, [r7, #19]
 8082d34:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8082d36:	687b      	ldr	r3, [r7, #4]
 8082d38:	681b      	ldr	r3, [r3, #0]
 8082d3a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8082d3e:	2b00      	cmp	r3, #0
 8082d40:	d02a      	beq.n	8082d98 <HAL_RCCEx_PeriphCLKConfig+0x534>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8082d42:	4b0b      	ldr	r3, [pc, #44]	@ (8082d70 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8082d44:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8082d48:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8082d4c:	687b      	ldr	r3, [r7, #4]
 8082d4e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8082d50:	4907      	ldr	r1, [pc, #28]	@ (8082d70 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8082d52:	4313      	orrs	r3, r2
 8082d54:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8082d58:	687b      	ldr	r3, [r7, #4]
 8082d5a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8082d5c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8082d60:	d108      	bne.n	8082d74 <HAL_RCCEx_PeriphCLKConfig+0x510>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8082d62:	4b03      	ldr	r3, [pc, #12]	@ (8082d70 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8082d64:	68db      	ldr	r3, [r3, #12]
 8082d66:	4a02      	ldr	r2, [pc, #8]	@ (8082d70 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8082d68:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8082d6c:	60d3      	str	r3, [r2, #12]
 8082d6e:	e013      	b.n	8082d98 <HAL_RCCEx_PeriphCLKConfig+0x534>
 8082d70:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8082d74:	687b      	ldr	r3, [r7, #4]
 8082d76:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8082d78:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8082d7c:	d10c      	bne.n	8082d98 <HAL_RCCEx_PeriphCLKConfig+0x534>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8082d7e:	687b      	ldr	r3, [r7, #4]
 8082d80:	3304      	adds	r3, #4
 8082d82:	2101      	movs	r1, #1
 8082d84:	4618      	mov	r0, r3
 8082d86:	f000 f869 	bl	8082e5c <RCCEx_PLLSAI1_Config>
 8082d8a:	4603      	mov	r3, r0
 8082d8c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8082d8e:	7cfb      	ldrb	r3, [r7, #19]
 8082d90:	2b00      	cmp	r3, #0
 8082d92:	d001      	beq.n	8082d98 <HAL_RCCEx_PeriphCLKConfig+0x534>
      {
        /* set overall return value */
        status = ret;
 8082d94:	7cfb      	ldrb	r3, [r7, #19]
 8082d96:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8082d98:	687b      	ldr	r3, [r7, #4]
 8082d9a:	681b      	ldr	r3, [r3, #0]
 8082d9c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8082da0:	2b00      	cmp	r3, #0
 8082da2:	d02f      	beq.n	8082e04 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8082da4:	4b2c      	ldr	r3, [pc, #176]	@ (8082e58 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8082da6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8082daa:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8082dae:	687b      	ldr	r3, [r7, #4]
 8082db0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8082db2:	4929      	ldr	r1, [pc, #164]	@ (8082e58 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8082db4:	4313      	orrs	r3, r2
 8082db6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8082dba:	687b      	ldr	r3, [r7, #4]
 8082dbc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8082dbe:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8082dc2:	d10d      	bne.n	8082de0 <HAL_RCCEx_PeriphCLKConfig+0x57c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8082dc4:	687b      	ldr	r3, [r7, #4]
 8082dc6:	3304      	adds	r3, #4
 8082dc8:	2102      	movs	r1, #2
 8082dca:	4618      	mov	r0, r3
 8082dcc:	f000 f846 	bl	8082e5c <RCCEx_PLLSAI1_Config>
 8082dd0:	4603      	mov	r3, r0
 8082dd2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8082dd4:	7cfb      	ldrb	r3, [r7, #19]
 8082dd6:	2b00      	cmp	r3, #0
 8082dd8:	d014      	beq.n	8082e04 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 8082dda:	7cfb      	ldrb	r3, [r7, #19]
 8082ddc:	74bb      	strb	r3, [r7, #18]
 8082dde:	e011      	b.n	8082e04 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8082de0:	687b      	ldr	r3, [r7, #4]
 8082de2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8082de4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8082de8:	d10c      	bne.n	8082e04 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8082dea:	687b      	ldr	r3, [r7, #4]
 8082dec:	3320      	adds	r3, #32
 8082dee:	2102      	movs	r1, #2
 8082df0:	4618      	mov	r0, r3
 8082df2:	f000 f925 	bl	8083040 <RCCEx_PLLSAI2_Config>
 8082df6:	4603      	mov	r3, r0
 8082df8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8082dfa:	7cfb      	ldrb	r3, [r7, #19]
 8082dfc:	2b00      	cmp	r3, #0
 8082dfe:	d001      	beq.n	8082e04 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 8082e00:	7cfb      	ldrb	r3, [r7, #19]
 8082e02:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8082e04:	687b      	ldr	r3, [r7, #4]
 8082e06:	681b      	ldr	r3, [r3, #0]
 8082e08:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8082e0c:	2b00      	cmp	r3, #0
 8082e0e:	d00b      	beq.n	8082e28 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8082e10:	4b11      	ldr	r3, [pc, #68]	@ (8082e58 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8082e12:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8082e16:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8082e1a:	687b      	ldr	r3, [r7, #4]
 8082e1c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8082e20:	490d      	ldr	r1, [pc, #52]	@ (8082e58 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8082e22:	4313      	orrs	r3, r2
 8082e24:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8082e28:	687b      	ldr	r3, [r7, #4]
 8082e2a:	681b      	ldr	r3, [r3, #0]
 8082e2c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8082e30:	2b00      	cmp	r3, #0
 8082e32:	d00b      	beq.n	8082e4c <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8082e34:	4b08      	ldr	r3, [pc, #32]	@ (8082e58 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8082e36:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8082e3a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8082e3e:	687b      	ldr	r3, [r7, #4]
 8082e40:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8082e44:	4904      	ldr	r1, [pc, #16]	@ (8082e58 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8082e46:	4313      	orrs	r3, r2
 8082e48:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8082e4c:	7cbb      	ldrb	r3, [r7, #18]
}
 8082e4e:	4618      	mov	r0, r3
 8082e50:	3718      	adds	r7, #24
 8082e52:	46bd      	mov	sp, r7
 8082e54:	bd80      	pop	{r7, pc}
 8082e56:	bf00      	nop
 8082e58:	40021000 	.word	0x40021000

08082e5c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8082e5c:	b580      	push	{r7, lr}
 8082e5e:	b084      	sub	sp, #16
 8082e60:	af00      	add	r7, sp, #0
 8082e62:	6078      	str	r0, [r7, #4]
 8082e64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8082e66:	2300      	movs	r3, #0
 8082e68:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8082e6a:	4b74      	ldr	r3, [pc, #464]	@ (808303c <RCCEx_PLLSAI1_Config+0x1e0>)
 8082e6c:	68db      	ldr	r3, [r3, #12]
 8082e6e:	f003 0303 	and.w	r3, r3, #3
 8082e72:	2b00      	cmp	r3, #0
 8082e74:	d018      	beq.n	8082ea8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8082e76:	4b71      	ldr	r3, [pc, #452]	@ (808303c <RCCEx_PLLSAI1_Config+0x1e0>)
 8082e78:	68db      	ldr	r3, [r3, #12]
 8082e7a:	f003 0203 	and.w	r2, r3, #3
 8082e7e:	687b      	ldr	r3, [r7, #4]
 8082e80:	681b      	ldr	r3, [r3, #0]
 8082e82:	429a      	cmp	r2, r3
 8082e84:	d10d      	bne.n	8082ea2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8082e86:	687b      	ldr	r3, [r7, #4]
 8082e88:	681b      	ldr	r3, [r3, #0]
       ||
 8082e8a:	2b00      	cmp	r3, #0
 8082e8c:	d009      	beq.n	8082ea2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8082e8e:	4b6b      	ldr	r3, [pc, #428]	@ (808303c <RCCEx_PLLSAI1_Config+0x1e0>)
 8082e90:	68db      	ldr	r3, [r3, #12]
 8082e92:	091b      	lsrs	r3, r3, #4
 8082e94:	f003 0307 	and.w	r3, r3, #7
 8082e98:	1c5a      	adds	r2, r3, #1
 8082e9a:	687b      	ldr	r3, [r7, #4]
 8082e9c:	685b      	ldr	r3, [r3, #4]
       ||
 8082e9e:	429a      	cmp	r2, r3
 8082ea0:	d047      	beq.n	8082f32 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8082ea2:	2301      	movs	r3, #1
 8082ea4:	73fb      	strb	r3, [r7, #15]
 8082ea6:	e044      	b.n	8082f32 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8082ea8:	687b      	ldr	r3, [r7, #4]
 8082eaa:	681b      	ldr	r3, [r3, #0]
 8082eac:	2b03      	cmp	r3, #3
 8082eae:	d018      	beq.n	8082ee2 <RCCEx_PLLSAI1_Config+0x86>
 8082eb0:	2b03      	cmp	r3, #3
 8082eb2:	d825      	bhi.n	8082f00 <RCCEx_PLLSAI1_Config+0xa4>
 8082eb4:	2b01      	cmp	r3, #1
 8082eb6:	d002      	beq.n	8082ebe <RCCEx_PLLSAI1_Config+0x62>
 8082eb8:	2b02      	cmp	r3, #2
 8082eba:	d009      	beq.n	8082ed0 <RCCEx_PLLSAI1_Config+0x74>
 8082ebc:	e020      	b.n	8082f00 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8082ebe:	4b5f      	ldr	r3, [pc, #380]	@ (808303c <RCCEx_PLLSAI1_Config+0x1e0>)
 8082ec0:	681b      	ldr	r3, [r3, #0]
 8082ec2:	f003 0302 	and.w	r3, r3, #2
 8082ec6:	2b00      	cmp	r3, #0
 8082ec8:	d11d      	bne.n	8082f06 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8082eca:	2301      	movs	r3, #1
 8082ecc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8082ece:	e01a      	b.n	8082f06 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8082ed0:	4b5a      	ldr	r3, [pc, #360]	@ (808303c <RCCEx_PLLSAI1_Config+0x1e0>)
 8082ed2:	681b      	ldr	r3, [r3, #0]
 8082ed4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8082ed8:	2b00      	cmp	r3, #0
 8082eda:	d116      	bne.n	8082f0a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8082edc:	2301      	movs	r3, #1
 8082ede:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8082ee0:	e013      	b.n	8082f0a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8082ee2:	4b56      	ldr	r3, [pc, #344]	@ (808303c <RCCEx_PLLSAI1_Config+0x1e0>)
 8082ee4:	681b      	ldr	r3, [r3, #0]
 8082ee6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8082eea:	2b00      	cmp	r3, #0
 8082eec:	d10f      	bne.n	8082f0e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8082eee:	4b53      	ldr	r3, [pc, #332]	@ (808303c <RCCEx_PLLSAI1_Config+0x1e0>)
 8082ef0:	681b      	ldr	r3, [r3, #0]
 8082ef2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8082ef6:	2b00      	cmp	r3, #0
 8082ef8:	d109      	bne.n	8082f0e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8082efa:	2301      	movs	r3, #1
 8082efc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8082efe:	e006      	b.n	8082f0e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8082f00:	2301      	movs	r3, #1
 8082f02:	73fb      	strb	r3, [r7, #15]
      break;
 8082f04:	e004      	b.n	8082f10 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8082f06:	bf00      	nop
 8082f08:	e002      	b.n	8082f10 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8082f0a:	bf00      	nop
 8082f0c:	e000      	b.n	8082f10 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8082f0e:	bf00      	nop
    }

    if(status == HAL_OK)
 8082f10:	7bfb      	ldrb	r3, [r7, #15]
 8082f12:	2b00      	cmp	r3, #0
 8082f14:	d10d      	bne.n	8082f32 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8082f16:	4b49      	ldr	r3, [pc, #292]	@ (808303c <RCCEx_PLLSAI1_Config+0x1e0>)
 8082f18:	68db      	ldr	r3, [r3, #12]
 8082f1a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8082f1e:	687b      	ldr	r3, [r7, #4]
 8082f20:	6819      	ldr	r1, [r3, #0]
 8082f22:	687b      	ldr	r3, [r7, #4]
 8082f24:	685b      	ldr	r3, [r3, #4]
 8082f26:	3b01      	subs	r3, #1
 8082f28:	011b      	lsls	r3, r3, #4
 8082f2a:	430b      	orrs	r3, r1
 8082f2c:	4943      	ldr	r1, [pc, #268]	@ (808303c <RCCEx_PLLSAI1_Config+0x1e0>)
 8082f2e:	4313      	orrs	r3, r2
 8082f30:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8082f32:	7bfb      	ldrb	r3, [r7, #15]
 8082f34:	2b00      	cmp	r3, #0
 8082f36:	d17c      	bne.n	8083032 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8082f38:	4b40      	ldr	r3, [pc, #256]	@ (808303c <RCCEx_PLLSAI1_Config+0x1e0>)
 8082f3a:	681b      	ldr	r3, [r3, #0]
 8082f3c:	4a3f      	ldr	r2, [pc, #252]	@ (808303c <RCCEx_PLLSAI1_Config+0x1e0>)
 8082f3e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8082f42:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8082f44:	f7fd ff7c 	bl	8080e40 <HAL_GetTick>
 8082f48:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8082f4a:	e009      	b.n	8082f60 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8082f4c:	f7fd ff78 	bl	8080e40 <HAL_GetTick>
 8082f50:	4602      	mov	r2, r0
 8082f52:	68bb      	ldr	r3, [r7, #8]
 8082f54:	1ad3      	subs	r3, r2, r3
 8082f56:	2b02      	cmp	r3, #2
 8082f58:	d902      	bls.n	8082f60 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8082f5a:	2303      	movs	r3, #3
 8082f5c:	73fb      	strb	r3, [r7, #15]
        break;
 8082f5e:	e005      	b.n	8082f6c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8082f60:	4b36      	ldr	r3, [pc, #216]	@ (808303c <RCCEx_PLLSAI1_Config+0x1e0>)
 8082f62:	681b      	ldr	r3, [r3, #0]
 8082f64:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8082f68:	2b00      	cmp	r3, #0
 8082f6a:	d1ef      	bne.n	8082f4c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8082f6c:	7bfb      	ldrb	r3, [r7, #15]
 8082f6e:	2b00      	cmp	r3, #0
 8082f70:	d15f      	bne.n	8083032 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8082f72:	683b      	ldr	r3, [r7, #0]
 8082f74:	2b00      	cmp	r3, #0
 8082f76:	d110      	bne.n	8082f9a <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8082f78:	4b30      	ldr	r3, [pc, #192]	@ (808303c <RCCEx_PLLSAI1_Config+0x1e0>)
 8082f7a:	691b      	ldr	r3, [r3, #16]
 8082f7c:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8082f80:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8082f84:	687a      	ldr	r2, [r7, #4]
 8082f86:	6892      	ldr	r2, [r2, #8]
 8082f88:	0211      	lsls	r1, r2, #8
 8082f8a:	687a      	ldr	r2, [r7, #4]
 8082f8c:	68d2      	ldr	r2, [r2, #12]
 8082f8e:	06d2      	lsls	r2, r2, #27
 8082f90:	430a      	orrs	r2, r1
 8082f92:	492a      	ldr	r1, [pc, #168]	@ (808303c <RCCEx_PLLSAI1_Config+0x1e0>)
 8082f94:	4313      	orrs	r3, r2
 8082f96:	610b      	str	r3, [r1, #16]
 8082f98:	e027      	b.n	8082fea <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8082f9a:	683b      	ldr	r3, [r7, #0]
 8082f9c:	2b01      	cmp	r3, #1
 8082f9e:	d112      	bne.n	8082fc6 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8082fa0:	4b26      	ldr	r3, [pc, #152]	@ (808303c <RCCEx_PLLSAI1_Config+0x1e0>)
 8082fa2:	691b      	ldr	r3, [r3, #16]
 8082fa4:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8082fa8:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8082fac:	687a      	ldr	r2, [r7, #4]
 8082fae:	6892      	ldr	r2, [r2, #8]
 8082fb0:	0211      	lsls	r1, r2, #8
 8082fb2:	687a      	ldr	r2, [r7, #4]
 8082fb4:	6912      	ldr	r2, [r2, #16]
 8082fb6:	0852      	lsrs	r2, r2, #1
 8082fb8:	3a01      	subs	r2, #1
 8082fba:	0552      	lsls	r2, r2, #21
 8082fbc:	430a      	orrs	r2, r1
 8082fbe:	491f      	ldr	r1, [pc, #124]	@ (808303c <RCCEx_PLLSAI1_Config+0x1e0>)
 8082fc0:	4313      	orrs	r3, r2
 8082fc2:	610b      	str	r3, [r1, #16]
 8082fc4:	e011      	b.n	8082fea <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8082fc6:	4b1d      	ldr	r3, [pc, #116]	@ (808303c <RCCEx_PLLSAI1_Config+0x1e0>)
 8082fc8:	691b      	ldr	r3, [r3, #16]
 8082fca:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8082fce:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8082fd2:	687a      	ldr	r2, [r7, #4]
 8082fd4:	6892      	ldr	r2, [r2, #8]
 8082fd6:	0211      	lsls	r1, r2, #8
 8082fd8:	687a      	ldr	r2, [r7, #4]
 8082fda:	6952      	ldr	r2, [r2, #20]
 8082fdc:	0852      	lsrs	r2, r2, #1
 8082fde:	3a01      	subs	r2, #1
 8082fe0:	0652      	lsls	r2, r2, #25
 8082fe2:	430a      	orrs	r2, r1
 8082fe4:	4915      	ldr	r1, [pc, #84]	@ (808303c <RCCEx_PLLSAI1_Config+0x1e0>)
 8082fe6:	4313      	orrs	r3, r2
 8082fe8:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8082fea:	4b14      	ldr	r3, [pc, #80]	@ (808303c <RCCEx_PLLSAI1_Config+0x1e0>)
 8082fec:	681b      	ldr	r3, [r3, #0]
 8082fee:	4a13      	ldr	r2, [pc, #76]	@ (808303c <RCCEx_PLLSAI1_Config+0x1e0>)
 8082ff0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8082ff4:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8082ff6:	f7fd ff23 	bl	8080e40 <HAL_GetTick>
 8082ffa:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8082ffc:	e009      	b.n	8083012 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8082ffe:	f7fd ff1f 	bl	8080e40 <HAL_GetTick>
 8083002:	4602      	mov	r2, r0
 8083004:	68bb      	ldr	r3, [r7, #8]
 8083006:	1ad3      	subs	r3, r2, r3
 8083008:	2b02      	cmp	r3, #2
 808300a:	d902      	bls.n	8083012 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 808300c:	2303      	movs	r3, #3
 808300e:	73fb      	strb	r3, [r7, #15]
          break;
 8083010:	e005      	b.n	808301e <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8083012:	4b0a      	ldr	r3, [pc, #40]	@ (808303c <RCCEx_PLLSAI1_Config+0x1e0>)
 8083014:	681b      	ldr	r3, [r3, #0]
 8083016:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 808301a:	2b00      	cmp	r3, #0
 808301c:	d0ef      	beq.n	8082ffe <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 808301e:	7bfb      	ldrb	r3, [r7, #15]
 8083020:	2b00      	cmp	r3, #0
 8083022:	d106      	bne.n	8083032 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8083024:	4b05      	ldr	r3, [pc, #20]	@ (808303c <RCCEx_PLLSAI1_Config+0x1e0>)
 8083026:	691a      	ldr	r2, [r3, #16]
 8083028:	687b      	ldr	r3, [r7, #4]
 808302a:	699b      	ldr	r3, [r3, #24]
 808302c:	4903      	ldr	r1, [pc, #12]	@ (808303c <RCCEx_PLLSAI1_Config+0x1e0>)
 808302e:	4313      	orrs	r3, r2
 8083030:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8083032:	7bfb      	ldrb	r3, [r7, #15]
}
 8083034:	4618      	mov	r0, r3
 8083036:	3710      	adds	r7, #16
 8083038:	46bd      	mov	sp, r7
 808303a:	bd80      	pop	{r7, pc}
 808303c:	40021000 	.word	0x40021000

08083040 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8083040:	b580      	push	{r7, lr}
 8083042:	b084      	sub	sp, #16
 8083044:	af00      	add	r7, sp, #0
 8083046:	6078      	str	r0, [r7, #4]
 8083048:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 808304a:	2300      	movs	r3, #0
 808304c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 808304e:	4b69      	ldr	r3, [pc, #420]	@ (80831f4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8083050:	68db      	ldr	r3, [r3, #12]
 8083052:	f003 0303 	and.w	r3, r3, #3
 8083056:	2b00      	cmp	r3, #0
 8083058:	d018      	beq.n	808308c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 808305a:	4b66      	ldr	r3, [pc, #408]	@ (80831f4 <RCCEx_PLLSAI2_Config+0x1b4>)
 808305c:	68db      	ldr	r3, [r3, #12]
 808305e:	f003 0203 	and.w	r2, r3, #3
 8083062:	687b      	ldr	r3, [r7, #4]
 8083064:	681b      	ldr	r3, [r3, #0]
 8083066:	429a      	cmp	r2, r3
 8083068:	d10d      	bne.n	8083086 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 808306a:	687b      	ldr	r3, [r7, #4]
 808306c:	681b      	ldr	r3, [r3, #0]
       ||
 808306e:	2b00      	cmp	r3, #0
 8083070:	d009      	beq.n	8083086 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8083072:	4b60      	ldr	r3, [pc, #384]	@ (80831f4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8083074:	68db      	ldr	r3, [r3, #12]
 8083076:	091b      	lsrs	r3, r3, #4
 8083078:	f003 0307 	and.w	r3, r3, #7
 808307c:	1c5a      	adds	r2, r3, #1
 808307e:	687b      	ldr	r3, [r7, #4]
 8083080:	685b      	ldr	r3, [r3, #4]
       ||
 8083082:	429a      	cmp	r2, r3
 8083084:	d047      	beq.n	8083116 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8083086:	2301      	movs	r3, #1
 8083088:	73fb      	strb	r3, [r7, #15]
 808308a:	e044      	b.n	8083116 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 808308c:	687b      	ldr	r3, [r7, #4]
 808308e:	681b      	ldr	r3, [r3, #0]
 8083090:	2b03      	cmp	r3, #3
 8083092:	d018      	beq.n	80830c6 <RCCEx_PLLSAI2_Config+0x86>
 8083094:	2b03      	cmp	r3, #3
 8083096:	d825      	bhi.n	80830e4 <RCCEx_PLLSAI2_Config+0xa4>
 8083098:	2b01      	cmp	r3, #1
 808309a:	d002      	beq.n	80830a2 <RCCEx_PLLSAI2_Config+0x62>
 808309c:	2b02      	cmp	r3, #2
 808309e:	d009      	beq.n	80830b4 <RCCEx_PLLSAI2_Config+0x74>
 80830a0:	e020      	b.n	80830e4 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80830a2:	4b54      	ldr	r3, [pc, #336]	@ (80831f4 <RCCEx_PLLSAI2_Config+0x1b4>)
 80830a4:	681b      	ldr	r3, [r3, #0]
 80830a6:	f003 0302 	and.w	r3, r3, #2
 80830aa:	2b00      	cmp	r3, #0
 80830ac:	d11d      	bne.n	80830ea <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80830ae:	2301      	movs	r3, #1
 80830b0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80830b2:	e01a      	b.n	80830ea <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80830b4:	4b4f      	ldr	r3, [pc, #316]	@ (80831f4 <RCCEx_PLLSAI2_Config+0x1b4>)
 80830b6:	681b      	ldr	r3, [r3, #0]
 80830b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80830bc:	2b00      	cmp	r3, #0
 80830be:	d116      	bne.n	80830ee <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80830c0:	2301      	movs	r3, #1
 80830c2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80830c4:	e013      	b.n	80830ee <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80830c6:	4b4b      	ldr	r3, [pc, #300]	@ (80831f4 <RCCEx_PLLSAI2_Config+0x1b4>)
 80830c8:	681b      	ldr	r3, [r3, #0]
 80830ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80830ce:	2b00      	cmp	r3, #0
 80830d0:	d10f      	bne.n	80830f2 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80830d2:	4b48      	ldr	r3, [pc, #288]	@ (80831f4 <RCCEx_PLLSAI2_Config+0x1b4>)
 80830d4:	681b      	ldr	r3, [r3, #0]
 80830d6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80830da:	2b00      	cmp	r3, #0
 80830dc:	d109      	bne.n	80830f2 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80830de:	2301      	movs	r3, #1
 80830e0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80830e2:	e006      	b.n	80830f2 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80830e4:	2301      	movs	r3, #1
 80830e6:	73fb      	strb	r3, [r7, #15]
      break;
 80830e8:	e004      	b.n	80830f4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80830ea:	bf00      	nop
 80830ec:	e002      	b.n	80830f4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80830ee:	bf00      	nop
 80830f0:	e000      	b.n	80830f4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80830f2:	bf00      	nop
    }

    if(status == HAL_OK)
 80830f4:	7bfb      	ldrb	r3, [r7, #15]
 80830f6:	2b00      	cmp	r3, #0
 80830f8:	d10d      	bne.n	8083116 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80830fa:	4b3e      	ldr	r3, [pc, #248]	@ (80831f4 <RCCEx_PLLSAI2_Config+0x1b4>)
 80830fc:	68db      	ldr	r3, [r3, #12]
 80830fe:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8083102:	687b      	ldr	r3, [r7, #4]
 8083104:	6819      	ldr	r1, [r3, #0]
 8083106:	687b      	ldr	r3, [r7, #4]
 8083108:	685b      	ldr	r3, [r3, #4]
 808310a:	3b01      	subs	r3, #1
 808310c:	011b      	lsls	r3, r3, #4
 808310e:	430b      	orrs	r3, r1
 8083110:	4938      	ldr	r1, [pc, #224]	@ (80831f4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8083112:	4313      	orrs	r3, r2
 8083114:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8083116:	7bfb      	ldrb	r3, [r7, #15]
 8083118:	2b00      	cmp	r3, #0
 808311a:	d166      	bne.n	80831ea <RCCEx_PLLSAI2_Config+0x1aa>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 808311c:	4b35      	ldr	r3, [pc, #212]	@ (80831f4 <RCCEx_PLLSAI2_Config+0x1b4>)
 808311e:	681b      	ldr	r3, [r3, #0]
 8083120:	4a34      	ldr	r2, [pc, #208]	@ (80831f4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8083122:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8083126:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8083128:	f7fd fe8a 	bl	8080e40 <HAL_GetTick>
 808312c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 808312e:	e009      	b.n	8083144 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8083130:	f7fd fe86 	bl	8080e40 <HAL_GetTick>
 8083134:	4602      	mov	r2, r0
 8083136:	68bb      	ldr	r3, [r7, #8]
 8083138:	1ad3      	subs	r3, r2, r3
 808313a:	2b02      	cmp	r3, #2
 808313c:	d902      	bls.n	8083144 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 808313e:	2303      	movs	r3, #3
 8083140:	73fb      	strb	r3, [r7, #15]
        break;
 8083142:	e005      	b.n	8083150 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8083144:	4b2b      	ldr	r3, [pc, #172]	@ (80831f4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8083146:	681b      	ldr	r3, [r3, #0]
 8083148:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 808314c:	2b00      	cmp	r3, #0
 808314e:	d1ef      	bne.n	8083130 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8083150:	7bfb      	ldrb	r3, [r7, #15]
 8083152:	2b00      	cmp	r3, #0
 8083154:	d149      	bne.n	80831ea <RCCEx_PLLSAI2_Config+0x1aa>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8083156:	683b      	ldr	r3, [r7, #0]
 8083158:	2b00      	cmp	r3, #0
 808315a:	d110      	bne.n	808317e <RCCEx_PLLSAI2_Config+0x13e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI2 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 808315c:	4b25      	ldr	r3, [pc, #148]	@ (80831f4 <RCCEx_PLLSAI2_Config+0x1b4>)
 808315e:	695b      	ldr	r3, [r3, #20]
 8083160:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8083164:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8083168:	687a      	ldr	r2, [r7, #4]
 808316a:	6892      	ldr	r2, [r2, #8]
 808316c:	0211      	lsls	r1, r2, #8
 808316e:	687a      	ldr	r2, [r7, #4]
 8083170:	68d2      	ldr	r2, [r2, #12]
 8083172:	06d2      	lsls	r2, r2, #27
 8083174:	430a      	orrs	r2, r1
 8083176:	491f      	ldr	r1, [pc, #124]	@ (80831f4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8083178:	4313      	orrs	r3, r2
 808317a:	614b      	str	r3, [r1, #20]
 808317c:	e011      	b.n	80831a2 <RCCEx_PLLSAI2_Config+0x162>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 808317e:	4b1d      	ldr	r3, [pc, #116]	@ (80831f4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8083180:	695b      	ldr	r3, [r3, #20]
 8083182:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8083186:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 808318a:	687a      	ldr	r2, [r7, #4]
 808318c:	6892      	ldr	r2, [r2, #8]
 808318e:	0211      	lsls	r1, r2, #8
 8083190:	687a      	ldr	r2, [r7, #4]
 8083192:	6912      	ldr	r2, [r2, #16]
 8083194:	0852      	lsrs	r2, r2, #1
 8083196:	3a01      	subs	r2, #1
 8083198:	0652      	lsls	r2, r2, #25
 808319a:	430a      	orrs	r2, r1
 808319c:	4915      	ldr	r1, [pc, #84]	@ (80831f4 <RCCEx_PLLSAI2_Config+0x1b4>)
 808319e:	4313      	orrs	r3, r2
 80831a0:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80831a2:	4b14      	ldr	r3, [pc, #80]	@ (80831f4 <RCCEx_PLLSAI2_Config+0x1b4>)
 80831a4:	681b      	ldr	r3, [r3, #0]
 80831a6:	4a13      	ldr	r2, [pc, #76]	@ (80831f4 <RCCEx_PLLSAI2_Config+0x1b4>)
 80831a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80831ac:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80831ae:	f7fd fe47 	bl	8080e40 <HAL_GetTick>
 80831b2:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80831b4:	e009      	b.n	80831ca <RCCEx_PLLSAI2_Config+0x18a>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80831b6:	f7fd fe43 	bl	8080e40 <HAL_GetTick>
 80831ba:	4602      	mov	r2, r0
 80831bc:	68bb      	ldr	r3, [r7, #8]
 80831be:	1ad3      	subs	r3, r2, r3
 80831c0:	2b02      	cmp	r3, #2
 80831c2:	d902      	bls.n	80831ca <RCCEx_PLLSAI2_Config+0x18a>
        {
          status = HAL_TIMEOUT;
 80831c4:	2303      	movs	r3, #3
 80831c6:	73fb      	strb	r3, [r7, #15]
          break;
 80831c8:	e005      	b.n	80831d6 <RCCEx_PLLSAI2_Config+0x196>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80831ca:	4b0a      	ldr	r3, [pc, #40]	@ (80831f4 <RCCEx_PLLSAI2_Config+0x1b4>)
 80831cc:	681b      	ldr	r3, [r3, #0]
 80831ce:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80831d2:	2b00      	cmp	r3, #0
 80831d4:	d0ef      	beq.n	80831b6 <RCCEx_PLLSAI2_Config+0x176>
        }
      }

      if(status == HAL_OK)
 80831d6:	7bfb      	ldrb	r3, [r7, #15]
 80831d8:	2b00      	cmp	r3, #0
 80831da:	d106      	bne.n	80831ea <RCCEx_PLLSAI2_Config+0x1aa>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80831dc:	4b05      	ldr	r3, [pc, #20]	@ (80831f4 <RCCEx_PLLSAI2_Config+0x1b4>)
 80831de:	695a      	ldr	r2, [r3, #20]
 80831e0:	687b      	ldr	r3, [r7, #4]
 80831e2:	695b      	ldr	r3, [r3, #20]
 80831e4:	4903      	ldr	r1, [pc, #12]	@ (80831f4 <RCCEx_PLLSAI2_Config+0x1b4>)
 80831e6:	4313      	orrs	r3, r2
 80831e8:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80831ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80831ec:	4618      	mov	r0, r3
 80831ee:	3710      	adds	r7, #16
 80831f0:	46bd      	mov	sp, r7
 80831f2:	bd80      	pop	{r7, pc}
 80831f4:	40021000 	.word	0x40021000

080831f8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80831f8:	b580      	push	{r7, lr}
 80831fa:	b082      	sub	sp, #8
 80831fc:	af00      	add	r7, sp, #0
 80831fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8083200:	687b      	ldr	r3, [r7, #4]
 8083202:	2b00      	cmp	r3, #0
 8083204:	d101      	bne.n	808320a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8083206:	2301      	movs	r3, #1
 8083208:	e040      	b.n	808328c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 808320a:	687b      	ldr	r3, [r7, #4]
 808320c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 808320e:	2b00      	cmp	r3, #0
 8083210:	d106      	bne.n	8083220 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8083212:	687b      	ldr	r3, [r7, #4]
 8083214:	2200      	movs	r2, #0
 8083216:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 808321a:	6878      	ldr	r0, [r7, #4]
 808321c:	f7fd fcd8 	bl	8080bd0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8083220:	687b      	ldr	r3, [r7, #4]
 8083222:	2224      	movs	r2, #36	@ 0x24
 8083224:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8083226:	687b      	ldr	r3, [r7, #4]
 8083228:	681b      	ldr	r3, [r3, #0]
 808322a:	681a      	ldr	r2, [r3, #0]
 808322c:	687b      	ldr	r3, [r7, #4]
 808322e:	681b      	ldr	r3, [r3, #0]
 8083230:	f022 0201 	bic.w	r2, r2, #1
 8083234:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8083236:	687b      	ldr	r3, [r7, #4]
 8083238:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 808323a:	2b00      	cmp	r3, #0
 808323c:	d002      	beq.n	8083244 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 808323e:	6878      	ldr	r0, [r7, #4]
 8083240:	f000 fc32 	bl	8083aa8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8083244:	6878      	ldr	r0, [r7, #4]
 8083246:	f000 f977 	bl	8083538 <UART_SetConfig>
 808324a:	4603      	mov	r3, r0
 808324c:	2b01      	cmp	r3, #1
 808324e:	d101      	bne.n	8083254 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8083250:	2301      	movs	r3, #1
 8083252:	e01b      	b.n	808328c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8083254:	687b      	ldr	r3, [r7, #4]
 8083256:	681b      	ldr	r3, [r3, #0]
 8083258:	685a      	ldr	r2, [r3, #4]
 808325a:	687b      	ldr	r3, [r7, #4]
 808325c:	681b      	ldr	r3, [r3, #0]
 808325e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8083262:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8083264:	687b      	ldr	r3, [r7, #4]
 8083266:	681b      	ldr	r3, [r3, #0]
 8083268:	689a      	ldr	r2, [r3, #8]
 808326a:	687b      	ldr	r3, [r7, #4]
 808326c:	681b      	ldr	r3, [r3, #0]
 808326e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8083272:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8083274:	687b      	ldr	r3, [r7, #4]
 8083276:	681b      	ldr	r3, [r3, #0]
 8083278:	681a      	ldr	r2, [r3, #0]
 808327a:	687b      	ldr	r3, [r7, #4]
 808327c:	681b      	ldr	r3, [r3, #0]
 808327e:	f042 0201 	orr.w	r2, r2, #1
 8083282:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8083284:	6878      	ldr	r0, [r7, #4]
 8083286:	f000 fcb1 	bl	8083bec <UART_CheckIdleState>
 808328a:	4603      	mov	r3, r0
}
 808328c:	4618      	mov	r0, r3
 808328e:	3708      	adds	r7, #8
 8083290:	46bd      	mov	sp, r7
 8083292:	bd80      	pop	{r7, pc}

08083294 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8083294:	b580      	push	{r7, lr}
 8083296:	b08a      	sub	sp, #40	@ 0x28
 8083298:	af02      	add	r7, sp, #8
 808329a:	60f8      	str	r0, [r7, #12]
 808329c:	60b9      	str	r1, [r7, #8]
 808329e:	603b      	str	r3, [r7, #0]
 80832a0:	4613      	mov	r3, r2
 80832a2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80832a4:	68fb      	ldr	r3, [r7, #12]
 80832a6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80832a8:	2b20      	cmp	r3, #32
 80832aa:	d177      	bne.n	808339c <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80832ac:	68bb      	ldr	r3, [r7, #8]
 80832ae:	2b00      	cmp	r3, #0
 80832b0:	d002      	beq.n	80832b8 <HAL_UART_Transmit+0x24>
 80832b2:	88fb      	ldrh	r3, [r7, #6]
 80832b4:	2b00      	cmp	r3, #0
 80832b6:	d101      	bne.n	80832bc <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80832b8:	2301      	movs	r3, #1
 80832ba:	e070      	b.n	808339e <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80832bc:	68fb      	ldr	r3, [r7, #12]
 80832be:	2200      	movs	r2, #0
 80832c0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80832c4:	68fb      	ldr	r3, [r7, #12]
 80832c6:	2221      	movs	r2, #33	@ 0x21
 80832c8:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80832ca:	f7fd fdb9 	bl	8080e40 <HAL_GetTick>
 80832ce:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80832d0:	68fb      	ldr	r3, [r7, #12]
 80832d2:	88fa      	ldrh	r2, [r7, #6]
 80832d4:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80832d8:	68fb      	ldr	r3, [r7, #12]
 80832da:	88fa      	ldrh	r2, [r7, #6]
 80832dc:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80832e0:	68fb      	ldr	r3, [r7, #12]
 80832e2:	689b      	ldr	r3, [r3, #8]
 80832e4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80832e8:	d108      	bne.n	80832fc <HAL_UART_Transmit+0x68>
 80832ea:	68fb      	ldr	r3, [r7, #12]
 80832ec:	691b      	ldr	r3, [r3, #16]
 80832ee:	2b00      	cmp	r3, #0
 80832f0:	d104      	bne.n	80832fc <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80832f2:	2300      	movs	r3, #0
 80832f4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80832f6:	68bb      	ldr	r3, [r7, #8]
 80832f8:	61bb      	str	r3, [r7, #24]
 80832fa:	e003      	b.n	8083304 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80832fc:	68bb      	ldr	r3, [r7, #8]
 80832fe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8083300:	2300      	movs	r3, #0
 8083302:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8083304:	e02f      	b.n	8083366 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8083306:	683b      	ldr	r3, [r7, #0]
 8083308:	9300      	str	r3, [sp, #0]
 808330a:	697b      	ldr	r3, [r7, #20]
 808330c:	2200      	movs	r2, #0
 808330e:	2180      	movs	r1, #128	@ 0x80
 8083310:	68f8      	ldr	r0, [r7, #12]
 8083312:	f000 fd13 	bl	8083d3c <UART_WaitOnFlagUntilTimeout>
 8083316:	4603      	mov	r3, r0
 8083318:	2b00      	cmp	r3, #0
 808331a:	d004      	beq.n	8083326 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 808331c:	68fb      	ldr	r3, [r7, #12]
 808331e:	2220      	movs	r2, #32
 8083320:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8083322:	2303      	movs	r3, #3
 8083324:	e03b      	b.n	808339e <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8083326:	69fb      	ldr	r3, [r7, #28]
 8083328:	2b00      	cmp	r3, #0
 808332a:	d10b      	bne.n	8083344 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 808332c:	69bb      	ldr	r3, [r7, #24]
 808332e:	881a      	ldrh	r2, [r3, #0]
 8083330:	68fb      	ldr	r3, [r7, #12]
 8083332:	681b      	ldr	r3, [r3, #0]
 8083334:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8083338:	b292      	uxth	r2, r2
 808333a:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 808333c:	69bb      	ldr	r3, [r7, #24]
 808333e:	3302      	adds	r3, #2
 8083340:	61bb      	str	r3, [r7, #24]
 8083342:	e007      	b.n	8083354 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8083344:	69fb      	ldr	r3, [r7, #28]
 8083346:	781a      	ldrb	r2, [r3, #0]
 8083348:	68fb      	ldr	r3, [r7, #12]
 808334a:	681b      	ldr	r3, [r3, #0]
 808334c:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 808334e:	69fb      	ldr	r3, [r7, #28]
 8083350:	3301      	adds	r3, #1
 8083352:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8083354:	68fb      	ldr	r3, [r7, #12]
 8083356:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 808335a:	b29b      	uxth	r3, r3
 808335c:	3b01      	subs	r3, #1
 808335e:	b29a      	uxth	r2, r3
 8083360:	68fb      	ldr	r3, [r7, #12]
 8083362:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8083366:	68fb      	ldr	r3, [r7, #12]
 8083368:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 808336c:	b29b      	uxth	r3, r3
 808336e:	2b00      	cmp	r3, #0
 8083370:	d1c9      	bne.n	8083306 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8083372:	683b      	ldr	r3, [r7, #0]
 8083374:	9300      	str	r3, [sp, #0]
 8083376:	697b      	ldr	r3, [r7, #20]
 8083378:	2200      	movs	r2, #0
 808337a:	2140      	movs	r1, #64	@ 0x40
 808337c:	68f8      	ldr	r0, [r7, #12]
 808337e:	f000 fcdd 	bl	8083d3c <UART_WaitOnFlagUntilTimeout>
 8083382:	4603      	mov	r3, r0
 8083384:	2b00      	cmp	r3, #0
 8083386:	d004      	beq.n	8083392 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8083388:	68fb      	ldr	r3, [r7, #12]
 808338a:	2220      	movs	r2, #32
 808338c:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 808338e:	2303      	movs	r3, #3
 8083390:	e005      	b.n	808339e <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8083392:	68fb      	ldr	r3, [r7, #12]
 8083394:	2220      	movs	r2, #32
 8083396:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8083398:	2300      	movs	r3, #0
 808339a:	e000      	b.n	808339e <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 808339c:	2302      	movs	r3, #2
  }
}
 808339e:	4618      	mov	r0, r3
 80833a0:	3720      	adds	r7, #32
 80833a2:	46bd      	mov	sp, r7
 80833a4:	bd80      	pop	{r7, pc}

080833a6 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80833a6:	b580      	push	{r7, lr}
 80833a8:	b08a      	sub	sp, #40	@ 0x28
 80833aa:	af02      	add	r7, sp, #8
 80833ac:	60f8      	str	r0, [r7, #12]
 80833ae:	60b9      	str	r1, [r7, #8]
 80833b0:	603b      	str	r3, [r7, #0]
 80833b2:	4613      	mov	r3, r2
 80833b4:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80833b6:	68fb      	ldr	r3, [r7, #12]
 80833b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80833bc:	2b20      	cmp	r3, #32
 80833be:	f040 80b6 	bne.w	808352e <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 80833c2:	68bb      	ldr	r3, [r7, #8]
 80833c4:	2b00      	cmp	r3, #0
 80833c6:	d002      	beq.n	80833ce <HAL_UART_Receive+0x28>
 80833c8:	88fb      	ldrh	r3, [r7, #6]
 80833ca:	2b00      	cmp	r3, #0
 80833cc:	d101      	bne.n	80833d2 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 80833ce:	2301      	movs	r3, #1
 80833d0:	e0ae      	b.n	8083530 <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80833d2:	68fb      	ldr	r3, [r7, #12]
 80833d4:	2200      	movs	r2, #0
 80833d6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80833da:	68fb      	ldr	r3, [r7, #12]
 80833dc:	2222      	movs	r2, #34	@ 0x22
 80833de:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80833e2:	68fb      	ldr	r3, [r7, #12]
 80833e4:	2200      	movs	r2, #0
 80833e6:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80833e8:	f7fd fd2a 	bl	8080e40 <HAL_GetTick>
 80833ec:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80833ee:	68fb      	ldr	r3, [r7, #12]
 80833f0:	88fa      	ldrh	r2, [r7, #6]
 80833f2:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
    huart->RxXferCount = Size;
 80833f6:	68fb      	ldr	r3, [r7, #12]
 80833f8:	88fa      	ldrh	r2, [r7, #6]
 80833fa:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80833fe:	68fb      	ldr	r3, [r7, #12]
 8083400:	689b      	ldr	r3, [r3, #8]
 8083402:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8083406:	d10e      	bne.n	8083426 <HAL_UART_Receive+0x80>
 8083408:	68fb      	ldr	r3, [r7, #12]
 808340a:	691b      	ldr	r3, [r3, #16]
 808340c:	2b00      	cmp	r3, #0
 808340e:	d105      	bne.n	808341c <HAL_UART_Receive+0x76>
 8083410:	68fb      	ldr	r3, [r7, #12]
 8083412:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8083416:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 808341a:	e02d      	b.n	8083478 <HAL_UART_Receive+0xd2>
 808341c:	68fb      	ldr	r3, [r7, #12]
 808341e:	22ff      	movs	r2, #255	@ 0xff
 8083420:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8083424:	e028      	b.n	8083478 <HAL_UART_Receive+0xd2>
 8083426:	68fb      	ldr	r3, [r7, #12]
 8083428:	689b      	ldr	r3, [r3, #8]
 808342a:	2b00      	cmp	r3, #0
 808342c:	d10d      	bne.n	808344a <HAL_UART_Receive+0xa4>
 808342e:	68fb      	ldr	r3, [r7, #12]
 8083430:	691b      	ldr	r3, [r3, #16]
 8083432:	2b00      	cmp	r3, #0
 8083434:	d104      	bne.n	8083440 <HAL_UART_Receive+0x9a>
 8083436:	68fb      	ldr	r3, [r7, #12]
 8083438:	22ff      	movs	r2, #255	@ 0xff
 808343a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 808343e:	e01b      	b.n	8083478 <HAL_UART_Receive+0xd2>
 8083440:	68fb      	ldr	r3, [r7, #12]
 8083442:	227f      	movs	r2, #127	@ 0x7f
 8083444:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8083448:	e016      	b.n	8083478 <HAL_UART_Receive+0xd2>
 808344a:	68fb      	ldr	r3, [r7, #12]
 808344c:	689b      	ldr	r3, [r3, #8]
 808344e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8083452:	d10d      	bne.n	8083470 <HAL_UART_Receive+0xca>
 8083454:	68fb      	ldr	r3, [r7, #12]
 8083456:	691b      	ldr	r3, [r3, #16]
 8083458:	2b00      	cmp	r3, #0
 808345a:	d104      	bne.n	8083466 <HAL_UART_Receive+0xc0>
 808345c:	68fb      	ldr	r3, [r7, #12]
 808345e:	227f      	movs	r2, #127	@ 0x7f
 8083460:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8083464:	e008      	b.n	8083478 <HAL_UART_Receive+0xd2>
 8083466:	68fb      	ldr	r3, [r7, #12]
 8083468:	223f      	movs	r2, #63	@ 0x3f
 808346a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 808346e:	e003      	b.n	8083478 <HAL_UART_Receive+0xd2>
 8083470:	68fb      	ldr	r3, [r7, #12]
 8083472:	2200      	movs	r2, #0
 8083474:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    uhMask = huart->Mask;
 8083478:	68fb      	ldr	r3, [r7, #12]
 808347a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 808347e:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8083480:	68fb      	ldr	r3, [r7, #12]
 8083482:	689b      	ldr	r3, [r3, #8]
 8083484:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8083488:	d108      	bne.n	808349c <HAL_UART_Receive+0xf6>
 808348a:	68fb      	ldr	r3, [r7, #12]
 808348c:	691b      	ldr	r3, [r3, #16]
 808348e:	2b00      	cmp	r3, #0
 8083490:	d104      	bne.n	808349c <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8083492:	2300      	movs	r3, #0
 8083494:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8083496:	68bb      	ldr	r3, [r7, #8]
 8083498:	61bb      	str	r3, [r7, #24]
 808349a:	e003      	b.n	80834a4 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 808349c:	68bb      	ldr	r3, [r7, #8]
 808349e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80834a0:	2300      	movs	r3, #0
 80834a2:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80834a4:	e037      	b.n	8083516 <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80834a6:	683b      	ldr	r3, [r7, #0]
 80834a8:	9300      	str	r3, [sp, #0]
 80834aa:	697b      	ldr	r3, [r7, #20]
 80834ac:	2200      	movs	r2, #0
 80834ae:	2120      	movs	r1, #32
 80834b0:	68f8      	ldr	r0, [r7, #12]
 80834b2:	f000 fc43 	bl	8083d3c <UART_WaitOnFlagUntilTimeout>
 80834b6:	4603      	mov	r3, r0
 80834b8:	2b00      	cmp	r3, #0
 80834ba:	d005      	beq.n	80834c8 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 80834bc:	68fb      	ldr	r3, [r7, #12]
 80834be:	2220      	movs	r2, #32
 80834c0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        return HAL_TIMEOUT;
 80834c4:	2303      	movs	r3, #3
 80834c6:	e033      	b.n	8083530 <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 80834c8:	69fb      	ldr	r3, [r7, #28]
 80834ca:	2b00      	cmp	r3, #0
 80834cc:	d10c      	bne.n	80834e8 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80834ce:	68fb      	ldr	r3, [r7, #12]
 80834d0:	681b      	ldr	r3, [r3, #0]
 80834d2:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80834d4:	b29a      	uxth	r2, r3
 80834d6:	8a7b      	ldrh	r3, [r7, #18]
 80834d8:	4013      	ands	r3, r2
 80834da:	b29a      	uxth	r2, r3
 80834dc:	69bb      	ldr	r3, [r7, #24]
 80834de:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80834e0:	69bb      	ldr	r3, [r7, #24]
 80834e2:	3302      	adds	r3, #2
 80834e4:	61bb      	str	r3, [r7, #24]
 80834e6:	e00d      	b.n	8083504 <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80834e8:	68fb      	ldr	r3, [r7, #12]
 80834ea:	681b      	ldr	r3, [r3, #0]
 80834ec:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80834ee:	b29b      	uxth	r3, r3
 80834f0:	b2da      	uxtb	r2, r3
 80834f2:	8a7b      	ldrh	r3, [r7, #18]
 80834f4:	b2db      	uxtb	r3, r3
 80834f6:	4013      	ands	r3, r2
 80834f8:	b2da      	uxtb	r2, r3
 80834fa:	69fb      	ldr	r3, [r7, #28]
 80834fc:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80834fe:	69fb      	ldr	r3, [r7, #28]
 8083500:	3301      	adds	r3, #1
 8083502:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8083504:	68fb      	ldr	r3, [r7, #12]
 8083506:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 808350a:	b29b      	uxth	r3, r3
 808350c:	3b01      	subs	r3, #1
 808350e:	b29a      	uxth	r2, r3
 8083510:	68fb      	ldr	r3, [r7, #12]
 8083512:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    while (huart->RxXferCount > 0U)
 8083516:	68fb      	ldr	r3, [r7, #12]
 8083518:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 808351c:	b29b      	uxth	r3, r3
 808351e:	2b00      	cmp	r3, #0
 8083520:	d1c1      	bne.n	80834a6 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8083522:	68fb      	ldr	r3, [r7, #12]
 8083524:	2220      	movs	r2, #32
 8083526:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    return HAL_OK;
 808352a:	2300      	movs	r3, #0
 808352c:	e000      	b.n	8083530 <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 808352e:	2302      	movs	r3, #2
  }
}
 8083530:	4618      	mov	r0, r3
 8083532:	3720      	adds	r7, #32
 8083534:	46bd      	mov	sp, r7
 8083536:	bd80      	pop	{r7, pc}

08083538 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8083538:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 808353c:	b08a      	sub	sp, #40	@ 0x28
 808353e:	af00      	add	r7, sp, #0
 8083540:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8083542:	2300      	movs	r3, #0
 8083544:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8083548:	68fb      	ldr	r3, [r7, #12]
 808354a:	689a      	ldr	r2, [r3, #8]
 808354c:	68fb      	ldr	r3, [r7, #12]
 808354e:	691b      	ldr	r3, [r3, #16]
 8083550:	431a      	orrs	r2, r3
 8083552:	68fb      	ldr	r3, [r7, #12]
 8083554:	695b      	ldr	r3, [r3, #20]
 8083556:	431a      	orrs	r2, r3
 8083558:	68fb      	ldr	r3, [r7, #12]
 808355a:	69db      	ldr	r3, [r3, #28]
 808355c:	4313      	orrs	r3, r2
 808355e:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8083560:	68fb      	ldr	r3, [r7, #12]
 8083562:	681b      	ldr	r3, [r3, #0]
 8083564:	681a      	ldr	r2, [r3, #0]
 8083566:	4ba4      	ldr	r3, [pc, #656]	@ (80837f8 <UART_SetConfig+0x2c0>)
 8083568:	4013      	ands	r3, r2
 808356a:	68fa      	ldr	r2, [r7, #12]
 808356c:	6812      	ldr	r2, [r2, #0]
 808356e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8083570:	430b      	orrs	r3, r1
 8083572:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8083574:	68fb      	ldr	r3, [r7, #12]
 8083576:	681b      	ldr	r3, [r3, #0]
 8083578:	685b      	ldr	r3, [r3, #4]
 808357a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 808357e:	68fb      	ldr	r3, [r7, #12]
 8083580:	68da      	ldr	r2, [r3, #12]
 8083582:	68fb      	ldr	r3, [r7, #12]
 8083584:	681b      	ldr	r3, [r3, #0]
 8083586:	430a      	orrs	r2, r1
 8083588:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 808358a:	68fb      	ldr	r3, [r7, #12]
 808358c:	699b      	ldr	r3, [r3, #24]
 808358e:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8083590:	68fb      	ldr	r3, [r7, #12]
 8083592:	681b      	ldr	r3, [r3, #0]
 8083594:	4a99      	ldr	r2, [pc, #612]	@ (80837fc <UART_SetConfig+0x2c4>)
 8083596:	4293      	cmp	r3, r2
 8083598:	d004      	beq.n	80835a4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 808359a:	68fb      	ldr	r3, [r7, #12]
 808359c:	6a1b      	ldr	r3, [r3, #32]
 808359e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80835a0:	4313      	orrs	r3, r2
 80835a2:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80835a4:	68fb      	ldr	r3, [r7, #12]
 80835a6:	681b      	ldr	r3, [r3, #0]
 80835a8:	689b      	ldr	r3, [r3, #8]
 80835aa:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80835ae:	68fb      	ldr	r3, [r7, #12]
 80835b0:	681b      	ldr	r3, [r3, #0]
 80835b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80835b4:	430a      	orrs	r2, r1
 80835b6:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80835b8:	68fb      	ldr	r3, [r7, #12]
 80835ba:	681b      	ldr	r3, [r3, #0]
 80835bc:	4a90      	ldr	r2, [pc, #576]	@ (8083800 <UART_SetConfig+0x2c8>)
 80835be:	4293      	cmp	r3, r2
 80835c0:	d126      	bne.n	8083610 <UART_SetConfig+0xd8>
 80835c2:	4b90      	ldr	r3, [pc, #576]	@ (8083804 <UART_SetConfig+0x2cc>)
 80835c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80835c8:	f003 0303 	and.w	r3, r3, #3
 80835cc:	2b03      	cmp	r3, #3
 80835ce:	d81b      	bhi.n	8083608 <UART_SetConfig+0xd0>
 80835d0:	a201      	add	r2, pc, #4	@ (adr r2, 80835d8 <UART_SetConfig+0xa0>)
 80835d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80835d6:	bf00      	nop
 80835d8:	080835e9 	.word	0x080835e9
 80835dc:	080835f9 	.word	0x080835f9
 80835e0:	080835f1 	.word	0x080835f1
 80835e4:	08083601 	.word	0x08083601
 80835e8:	2301      	movs	r3, #1
 80835ea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80835ee:	e116      	b.n	808381e <UART_SetConfig+0x2e6>
 80835f0:	2302      	movs	r3, #2
 80835f2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80835f6:	e112      	b.n	808381e <UART_SetConfig+0x2e6>
 80835f8:	2304      	movs	r3, #4
 80835fa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80835fe:	e10e      	b.n	808381e <UART_SetConfig+0x2e6>
 8083600:	2308      	movs	r3, #8
 8083602:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8083606:	e10a      	b.n	808381e <UART_SetConfig+0x2e6>
 8083608:	2310      	movs	r3, #16
 808360a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 808360e:	e106      	b.n	808381e <UART_SetConfig+0x2e6>
 8083610:	68fb      	ldr	r3, [r7, #12]
 8083612:	681b      	ldr	r3, [r3, #0]
 8083614:	4a7c      	ldr	r2, [pc, #496]	@ (8083808 <UART_SetConfig+0x2d0>)
 8083616:	4293      	cmp	r3, r2
 8083618:	d138      	bne.n	808368c <UART_SetConfig+0x154>
 808361a:	4b7a      	ldr	r3, [pc, #488]	@ (8083804 <UART_SetConfig+0x2cc>)
 808361c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8083620:	f003 030c 	and.w	r3, r3, #12
 8083624:	2b0c      	cmp	r3, #12
 8083626:	d82d      	bhi.n	8083684 <UART_SetConfig+0x14c>
 8083628:	a201      	add	r2, pc, #4	@ (adr r2, 8083630 <UART_SetConfig+0xf8>)
 808362a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 808362e:	bf00      	nop
 8083630:	08083665 	.word	0x08083665
 8083634:	08083685 	.word	0x08083685
 8083638:	08083685 	.word	0x08083685
 808363c:	08083685 	.word	0x08083685
 8083640:	08083675 	.word	0x08083675
 8083644:	08083685 	.word	0x08083685
 8083648:	08083685 	.word	0x08083685
 808364c:	08083685 	.word	0x08083685
 8083650:	0808366d 	.word	0x0808366d
 8083654:	08083685 	.word	0x08083685
 8083658:	08083685 	.word	0x08083685
 808365c:	08083685 	.word	0x08083685
 8083660:	0808367d 	.word	0x0808367d
 8083664:	2300      	movs	r3, #0
 8083666:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 808366a:	e0d8      	b.n	808381e <UART_SetConfig+0x2e6>
 808366c:	2302      	movs	r3, #2
 808366e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8083672:	e0d4      	b.n	808381e <UART_SetConfig+0x2e6>
 8083674:	2304      	movs	r3, #4
 8083676:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 808367a:	e0d0      	b.n	808381e <UART_SetConfig+0x2e6>
 808367c:	2308      	movs	r3, #8
 808367e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8083682:	e0cc      	b.n	808381e <UART_SetConfig+0x2e6>
 8083684:	2310      	movs	r3, #16
 8083686:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 808368a:	e0c8      	b.n	808381e <UART_SetConfig+0x2e6>
 808368c:	68fb      	ldr	r3, [r7, #12]
 808368e:	681b      	ldr	r3, [r3, #0]
 8083690:	4a5e      	ldr	r2, [pc, #376]	@ (808380c <UART_SetConfig+0x2d4>)
 8083692:	4293      	cmp	r3, r2
 8083694:	d125      	bne.n	80836e2 <UART_SetConfig+0x1aa>
 8083696:	4b5b      	ldr	r3, [pc, #364]	@ (8083804 <UART_SetConfig+0x2cc>)
 8083698:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 808369c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80836a0:	2b30      	cmp	r3, #48	@ 0x30
 80836a2:	d016      	beq.n	80836d2 <UART_SetConfig+0x19a>
 80836a4:	2b30      	cmp	r3, #48	@ 0x30
 80836a6:	d818      	bhi.n	80836da <UART_SetConfig+0x1a2>
 80836a8:	2b20      	cmp	r3, #32
 80836aa:	d00a      	beq.n	80836c2 <UART_SetConfig+0x18a>
 80836ac:	2b20      	cmp	r3, #32
 80836ae:	d814      	bhi.n	80836da <UART_SetConfig+0x1a2>
 80836b0:	2b00      	cmp	r3, #0
 80836b2:	d002      	beq.n	80836ba <UART_SetConfig+0x182>
 80836b4:	2b10      	cmp	r3, #16
 80836b6:	d008      	beq.n	80836ca <UART_SetConfig+0x192>
 80836b8:	e00f      	b.n	80836da <UART_SetConfig+0x1a2>
 80836ba:	2300      	movs	r3, #0
 80836bc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80836c0:	e0ad      	b.n	808381e <UART_SetConfig+0x2e6>
 80836c2:	2302      	movs	r3, #2
 80836c4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80836c8:	e0a9      	b.n	808381e <UART_SetConfig+0x2e6>
 80836ca:	2304      	movs	r3, #4
 80836cc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80836d0:	e0a5      	b.n	808381e <UART_SetConfig+0x2e6>
 80836d2:	2308      	movs	r3, #8
 80836d4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80836d8:	e0a1      	b.n	808381e <UART_SetConfig+0x2e6>
 80836da:	2310      	movs	r3, #16
 80836dc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80836e0:	e09d      	b.n	808381e <UART_SetConfig+0x2e6>
 80836e2:	68fb      	ldr	r3, [r7, #12]
 80836e4:	681b      	ldr	r3, [r3, #0]
 80836e6:	4a4a      	ldr	r2, [pc, #296]	@ (8083810 <UART_SetConfig+0x2d8>)
 80836e8:	4293      	cmp	r3, r2
 80836ea:	d125      	bne.n	8083738 <UART_SetConfig+0x200>
 80836ec:	4b45      	ldr	r3, [pc, #276]	@ (8083804 <UART_SetConfig+0x2cc>)
 80836ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80836f2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80836f6:	2bc0      	cmp	r3, #192	@ 0xc0
 80836f8:	d016      	beq.n	8083728 <UART_SetConfig+0x1f0>
 80836fa:	2bc0      	cmp	r3, #192	@ 0xc0
 80836fc:	d818      	bhi.n	8083730 <UART_SetConfig+0x1f8>
 80836fe:	2b80      	cmp	r3, #128	@ 0x80
 8083700:	d00a      	beq.n	8083718 <UART_SetConfig+0x1e0>
 8083702:	2b80      	cmp	r3, #128	@ 0x80
 8083704:	d814      	bhi.n	8083730 <UART_SetConfig+0x1f8>
 8083706:	2b00      	cmp	r3, #0
 8083708:	d002      	beq.n	8083710 <UART_SetConfig+0x1d8>
 808370a:	2b40      	cmp	r3, #64	@ 0x40
 808370c:	d008      	beq.n	8083720 <UART_SetConfig+0x1e8>
 808370e:	e00f      	b.n	8083730 <UART_SetConfig+0x1f8>
 8083710:	2300      	movs	r3, #0
 8083712:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8083716:	e082      	b.n	808381e <UART_SetConfig+0x2e6>
 8083718:	2302      	movs	r3, #2
 808371a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 808371e:	e07e      	b.n	808381e <UART_SetConfig+0x2e6>
 8083720:	2304      	movs	r3, #4
 8083722:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8083726:	e07a      	b.n	808381e <UART_SetConfig+0x2e6>
 8083728:	2308      	movs	r3, #8
 808372a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 808372e:	e076      	b.n	808381e <UART_SetConfig+0x2e6>
 8083730:	2310      	movs	r3, #16
 8083732:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8083736:	e072      	b.n	808381e <UART_SetConfig+0x2e6>
 8083738:	68fb      	ldr	r3, [r7, #12]
 808373a:	681b      	ldr	r3, [r3, #0]
 808373c:	4a35      	ldr	r2, [pc, #212]	@ (8083814 <UART_SetConfig+0x2dc>)
 808373e:	4293      	cmp	r3, r2
 8083740:	d12a      	bne.n	8083798 <UART_SetConfig+0x260>
 8083742:	4b30      	ldr	r3, [pc, #192]	@ (8083804 <UART_SetConfig+0x2cc>)
 8083744:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8083748:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 808374c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8083750:	d01a      	beq.n	8083788 <UART_SetConfig+0x250>
 8083752:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8083756:	d81b      	bhi.n	8083790 <UART_SetConfig+0x258>
 8083758:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 808375c:	d00c      	beq.n	8083778 <UART_SetConfig+0x240>
 808375e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8083762:	d815      	bhi.n	8083790 <UART_SetConfig+0x258>
 8083764:	2b00      	cmp	r3, #0
 8083766:	d003      	beq.n	8083770 <UART_SetConfig+0x238>
 8083768:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 808376c:	d008      	beq.n	8083780 <UART_SetConfig+0x248>
 808376e:	e00f      	b.n	8083790 <UART_SetConfig+0x258>
 8083770:	2300      	movs	r3, #0
 8083772:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8083776:	e052      	b.n	808381e <UART_SetConfig+0x2e6>
 8083778:	2302      	movs	r3, #2
 808377a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 808377e:	e04e      	b.n	808381e <UART_SetConfig+0x2e6>
 8083780:	2304      	movs	r3, #4
 8083782:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8083786:	e04a      	b.n	808381e <UART_SetConfig+0x2e6>
 8083788:	2308      	movs	r3, #8
 808378a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 808378e:	e046      	b.n	808381e <UART_SetConfig+0x2e6>
 8083790:	2310      	movs	r3, #16
 8083792:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8083796:	e042      	b.n	808381e <UART_SetConfig+0x2e6>
 8083798:	68fb      	ldr	r3, [r7, #12]
 808379a:	681b      	ldr	r3, [r3, #0]
 808379c:	4a17      	ldr	r2, [pc, #92]	@ (80837fc <UART_SetConfig+0x2c4>)
 808379e:	4293      	cmp	r3, r2
 80837a0:	d13a      	bne.n	8083818 <UART_SetConfig+0x2e0>
 80837a2:	4b18      	ldr	r3, [pc, #96]	@ (8083804 <UART_SetConfig+0x2cc>)
 80837a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80837a8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80837ac:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80837b0:	d01a      	beq.n	80837e8 <UART_SetConfig+0x2b0>
 80837b2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80837b6:	d81b      	bhi.n	80837f0 <UART_SetConfig+0x2b8>
 80837b8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80837bc:	d00c      	beq.n	80837d8 <UART_SetConfig+0x2a0>
 80837be:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80837c2:	d815      	bhi.n	80837f0 <UART_SetConfig+0x2b8>
 80837c4:	2b00      	cmp	r3, #0
 80837c6:	d003      	beq.n	80837d0 <UART_SetConfig+0x298>
 80837c8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80837cc:	d008      	beq.n	80837e0 <UART_SetConfig+0x2a8>
 80837ce:	e00f      	b.n	80837f0 <UART_SetConfig+0x2b8>
 80837d0:	2300      	movs	r3, #0
 80837d2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80837d6:	e022      	b.n	808381e <UART_SetConfig+0x2e6>
 80837d8:	2302      	movs	r3, #2
 80837da:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80837de:	e01e      	b.n	808381e <UART_SetConfig+0x2e6>
 80837e0:	2304      	movs	r3, #4
 80837e2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80837e6:	e01a      	b.n	808381e <UART_SetConfig+0x2e6>
 80837e8:	2308      	movs	r3, #8
 80837ea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80837ee:	e016      	b.n	808381e <UART_SetConfig+0x2e6>
 80837f0:	2310      	movs	r3, #16
 80837f2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80837f6:	e012      	b.n	808381e <UART_SetConfig+0x2e6>
 80837f8:	efff69f3 	.word	0xefff69f3
 80837fc:	40008000 	.word	0x40008000
 8083800:	40013800 	.word	0x40013800
 8083804:	40021000 	.word	0x40021000
 8083808:	40004400 	.word	0x40004400
 808380c:	40004800 	.word	0x40004800
 8083810:	40004c00 	.word	0x40004c00
 8083814:	40005000 	.word	0x40005000
 8083818:	2310      	movs	r3, #16
 808381a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 808381e:	68fb      	ldr	r3, [r7, #12]
 8083820:	681b      	ldr	r3, [r3, #0]
 8083822:	4a9f      	ldr	r2, [pc, #636]	@ (8083aa0 <UART_SetConfig+0x568>)
 8083824:	4293      	cmp	r3, r2
 8083826:	d17a      	bne.n	808391e <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8083828:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 808382c:	2b08      	cmp	r3, #8
 808382e:	d824      	bhi.n	808387a <UART_SetConfig+0x342>
 8083830:	a201      	add	r2, pc, #4	@ (adr r2, 8083838 <UART_SetConfig+0x300>)
 8083832:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8083836:	bf00      	nop
 8083838:	0808385d 	.word	0x0808385d
 808383c:	0808387b 	.word	0x0808387b
 8083840:	08083865 	.word	0x08083865
 8083844:	0808387b 	.word	0x0808387b
 8083848:	0808386b 	.word	0x0808386b
 808384c:	0808387b 	.word	0x0808387b
 8083850:	0808387b 	.word	0x0808387b
 8083854:	0808387b 	.word	0x0808387b
 8083858:	08083873 	.word	0x08083873
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 808385c:	f7fe ff76 	bl	808274c <HAL_RCC_GetPCLK1Freq>
 8083860:	61f8      	str	r0, [r7, #28]
        break;
 8083862:	e010      	b.n	8083886 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8083864:	4b8f      	ldr	r3, [pc, #572]	@ (8083aa4 <UART_SetConfig+0x56c>)
 8083866:	61fb      	str	r3, [r7, #28]
        break;
 8083868:	e00d      	b.n	8083886 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 808386a:	f7fe fed7 	bl	808261c <HAL_RCC_GetSysClockFreq>
 808386e:	61f8      	str	r0, [r7, #28]
        break;
 8083870:	e009      	b.n	8083886 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8083872:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8083876:	61fb      	str	r3, [r7, #28]
        break;
 8083878:	e005      	b.n	8083886 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 808387a:	2300      	movs	r3, #0
 808387c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 808387e:	2301      	movs	r3, #1
 8083880:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8083884:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8083886:	69fb      	ldr	r3, [r7, #28]
 8083888:	2b00      	cmp	r3, #0
 808388a:	f000 80fb 	beq.w	8083a84 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 808388e:	68fb      	ldr	r3, [r7, #12]
 8083890:	685a      	ldr	r2, [r3, #4]
 8083892:	4613      	mov	r3, r2
 8083894:	005b      	lsls	r3, r3, #1
 8083896:	4413      	add	r3, r2
 8083898:	69fa      	ldr	r2, [r7, #28]
 808389a:	429a      	cmp	r2, r3
 808389c:	d305      	bcc.n	80838aa <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 808389e:	68fb      	ldr	r3, [r7, #12]
 80838a0:	685b      	ldr	r3, [r3, #4]
 80838a2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80838a4:	69fa      	ldr	r2, [r7, #28]
 80838a6:	429a      	cmp	r2, r3
 80838a8:	d903      	bls.n	80838b2 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80838aa:	2301      	movs	r3, #1
 80838ac:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80838b0:	e0e8      	b.n	8083a84 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80838b2:	69fb      	ldr	r3, [r7, #28]
 80838b4:	2200      	movs	r2, #0
 80838b6:	461c      	mov	r4, r3
 80838b8:	4615      	mov	r5, r2
 80838ba:	f04f 0200 	mov.w	r2, #0
 80838be:	f04f 0300 	mov.w	r3, #0
 80838c2:	022b      	lsls	r3, r5, #8
 80838c4:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80838c8:	0222      	lsls	r2, r4, #8
 80838ca:	68f9      	ldr	r1, [r7, #12]
 80838cc:	6849      	ldr	r1, [r1, #4]
 80838ce:	0849      	lsrs	r1, r1, #1
 80838d0:	2000      	movs	r0, #0
 80838d2:	4688      	mov	r8, r1
 80838d4:	4681      	mov	r9, r0
 80838d6:	eb12 0a08 	adds.w	sl, r2, r8
 80838da:	eb43 0b09 	adc.w	fp, r3, r9
 80838de:	68fb      	ldr	r3, [r7, #12]
 80838e0:	685b      	ldr	r3, [r3, #4]
 80838e2:	2200      	movs	r2, #0
 80838e4:	603b      	str	r3, [r7, #0]
 80838e6:	607a      	str	r2, [r7, #4]
 80838e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80838ec:	4650      	mov	r0, sl
 80838ee:	4659      	mov	r1, fp
 80838f0:	f7fc fc8e 	bl	8080210 <__aeabi_uldivmod>
 80838f4:	4602      	mov	r2, r0
 80838f6:	460b      	mov	r3, r1
 80838f8:	4613      	mov	r3, r2
 80838fa:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80838fc:	69bb      	ldr	r3, [r7, #24]
 80838fe:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8083902:	d308      	bcc.n	8083916 <UART_SetConfig+0x3de>
 8083904:	69bb      	ldr	r3, [r7, #24]
 8083906:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 808390a:	d204      	bcs.n	8083916 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 808390c:	68fb      	ldr	r3, [r7, #12]
 808390e:	681b      	ldr	r3, [r3, #0]
 8083910:	69ba      	ldr	r2, [r7, #24]
 8083912:	60da      	str	r2, [r3, #12]
 8083914:	e0b6      	b.n	8083a84 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8083916:	2301      	movs	r3, #1
 8083918:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 808391c:	e0b2      	b.n	8083a84 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 808391e:	68fb      	ldr	r3, [r7, #12]
 8083920:	69db      	ldr	r3, [r3, #28]
 8083922:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8083926:	d15e      	bne.n	80839e6 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8083928:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 808392c:	2b08      	cmp	r3, #8
 808392e:	d828      	bhi.n	8083982 <UART_SetConfig+0x44a>
 8083930:	a201      	add	r2, pc, #4	@ (adr r2, 8083938 <UART_SetConfig+0x400>)
 8083932:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8083936:	bf00      	nop
 8083938:	0808395d 	.word	0x0808395d
 808393c:	08083965 	.word	0x08083965
 8083940:	0808396d 	.word	0x0808396d
 8083944:	08083983 	.word	0x08083983
 8083948:	08083973 	.word	0x08083973
 808394c:	08083983 	.word	0x08083983
 8083950:	08083983 	.word	0x08083983
 8083954:	08083983 	.word	0x08083983
 8083958:	0808397b 	.word	0x0808397b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 808395c:	f7fe fef6 	bl	808274c <HAL_RCC_GetPCLK1Freq>
 8083960:	61f8      	str	r0, [r7, #28]
        break;
 8083962:	e014      	b.n	808398e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8083964:	f7fe ff08 	bl	8082778 <HAL_RCC_GetPCLK2Freq>
 8083968:	61f8      	str	r0, [r7, #28]
        break;
 808396a:	e010      	b.n	808398e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 808396c:	4b4d      	ldr	r3, [pc, #308]	@ (8083aa4 <UART_SetConfig+0x56c>)
 808396e:	61fb      	str	r3, [r7, #28]
        break;
 8083970:	e00d      	b.n	808398e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8083972:	f7fe fe53 	bl	808261c <HAL_RCC_GetSysClockFreq>
 8083976:	61f8      	str	r0, [r7, #28]
        break;
 8083978:	e009      	b.n	808398e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 808397a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 808397e:	61fb      	str	r3, [r7, #28]
        break;
 8083980:	e005      	b.n	808398e <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8083982:	2300      	movs	r3, #0
 8083984:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8083986:	2301      	movs	r3, #1
 8083988:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 808398c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 808398e:	69fb      	ldr	r3, [r7, #28]
 8083990:	2b00      	cmp	r3, #0
 8083992:	d077      	beq.n	8083a84 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8083994:	69fb      	ldr	r3, [r7, #28]
 8083996:	005a      	lsls	r2, r3, #1
 8083998:	68fb      	ldr	r3, [r7, #12]
 808399a:	685b      	ldr	r3, [r3, #4]
 808399c:	085b      	lsrs	r3, r3, #1
 808399e:	441a      	add	r2, r3
 80839a0:	68fb      	ldr	r3, [r7, #12]
 80839a2:	685b      	ldr	r3, [r3, #4]
 80839a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80839a8:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80839aa:	69bb      	ldr	r3, [r7, #24]
 80839ac:	2b0f      	cmp	r3, #15
 80839ae:	d916      	bls.n	80839de <UART_SetConfig+0x4a6>
 80839b0:	69bb      	ldr	r3, [r7, #24]
 80839b2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80839b6:	d212      	bcs.n	80839de <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80839b8:	69bb      	ldr	r3, [r7, #24]
 80839ba:	b29b      	uxth	r3, r3
 80839bc:	f023 030f 	bic.w	r3, r3, #15
 80839c0:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80839c2:	69bb      	ldr	r3, [r7, #24]
 80839c4:	085b      	lsrs	r3, r3, #1
 80839c6:	b29b      	uxth	r3, r3
 80839c8:	f003 0307 	and.w	r3, r3, #7
 80839cc:	b29a      	uxth	r2, r3
 80839ce:	8afb      	ldrh	r3, [r7, #22]
 80839d0:	4313      	orrs	r3, r2
 80839d2:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80839d4:	68fb      	ldr	r3, [r7, #12]
 80839d6:	681b      	ldr	r3, [r3, #0]
 80839d8:	8afa      	ldrh	r2, [r7, #22]
 80839da:	60da      	str	r2, [r3, #12]
 80839dc:	e052      	b.n	8083a84 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80839de:	2301      	movs	r3, #1
 80839e0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80839e4:	e04e      	b.n	8083a84 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80839e6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80839ea:	2b08      	cmp	r3, #8
 80839ec:	d827      	bhi.n	8083a3e <UART_SetConfig+0x506>
 80839ee:	a201      	add	r2, pc, #4	@ (adr r2, 80839f4 <UART_SetConfig+0x4bc>)
 80839f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80839f4:	08083a19 	.word	0x08083a19
 80839f8:	08083a21 	.word	0x08083a21
 80839fc:	08083a29 	.word	0x08083a29
 8083a00:	08083a3f 	.word	0x08083a3f
 8083a04:	08083a2f 	.word	0x08083a2f
 8083a08:	08083a3f 	.word	0x08083a3f
 8083a0c:	08083a3f 	.word	0x08083a3f
 8083a10:	08083a3f 	.word	0x08083a3f
 8083a14:	08083a37 	.word	0x08083a37
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8083a18:	f7fe fe98 	bl	808274c <HAL_RCC_GetPCLK1Freq>
 8083a1c:	61f8      	str	r0, [r7, #28]
        break;
 8083a1e:	e014      	b.n	8083a4a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8083a20:	f7fe feaa 	bl	8082778 <HAL_RCC_GetPCLK2Freq>
 8083a24:	61f8      	str	r0, [r7, #28]
        break;
 8083a26:	e010      	b.n	8083a4a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8083a28:	4b1e      	ldr	r3, [pc, #120]	@ (8083aa4 <UART_SetConfig+0x56c>)
 8083a2a:	61fb      	str	r3, [r7, #28]
        break;
 8083a2c:	e00d      	b.n	8083a4a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8083a2e:	f7fe fdf5 	bl	808261c <HAL_RCC_GetSysClockFreq>
 8083a32:	61f8      	str	r0, [r7, #28]
        break;
 8083a34:	e009      	b.n	8083a4a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8083a36:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8083a3a:	61fb      	str	r3, [r7, #28]
        break;
 8083a3c:	e005      	b.n	8083a4a <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8083a3e:	2300      	movs	r3, #0
 8083a40:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8083a42:	2301      	movs	r3, #1
 8083a44:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8083a48:	bf00      	nop
    }

    if (pclk != 0U)
 8083a4a:	69fb      	ldr	r3, [r7, #28]
 8083a4c:	2b00      	cmp	r3, #0
 8083a4e:	d019      	beq.n	8083a84 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8083a50:	68fb      	ldr	r3, [r7, #12]
 8083a52:	685b      	ldr	r3, [r3, #4]
 8083a54:	085a      	lsrs	r2, r3, #1
 8083a56:	69fb      	ldr	r3, [r7, #28]
 8083a58:	441a      	add	r2, r3
 8083a5a:	68fb      	ldr	r3, [r7, #12]
 8083a5c:	685b      	ldr	r3, [r3, #4]
 8083a5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8083a62:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8083a64:	69bb      	ldr	r3, [r7, #24]
 8083a66:	2b0f      	cmp	r3, #15
 8083a68:	d909      	bls.n	8083a7e <UART_SetConfig+0x546>
 8083a6a:	69bb      	ldr	r3, [r7, #24]
 8083a6c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8083a70:	d205      	bcs.n	8083a7e <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8083a72:	69bb      	ldr	r3, [r7, #24]
 8083a74:	b29a      	uxth	r2, r3
 8083a76:	68fb      	ldr	r3, [r7, #12]
 8083a78:	681b      	ldr	r3, [r3, #0]
 8083a7a:	60da      	str	r2, [r3, #12]
 8083a7c:	e002      	b.n	8083a84 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8083a7e:	2301      	movs	r3, #1
 8083a80:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8083a84:	68fb      	ldr	r3, [r7, #12]
 8083a86:	2200      	movs	r2, #0
 8083a88:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8083a8a:	68fb      	ldr	r3, [r7, #12]
 8083a8c:	2200      	movs	r2, #0
 8083a8e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8083a90:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8083a94:	4618      	mov	r0, r3
 8083a96:	3728      	adds	r7, #40	@ 0x28
 8083a98:	46bd      	mov	sp, r7
 8083a9a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8083a9e:	bf00      	nop
 8083aa0:	40008000 	.word	0x40008000
 8083aa4:	00f42400 	.word	0x00f42400

08083aa8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8083aa8:	b480      	push	{r7}
 8083aaa:	b083      	sub	sp, #12
 8083aac:	af00      	add	r7, sp, #0
 8083aae:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8083ab0:	687b      	ldr	r3, [r7, #4]
 8083ab2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8083ab4:	f003 0308 	and.w	r3, r3, #8
 8083ab8:	2b00      	cmp	r3, #0
 8083aba:	d00a      	beq.n	8083ad2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8083abc:	687b      	ldr	r3, [r7, #4]
 8083abe:	681b      	ldr	r3, [r3, #0]
 8083ac0:	685b      	ldr	r3, [r3, #4]
 8083ac2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8083ac6:	687b      	ldr	r3, [r7, #4]
 8083ac8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8083aca:	687b      	ldr	r3, [r7, #4]
 8083acc:	681b      	ldr	r3, [r3, #0]
 8083ace:	430a      	orrs	r2, r1
 8083ad0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8083ad2:	687b      	ldr	r3, [r7, #4]
 8083ad4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8083ad6:	f003 0301 	and.w	r3, r3, #1
 8083ada:	2b00      	cmp	r3, #0
 8083adc:	d00a      	beq.n	8083af4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8083ade:	687b      	ldr	r3, [r7, #4]
 8083ae0:	681b      	ldr	r3, [r3, #0]
 8083ae2:	685b      	ldr	r3, [r3, #4]
 8083ae4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8083ae8:	687b      	ldr	r3, [r7, #4]
 8083aea:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8083aec:	687b      	ldr	r3, [r7, #4]
 8083aee:	681b      	ldr	r3, [r3, #0]
 8083af0:	430a      	orrs	r2, r1
 8083af2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8083af4:	687b      	ldr	r3, [r7, #4]
 8083af6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8083af8:	f003 0302 	and.w	r3, r3, #2
 8083afc:	2b00      	cmp	r3, #0
 8083afe:	d00a      	beq.n	8083b16 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8083b00:	687b      	ldr	r3, [r7, #4]
 8083b02:	681b      	ldr	r3, [r3, #0]
 8083b04:	685b      	ldr	r3, [r3, #4]
 8083b06:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8083b0a:	687b      	ldr	r3, [r7, #4]
 8083b0c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8083b0e:	687b      	ldr	r3, [r7, #4]
 8083b10:	681b      	ldr	r3, [r3, #0]
 8083b12:	430a      	orrs	r2, r1
 8083b14:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8083b16:	687b      	ldr	r3, [r7, #4]
 8083b18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8083b1a:	f003 0304 	and.w	r3, r3, #4
 8083b1e:	2b00      	cmp	r3, #0
 8083b20:	d00a      	beq.n	8083b38 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8083b22:	687b      	ldr	r3, [r7, #4]
 8083b24:	681b      	ldr	r3, [r3, #0]
 8083b26:	685b      	ldr	r3, [r3, #4]
 8083b28:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8083b2c:	687b      	ldr	r3, [r7, #4]
 8083b2e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8083b30:	687b      	ldr	r3, [r7, #4]
 8083b32:	681b      	ldr	r3, [r3, #0]
 8083b34:	430a      	orrs	r2, r1
 8083b36:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8083b38:	687b      	ldr	r3, [r7, #4]
 8083b3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8083b3c:	f003 0310 	and.w	r3, r3, #16
 8083b40:	2b00      	cmp	r3, #0
 8083b42:	d00a      	beq.n	8083b5a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8083b44:	687b      	ldr	r3, [r7, #4]
 8083b46:	681b      	ldr	r3, [r3, #0]
 8083b48:	689b      	ldr	r3, [r3, #8]
 8083b4a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8083b4e:	687b      	ldr	r3, [r7, #4]
 8083b50:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8083b52:	687b      	ldr	r3, [r7, #4]
 8083b54:	681b      	ldr	r3, [r3, #0]
 8083b56:	430a      	orrs	r2, r1
 8083b58:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8083b5a:	687b      	ldr	r3, [r7, #4]
 8083b5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8083b5e:	f003 0320 	and.w	r3, r3, #32
 8083b62:	2b00      	cmp	r3, #0
 8083b64:	d00a      	beq.n	8083b7c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8083b66:	687b      	ldr	r3, [r7, #4]
 8083b68:	681b      	ldr	r3, [r3, #0]
 8083b6a:	689b      	ldr	r3, [r3, #8]
 8083b6c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8083b70:	687b      	ldr	r3, [r7, #4]
 8083b72:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8083b74:	687b      	ldr	r3, [r7, #4]
 8083b76:	681b      	ldr	r3, [r3, #0]
 8083b78:	430a      	orrs	r2, r1
 8083b7a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8083b7c:	687b      	ldr	r3, [r7, #4]
 8083b7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8083b80:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8083b84:	2b00      	cmp	r3, #0
 8083b86:	d01a      	beq.n	8083bbe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8083b88:	687b      	ldr	r3, [r7, #4]
 8083b8a:	681b      	ldr	r3, [r3, #0]
 8083b8c:	685b      	ldr	r3, [r3, #4]
 8083b8e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8083b92:	687b      	ldr	r3, [r7, #4]
 8083b94:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8083b96:	687b      	ldr	r3, [r7, #4]
 8083b98:	681b      	ldr	r3, [r3, #0]
 8083b9a:	430a      	orrs	r2, r1
 8083b9c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8083b9e:	687b      	ldr	r3, [r7, #4]
 8083ba0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8083ba2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8083ba6:	d10a      	bne.n	8083bbe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8083ba8:	687b      	ldr	r3, [r7, #4]
 8083baa:	681b      	ldr	r3, [r3, #0]
 8083bac:	685b      	ldr	r3, [r3, #4]
 8083bae:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8083bb2:	687b      	ldr	r3, [r7, #4]
 8083bb4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8083bb6:	687b      	ldr	r3, [r7, #4]
 8083bb8:	681b      	ldr	r3, [r3, #0]
 8083bba:	430a      	orrs	r2, r1
 8083bbc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8083bbe:	687b      	ldr	r3, [r7, #4]
 8083bc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8083bc2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8083bc6:	2b00      	cmp	r3, #0
 8083bc8:	d00a      	beq.n	8083be0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8083bca:	687b      	ldr	r3, [r7, #4]
 8083bcc:	681b      	ldr	r3, [r3, #0]
 8083bce:	685b      	ldr	r3, [r3, #4]
 8083bd0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8083bd4:	687b      	ldr	r3, [r7, #4]
 8083bd6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8083bd8:	687b      	ldr	r3, [r7, #4]
 8083bda:	681b      	ldr	r3, [r3, #0]
 8083bdc:	430a      	orrs	r2, r1
 8083bde:	605a      	str	r2, [r3, #4]
  }
}
 8083be0:	bf00      	nop
 8083be2:	370c      	adds	r7, #12
 8083be4:	46bd      	mov	sp, r7
 8083be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8083bea:	4770      	bx	lr

08083bec <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8083bec:	b580      	push	{r7, lr}
 8083bee:	b098      	sub	sp, #96	@ 0x60
 8083bf0:	af02      	add	r7, sp, #8
 8083bf2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8083bf4:	687b      	ldr	r3, [r7, #4]
 8083bf6:	2200      	movs	r2, #0
 8083bf8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8083bfc:	f7fd f920 	bl	8080e40 <HAL_GetTick>
 8083c00:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8083c02:	687b      	ldr	r3, [r7, #4]
 8083c04:	681b      	ldr	r3, [r3, #0]
 8083c06:	681b      	ldr	r3, [r3, #0]
 8083c08:	f003 0308 	and.w	r3, r3, #8
 8083c0c:	2b08      	cmp	r3, #8
 8083c0e:	d12e      	bne.n	8083c6e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8083c10:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8083c14:	9300      	str	r3, [sp, #0]
 8083c16:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8083c18:	2200      	movs	r2, #0
 8083c1a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8083c1e:	6878      	ldr	r0, [r7, #4]
 8083c20:	f000 f88c 	bl	8083d3c <UART_WaitOnFlagUntilTimeout>
 8083c24:	4603      	mov	r3, r0
 8083c26:	2b00      	cmp	r3, #0
 8083c28:	d021      	beq.n	8083c6e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8083c2a:	687b      	ldr	r3, [r7, #4]
 8083c2c:	681b      	ldr	r3, [r3, #0]
 8083c2e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8083c30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8083c32:	e853 3f00 	ldrex	r3, [r3]
 8083c36:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8083c38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8083c3a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8083c3e:	653b      	str	r3, [r7, #80]	@ 0x50
 8083c40:	687b      	ldr	r3, [r7, #4]
 8083c42:	681b      	ldr	r3, [r3, #0]
 8083c44:	461a      	mov	r2, r3
 8083c46:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8083c48:	647b      	str	r3, [r7, #68]	@ 0x44
 8083c4a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8083c4c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8083c4e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8083c50:	e841 2300 	strex	r3, r2, [r1]
 8083c54:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8083c56:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8083c58:	2b00      	cmp	r3, #0
 8083c5a:	d1e6      	bne.n	8083c2a <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8083c5c:	687b      	ldr	r3, [r7, #4]
 8083c5e:	2220      	movs	r2, #32
 8083c60:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8083c62:	687b      	ldr	r3, [r7, #4]
 8083c64:	2200      	movs	r2, #0
 8083c66:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8083c6a:	2303      	movs	r3, #3
 8083c6c:	e062      	b.n	8083d34 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8083c6e:	687b      	ldr	r3, [r7, #4]
 8083c70:	681b      	ldr	r3, [r3, #0]
 8083c72:	681b      	ldr	r3, [r3, #0]
 8083c74:	f003 0304 	and.w	r3, r3, #4
 8083c78:	2b04      	cmp	r3, #4
 8083c7a:	d149      	bne.n	8083d10 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8083c7c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8083c80:	9300      	str	r3, [sp, #0]
 8083c82:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8083c84:	2200      	movs	r2, #0
 8083c86:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8083c8a:	6878      	ldr	r0, [r7, #4]
 8083c8c:	f000 f856 	bl	8083d3c <UART_WaitOnFlagUntilTimeout>
 8083c90:	4603      	mov	r3, r0
 8083c92:	2b00      	cmp	r3, #0
 8083c94:	d03c      	beq.n	8083d10 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8083c96:	687b      	ldr	r3, [r7, #4]
 8083c98:	681b      	ldr	r3, [r3, #0]
 8083c9a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8083c9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8083c9e:	e853 3f00 	ldrex	r3, [r3]
 8083ca2:	623b      	str	r3, [r7, #32]
   return(result);
 8083ca4:	6a3b      	ldr	r3, [r7, #32]
 8083ca6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8083caa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8083cac:	687b      	ldr	r3, [r7, #4]
 8083cae:	681b      	ldr	r3, [r3, #0]
 8083cb0:	461a      	mov	r2, r3
 8083cb2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8083cb4:	633b      	str	r3, [r7, #48]	@ 0x30
 8083cb6:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8083cb8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8083cba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8083cbc:	e841 2300 	strex	r3, r2, [r1]
 8083cc0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8083cc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8083cc4:	2b00      	cmp	r3, #0
 8083cc6:	d1e6      	bne.n	8083c96 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8083cc8:	687b      	ldr	r3, [r7, #4]
 8083cca:	681b      	ldr	r3, [r3, #0]
 8083ccc:	3308      	adds	r3, #8
 8083cce:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8083cd0:	693b      	ldr	r3, [r7, #16]
 8083cd2:	e853 3f00 	ldrex	r3, [r3]
 8083cd6:	60fb      	str	r3, [r7, #12]
   return(result);
 8083cd8:	68fb      	ldr	r3, [r7, #12]
 8083cda:	f023 0301 	bic.w	r3, r3, #1
 8083cde:	64bb      	str	r3, [r7, #72]	@ 0x48
 8083ce0:	687b      	ldr	r3, [r7, #4]
 8083ce2:	681b      	ldr	r3, [r3, #0]
 8083ce4:	3308      	adds	r3, #8
 8083ce6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8083ce8:	61fa      	str	r2, [r7, #28]
 8083cea:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8083cec:	69b9      	ldr	r1, [r7, #24]
 8083cee:	69fa      	ldr	r2, [r7, #28]
 8083cf0:	e841 2300 	strex	r3, r2, [r1]
 8083cf4:	617b      	str	r3, [r7, #20]
   return(result);
 8083cf6:	697b      	ldr	r3, [r7, #20]
 8083cf8:	2b00      	cmp	r3, #0
 8083cfa:	d1e5      	bne.n	8083cc8 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8083cfc:	687b      	ldr	r3, [r7, #4]
 8083cfe:	2220      	movs	r2, #32
 8083d00:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8083d04:	687b      	ldr	r3, [r7, #4]
 8083d06:	2200      	movs	r2, #0
 8083d08:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8083d0c:	2303      	movs	r3, #3
 8083d0e:	e011      	b.n	8083d34 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8083d10:	687b      	ldr	r3, [r7, #4]
 8083d12:	2220      	movs	r2, #32
 8083d14:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8083d16:	687b      	ldr	r3, [r7, #4]
 8083d18:	2220      	movs	r2, #32
 8083d1a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8083d1e:	687b      	ldr	r3, [r7, #4]
 8083d20:	2200      	movs	r2, #0
 8083d22:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8083d24:	687b      	ldr	r3, [r7, #4]
 8083d26:	2200      	movs	r2, #0
 8083d28:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8083d2a:	687b      	ldr	r3, [r7, #4]
 8083d2c:	2200      	movs	r2, #0
 8083d2e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8083d32:	2300      	movs	r3, #0
}
 8083d34:	4618      	mov	r0, r3
 8083d36:	3758      	adds	r7, #88	@ 0x58
 8083d38:	46bd      	mov	sp, r7
 8083d3a:	bd80      	pop	{r7, pc}

08083d3c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8083d3c:	b580      	push	{r7, lr}
 8083d3e:	b084      	sub	sp, #16
 8083d40:	af00      	add	r7, sp, #0
 8083d42:	60f8      	str	r0, [r7, #12]
 8083d44:	60b9      	str	r1, [r7, #8]
 8083d46:	603b      	str	r3, [r7, #0]
 8083d48:	4613      	mov	r3, r2
 8083d4a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8083d4c:	e04f      	b.n	8083dee <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8083d4e:	69bb      	ldr	r3, [r7, #24]
 8083d50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8083d54:	d04b      	beq.n	8083dee <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8083d56:	f7fd f873 	bl	8080e40 <HAL_GetTick>
 8083d5a:	4602      	mov	r2, r0
 8083d5c:	683b      	ldr	r3, [r7, #0]
 8083d5e:	1ad3      	subs	r3, r2, r3
 8083d60:	69ba      	ldr	r2, [r7, #24]
 8083d62:	429a      	cmp	r2, r3
 8083d64:	d302      	bcc.n	8083d6c <UART_WaitOnFlagUntilTimeout+0x30>
 8083d66:	69bb      	ldr	r3, [r7, #24]
 8083d68:	2b00      	cmp	r3, #0
 8083d6a:	d101      	bne.n	8083d70 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8083d6c:	2303      	movs	r3, #3
 8083d6e:	e04e      	b.n	8083e0e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8083d70:	68fb      	ldr	r3, [r7, #12]
 8083d72:	681b      	ldr	r3, [r3, #0]
 8083d74:	681b      	ldr	r3, [r3, #0]
 8083d76:	f003 0304 	and.w	r3, r3, #4
 8083d7a:	2b00      	cmp	r3, #0
 8083d7c:	d037      	beq.n	8083dee <UART_WaitOnFlagUntilTimeout+0xb2>
 8083d7e:	68bb      	ldr	r3, [r7, #8]
 8083d80:	2b80      	cmp	r3, #128	@ 0x80
 8083d82:	d034      	beq.n	8083dee <UART_WaitOnFlagUntilTimeout+0xb2>
 8083d84:	68bb      	ldr	r3, [r7, #8]
 8083d86:	2b40      	cmp	r3, #64	@ 0x40
 8083d88:	d031      	beq.n	8083dee <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8083d8a:	68fb      	ldr	r3, [r7, #12]
 8083d8c:	681b      	ldr	r3, [r3, #0]
 8083d8e:	69db      	ldr	r3, [r3, #28]
 8083d90:	f003 0308 	and.w	r3, r3, #8
 8083d94:	2b08      	cmp	r3, #8
 8083d96:	d110      	bne.n	8083dba <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8083d98:	68fb      	ldr	r3, [r7, #12]
 8083d9a:	681b      	ldr	r3, [r3, #0]
 8083d9c:	2208      	movs	r2, #8
 8083d9e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8083da0:	68f8      	ldr	r0, [r7, #12]
 8083da2:	f000 f838 	bl	8083e16 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8083da6:	68fb      	ldr	r3, [r7, #12]
 8083da8:	2208      	movs	r2, #8
 8083daa:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8083dae:	68fb      	ldr	r3, [r7, #12]
 8083db0:	2200      	movs	r2, #0
 8083db2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8083db6:	2301      	movs	r3, #1
 8083db8:	e029      	b.n	8083e0e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8083dba:	68fb      	ldr	r3, [r7, #12]
 8083dbc:	681b      	ldr	r3, [r3, #0]
 8083dbe:	69db      	ldr	r3, [r3, #28]
 8083dc0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8083dc4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8083dc8:	d111      	bne.n	8083dee <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8083dca:	68fb      	ldr	r3, [r7, #12]
 8083dcc:	681b      	ldr	r3, [r3, #0]
 8083dce:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8083dd2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8083dd4:	68f8      	ldr	r0, [r7, #12]
 8083dd6:	f000 f81e 	bl	8083e16 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8083dda:	68fb      	ldr	r3, [r7, #12]
 8083ddc:	2220      	movs	r2, #32
 8083dde:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8083de2:	68fb      	ldr	r3, [r7, #12]
 8083de4:	2200      	movs	r2, #0
 8083de6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8083dea:	2303      	movs	r3, #3
 8083dec:	e00f      	b.n	8083e0e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8083dee:	68fb      	ldr	r3, [r7, #12]
 8083df0:	681b      	ldr	r3, [r3, #0]
 8083df2:	69da      	ldr	r2, [r3, #28]
 8083df4:	68bb      	ldr	r3, [r7, #8]
 8083df6:	4013      	ands	r3, r2
 8083df8:	68ba      	ldr	r2, [r7, #8]
 8083dfa:	429a      	cmp	r2, r3
 8083dfc:	bf0c      	ite	eq
 8083dfe:	2301      	moveq	r3, #1
 8083e00:	2300      	movne	r3, #0
 8083e02:	b2db      	uxtb	r3, r3
 8083e04:	461a      	mov	r2, r3
 8083e06:	79fb      	ldrb	r3, [r7, #7]
 8083e08:	429a      	cmp	r2, r3
 8083e0a:	d0a0      	beq.n	8083d4e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8083e0c:	2300      	movs	r3, #0
}
 8083e0e:	4618      	mov	r0, r3
 8083e10:	3710      	adds	r7, #16
 8083e12:	46bd      	mov	sp, r7
 8083e14:	bd80      	pop	{r7, pc}

08083e16 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8083e16:	b480      	push	{r7}
 8083e18:	b095      	sub	sp, #84	@ 0x54
 8083e1a:	af00      	add	r7, sp, #0
 8083e1c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8083e1e:	687b      	ldr	r3, [r7, #4]
 8083e20:	681b      	ldr	r3, [r3, #0]
 8083e22:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8083e24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8083e26:	e853 3f00 	ldrex	r3, [r3]
 8083e2a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8083e2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8083e2e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8083e32:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8083e34:	687b      	ldr	r3, [r7, #4]
 8083e36:	681b      	ldr	r3, [r3, #0]
 8083e38:	461a      	mov	r2, r3
 8083e3a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8083e3c:	643b      	str	r3, [r7, #64]	@ 0x40
 8083e3e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8083e40:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8083e42:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8083e44:	e841 2300 	strex	r3, r2, [r1]
 8083e48:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8083e4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8083e4c:	2b00      	cmp	r3, #0
 8083e4e:	d1e6      	bne.n	8083e1e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8083e50:	687b      	ldr	r3, [r7, #4]
 8083e52:	681b      	ldr	r3, [r3, #0]
 8083e54:	3308      	adds	r3, #8
 8083e56:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8083e58:	6a3b      	ldr	r3, [r7, #32]
 8083e5a:	e853 3f00 	ldrex	r3, [r3]
 8083e5e:	61fb      	str	r3, [r7, #28]
   return(result);
 8083e60:	69fb      	ldr	r3, [r7, #28]
 8083e62:	f023 0301 	bic.w	r3, r3, #1
 8083e66:	64bb      	str	r3, [r7, #72]	@ 0x48
 8083e68:	687b      	ldr	r3, [r7, #4]
 8083e6a:	681b      	ldr	r3, [r3, #0]
 8083e6c:	3308      	adds	r3, #8
 8083e6e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8083e70:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8083e72:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8083e74:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8083e76:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8083e78:	e841 2300 	strex	r3, r2, [r1]
 8083e7c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8083e7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8083e80:	2b00      	cmp	r3, #0
 8083e82:	d1e5      	bne.n	8083e50 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8083e84:	687b      	ldr	r3, [r7, #4]
 8083e86:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8083e88:	2b01      	cmp	r3, #1
 8083e8a:	d118      	bne.n	8083ebe <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8083e8c:	687b      	ldr	r3, [r7, #4]
 8083e8e:	681b      	ldr	r3, [r3, #0]
 8083e90:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8083e92:	68fb      	ldr	r3, [r7, #12]
 8083e94:	e853 3f00 	ldrex	r3, [r3]
 8083e98:	60bb      	str	r3, [r7, #8]
   return(result);
 8083e9a:	68bb      	ldr	r3, [r7, #8]
 8083e9c:	f023 0310 	bic.w	r3, r3, #16
 8083ea0:	647b      	str	r3, [r7, #68]	@ 0x44
 8083ea2:	687b      	ldr	r3, [r7, #4]
 8083ea4:	681b      	ldr	r3, [r3, #0]
 8083ea6:	461a      	mov	r2, r3
 8083ea8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8083eaa:	61bb      	str	r3, [r7, #24]
 8083eac:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8083eae:	6979      	ldr	r1, [r7, #20]
 8083eb0:	69ba      	ldr	r2, [r7, #24]
 8083eb2:	e841 2300 	strex	r3, r2, [r1]
 8083eb6:	613b      	str	r3, [r7, #16]
   return(result);
 8083eb8:	693b      	ldr	r3, [r7, #16]
 8083eba:	2b00      	cmp	r3, #0
 8083ebc:	d1e6      	bne.n	8083e8c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8083ebe:	687b      	ldr	r3, [r7, #4]
 8083ec0:	2220      	movs	r2, #32
 8083ec2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8083ec6:	687b      	ldr	r3, [r7, #4]
 8083ec8:	2200      	movs	r2, #0
 8083eca:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8083ecc:	687b      	ldr	r3, [r7, #4]
 8083ece:	2200      	movs	r2, #0
 8083ed0:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8083ed2:	bf00      	nop
 8083ed4:	3754      	adds	r7, #84	@ 0x54
 8083ed6:	46bd      	mov	sp, r7
 8083ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8083edc:	4770      	bx	lr

08083ede <memcmp>:
 8083ede:	b510      	push	{r4, lr}
 8083ee0:	3901      	subs	r1, #1
 8083ee2:	4402      	add	r2, r0
 8083ee4:	4290      	cmp	r0, r2
 8083ee6:	d101      	bne.n	8083eec <memcmp+0xe>
 8083ee8:	2000      	movs	r0, #0
 8083eea:	e005      	b.n	8083ef8 <memcmp+0x1a>
 8083eec:	7803      	ldrb	r3, [r0, #0]
 8083eee:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8083ef2:	42a3      	cmp	r3, r4
 8083ef4:	d001      	beq.n	8083efa <memcmp+0x1c>
 8083ef6:	1b18      	subs	r0, r3, r4
 8083ef8:	bd10      	pop	{r4, pc}
 8083efa:	3001      	adds	r0, #1
 8083efc:	e7f2      	b.n	8083ee4 <memcmp+0x6>

08083efe <memset>:
 8083efe:	4402      	add	r2, r0
 8083f00:	4603      	mov	r3, r0
 8083f02:	4293      	cmp	r3, r2
 8083f04:	d100      	bne.n	8083f08 <memset+0xa>
 8083f06:	4770      	bx	lr
 8083f08:	f803 1b01 	strb.w	r1, [r3], #1
 8083f0c:	e7f9      	b.n	8083f02 <memset+0x4>

08083f0e <strcspn>:
 8083f0e:	b570      	push	{r4, r5, r6, lr}
 8083f10:	4603      	mov	r3, r0
 8083f12:	461e      	mov	r6, r3
 8083f14:	f813 4b01 	ldrb.w	r4, [r3], #1
 8083f18:	b144      	cbz	r4, 8083f2c <strcspn+0x1e>
 8083f1a:	1e4a      	subs	r2, r1, #1
 8083f1c:	e001      	b.n	8083f22 <strcspn+0x14>
 8083f1e:	42a5      	cmp	r5, r4
 8083f20:	d004      	beq.n	8083f2c <strcspn+0x1e>
 8083f22:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 8083f26:	2d00      	cmp	r5, #0
 8083f28:	d1f9      	bne.n	8083f1e <strcspn+0x10>
 8083f2a:	e7f2      	b.n	8083f12 <strcspn+0x4>
 8083f2c:	1a30      	subs	r0, r6, r0
 8083f2e:	bd70      	pop	{r4, r5, r6, pc}

08083f30 <__libc_init_array>:
 8083f30:	b570      	push	{r4, r5, r6, lr}
 8083f32:	4d0d      	ldr	r5, [pc, #52]	@ (8083f68 <__libc_init_array+0x38>)
 8083f34:	4c0d      	ldr	r4, [pc, #52]	@ (8083f6c <__libc_init_array+0x3c>)
 8083f36:	1b64      	subs	r4, r4, r5
 8083f38:	10a4      	asrs	r4, r4, #2
 8083f3a:	2600      	movs	r6, #0
 8083f3c:	42a6      	cmp	r6, r4
 8083f3e:	d109      	bne.n	8083f54 <__libc_init_array+0x24>
 8083f40:	4d0b      	ldr	r5, [pc, #44]	@ (8083f70 <__libc_init_array+0x40>)
 8083f42:	4c0c      	ldr	r4, [pc, #48]	@ (8083f74 <__libc_init_array+0x44>)
 8083f44:	f000 f826 	bl	8083f94 <_init>
 8083f48:	1b64      	subs	r4, r4, r5
 8083f4a:	10a4      	asrs	r4, r4, #2
 8083f4c:	2600      	movs	r6, #0
 8083f4e:	42a6      	cmp	r6, r4
 8083f50:	d105      	bne.n	8083f5e <__libc_init_array+0x2e>
 8083f52:	bd70      	pop	{r4, r5, r6, pc}
 8083f54:	f855 3b04 	ldr.w	r3, [r5], #4
 8083f58:	4798      	blx	r3
 8083f5a:	3601      	adds	r6, #1
 8083f5c:	e7ee      	b.n	8083f3c <__libc_init_array+0xc>
 8083f5e:	f855 3b04 	ldr.w	r3, [r5], #4
 8083f62:	4798      	blx	r3
 8083f64:	3601      	adds	r6, #1
 8083f66:	e7f2      	b.n	8083f4e <__libc_init_array+0x1e>
 8083f68:	08084924 	.word	0x08084924
 8083f6c:	08084924 	.word	0x08084924
 8083f70:	08084924 	.word	0x08084924
 8083f74:	08084928 	.word	0x08084928

08083f78 <memcpy>:
 8083f78:	440a      	add	r2, r1
 8083f7a:	4291      	cmp	r1, r2
 8083f7c:	f100 33ff 	add.w	r3, r0, #4294967295
 8083f80:	d100      	bne.n	8083f84 <memcpy+0xc>
 8083f82:	4770      	bx	lr
 8083f84:	b510      	push	{r4, lr}
 8083f86:	f811 4b01 	ldrb.w	r4, [r1], #1
 8083f8a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8083f8e:	4291      	cmp	r1, r2
 8083f90:	d1f9      	bne.n	8083f86 <memcpy+0xe>
 8083f92:	bd10      	pop	{r4, pc}

08083f94 <_init>:
 8083f94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8083f96:	bf00      	nop
 8083f98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8083f9a:	bc08      	pop	{r3}
 8083f9c:	469e      	mov	lr, r3
 8083f9e:	4770      	bx	lr

08083fa0 <_fini>:
 8083fa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8083fa2:	bf00      	nop
 8083fa4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8083fa6:	bc08      	pop	{r3}
 8083fa8:	469e      	mov	lr, r3
 8083faa:	4770      	bx	lr
